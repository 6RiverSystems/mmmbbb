// Package oas provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oas

import (
	"encoding/json"
	"fmt"
	"time"

	"go.6river.tech/mmmbbb/internal/sqltypes"
)

// Defines values for ErrorType.
const (
	ContextCanceled         ErrorType = "context.Canceled"
	ContextDeadlineExceeded ErrorType = "context.DeadlineExceeded"
	EntNotFound             ErrorType = "ent.NotFound"
	GrpcAborted             ErrorType = "grpc.Aborted"
	GrpcAlreadyExists       ErrorType = "grpc.AlreadyExists"
	GrpcCanceled            ErrorType = "grpc.Canceled"
	GrpcDataLoss            ErrorType = "grpc.DataLoss"
	GrpcDeadlineExceeded    ErrorType = "grpc.DeadlineExceeded"
	GrpcFailedPrecondition  ErrorType = "grpc.FailedPrecondition"
	GrpcInternal            ErrorType = "grpc.Internal"
	GrpcInvalidArgument     ErrorType = "grpc.InvalidArgument"
	GrpcNotFound            ErrorType = "grpc.NotFound"
	GrpcOutOfRange          ErrorType = "grpc.OutOfRange"
	GrpcPermissionDenied    ErrorType = "grpc.PermissionDenied"
	GrpcResourceExhausted   ErrorType = "grpc.ResourceExhausted"
	GrpcUnauthenticated     ErrorType = "grpc.Unauthenticated"
	GrpcUnavailable         ErrorType = "grpc.Unavailable"
	GrpcUnimplemented       ErrorType = "grpc.Unimplemented"
	GrpcUnknown             ErrorType = "grpc.Unknown"
)

// ConfiguredFault defines model for ConfiguredFault.
type ConfiguredFault struct {
	Count            int64              `json:"count"`
	FaultDescription *string            `json:"faultDescription,omitempty"`
	Operation        string             `json:"operation"`
	Parameters       *map[string]string `json:"parameters,omitempty"`
}

// DeliveryDelay defines model for DeliveryDelay.
type DeliveryDelay struct {
	// Delay Delivery delay, formatted as a Go Duration
	Delay sqltypes.Interval `json:"delay"`
}

// ErrorType defines model for ErrorType.
type ErrorType string

// FaultDescription defines model for FaultDescription.
type FaultDescription struct {
	Count      *int64             `json:"count,omitempty"`
	Error      ErrorType          `json:"error"`
	Operation  string             `json:"operation"`
	Parameters *map[string]string `json:"parameters,omitempty"`
}

// UptimeResponse Response object for a successful uptime request
type UptimeResponse struct {
	// StartTime Timestamp of when the application instance started
	StartTime            time.Time              `json:"startTime"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PutDelaysSubscriptionJSONRequestBody defines body for PutDelaysSubscription for application/json ContentType.
type PutDelaysSubscriptionJSONRequestBody = DeliveryDelay

// PostFaultsInjectJSONRequestBody defines body for PostFaultsInject for application/json ContentType.
type PostFaultsInjectJSONRequestBody = FaultDescription

// Getter for additional properties for UptimeResponse. Returns the specified
// element and whether it was found
func (a UptimeResponse) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for UptimeResponse
func (a *UptimeResponse) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for UptimeResponse to handle AdditionalProperties
func (a *UptimeResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["startTime"]; found {
		err = json.Unmarshal(raw, &a.StartTime)
		if err != nil {
			return fmt.Errorf("error reading 'startTime': %w", err)
		}
		delete(object, "startTime")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for UptimeResponse to handle AdditionalProperties
func (a UptimeResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["startTime"], err = json.Marshal(a.StartTime)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'startTime': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
