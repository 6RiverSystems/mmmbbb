# Copyright (c) 2021 6 River Systems
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

openapi: 3.0.1

info:
  title: 6 River Systems pub-sub-ish message bus API
  description: |
    This API describes interactions with the 6RS message bus
  version: 1.x.x
  contact:
    name: 6 River Systems
    url: https://6river.com

tags:
  - name: Internal
    description: |
      This is an internal API used between 6RS components.

paths:
  # TODO: can we reference common endpoints in a shared OAS subset with $ref?

  /metrics:
    get:
      tags:
        - Prometheus
        - Metrics
        - Status
      summary: Prometheus metrics export
      description: Retrive current exported Prometheus metrics
      responses:
        200:
          description: Metrics returned in Prometheus text format
          content:
            text/plain:
              schema:
                type: string

  /debug/vars:
    get:
      tags:
        - Debug
        - Status
      summary: Retrieve debug expvars
      description: Retrieve debug expvars in JSON format
      responses:
        200:
          description: Current expvar values
          content:
            application/json:
              schema:
                type: object
                description: >
                  This is a free-form JSON object. The specific keys present
                  will depend on internal application details.

  /:
    get:
      tags:
        - Status
      summary: Application uptime
      description: >
        Retrieve application uptime and possibly additional application-specific
        metadata
      responses:
        200:
          description: Application is up
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UptimeResponse"

  /server/shutdown:
    post:
      tags:
        - Control
      summary: Shutdown the app, gracefully
      description: >
        Request a clean app shutdown, with a reasonable amount of time allowed
        for active requests and background tasks to complete.
      responses:
        200:
          description: Application shutdown has been initiated
          content:
            text/plain:
              schema:
                type: string
                description: A witty message
  /server/kill:
    post:
      tags:
        - Control
      summary: Shutdown the app, forcefully
      description: >
        Request an app shutdown, with a minimal amount of time allowed for
        active requests and background tasks to complete before forcibly killing
        the app.
      responses:
        200:
          description: Application kill has been initiated
          content:
            text/plain:
              schema:
                type: string
                description: A sad message

  /faults:
    get:
      tags:
        - FaultInjection
      summary: Get currently enabled fault injections
      responses:
        200:
          description: List of configured fault injections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConfiguredFault"
  /faults/inject:
    post:
      tags:
        - FaultInjection
      summary: Inject a new diagnostic fault
      requestBody:
        required: true
        description: Description of the fault to inject
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FaultDescription"
      responses:
        201:
          description: Fault has been injected
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConfiguredFault"

  /delays/{subscription}:
    get:
      tags:
        - DelayInjection
      summary: Get delivery delay setting for a subscription
      parameters:
        - name: subscription
          in: path
          required: true
          schema:
            type: string
            pattern: "projects/[^/]+/subscriptions/[^/]+"
      responses:
        200:
          description: Configured delivery delay
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryDelay"
    put:
      tags:
        - DelayInjection
      summary: Set delivery delay for a subscription
      description: >
        Set the minimum delay after publishing before any message is eligible
        for delivery. Note that this is the delay after publishing, _not_ the
        delay after any prior message is delivered or acknowledged.
      parameters:
        - name: subscription
          in: path
          required: true
          schema:
            type: string
            pattern: "projects/[^/]+/subscriptions/[^/]+"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeliveryDelay"
      responses:
        200:
          description: Configured delivery delay
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryDelay"
    delete:
      tags:
        - DelayInjection
      summary: Delete (set to zero) delivery delay for a subscription
      parameters:
        - name: subscription
          in: path
          required: true
          schema:
            type: string
            pattern: "projects/[^/]+/subscriptions/[^/]+"
      responses:
        204:
          description: Delay removed

components:
  schemas:
    UptimeResponse:
      type: object
      description: Response object for a successful uptime request
      additionalProperties: true
      required:
        - startTime
      properties:
        startTime:
          type: string
          format: date-time
          description: Timestamp of when the application instance started

    ErrorMessage:
      type: object
      description: A generic error message object
      required:
        - message
      additionalProperties: true
      properties:
        message:
          type: string
          description: A human readable error message
        name:
          type: string
          description: >
            The name of some object or entity which triggered the error

    FaultDescription:
      type: object
      additionalProperties: false
      required:
        - operation
        - error
      properties:
        operation:
          type: string
          minLength: 1
        parameters:
          type: object
          additionalProperties:
            type: string
        count:
          type: integer
          format: int64
          minimum: 1
        error:
          # this has to be a stand-alone schema for oapi-codgen to make
          # constants for it
          $ref: "#/components/schemas/ErrorType"
    ErrorType:
      type: string
      enum:
        - context.Canceled
        - context.DeadlineExceeded
        - ent.NotFound
        - grpc.Canceled
        - grpc.Unknown
        - grpc.InvalidArgument
        - grpc.DeadlineExceeded
        - grpc.NotFound
        - grpc.AlreadyExists
        - grpc.PermissionDenied
        - grpc.ResourceExhausted
        - grpc.FailedPrecondition
        - grpc.Aborted
        - grpc.OutOfRange
        - grpc.Unimplemented
        - grpc.Internal
        - grpc.Unavailable
        - grpc.DataLoss
        - grpc.Unauthenticated

    ConfiguredFault:
      type: object
      additionalProperties: false
      required:
        - operation
        - count
      properties:
        operation:
          type: string
          minLength: 1
        parameters:
          type: object
          additionalProperties:
            type: string
        count:
          type: integer
          format: int64
        faultDescription:
          type: string

    DeliveryDelay:
      type: object
      required:
        - delay
      properties:
        delay:
          type: string
          description: Delivery delay, formatted as a Go Duration
          x-go-type: customtypes.Interval
