version: 2.1

orbs:
  sixrs-gke: sixriversystems/sixrs-gke@8

aliases:
  - &pg_default "14.17"

jobs:
  all-in-one:
    parameters:
      pgver:
        type: string
      cgo:
        type: string
    docker:
      - image: cimg/go:1.24
      - image: cimg/postgres:<< parameters.pgver >>
        environment:
          POSTGRES_USER: circle
          POSTGRES_DB: circle_test
    resource_class: large

    environment:
      TEST_RESULTS: /tmp/test-results
      DATABASE_URL: "postgres://circle@localhost:5432/circle_test?sslmode=disable"
      GOPRIVATE: "go.6river.tech/*,github.com/6RiverSystems/*"
      CGO_ENABLED: << parameters.cgo >>
      GOMAXPROCS: "4"
      MAGEFILE_ENABLE_COLOR: "1"

    steps:
      - checkout
      - run:
          name: Limit cache weekly
          command: date +%Y%U >/tmp/cache-time-limit
      - restore_cache:
          name: Restore module cache
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}

      - run: go mod download
      - run: go mod verify
      - run: go tool mage -v installProtobufTools
      - run: go tool mage -v generate:force
      # make sure committed generated code was up to date
      - run: git diff --exit-code

      - run:
          name: Compile code
          command: go tool mage -v compile

      - run:
          name: Prepare for tests
          command: mkdir -p $TEST_RESULTS
      - run:
          name: format check
          command: |
            go tool mage -v format
            git diff --exit-code
      # we only need to run lint on one build variant
      - when:
          condition:
            and:
              - equal: ["1", << parameters.cgo >>]
              - equal: [*pg_default, << parameters.pgver >>]
          steps:
            - restore_cache:
                name: Restore golangci-lint cache
                keys:
                  - go-lint-v1-cgo<< parameters.cgo >>-{{ checksum "/tmp/cache-time-limit" }}-{{ .Revision }}
                  - go-lint-v1-cgo<< parameters.cgo >>-{{ checksum "/tmp/cache-time-limit" }}-
            - run: go tool mage -v lint:ci
            - save_cache:
                name: Save golangci-lint cache
                key: go-lint-v1-cgo<< parameters.cgo >>-{{ checksum "/tmp/cache-time-limit" }}-{{ .Revision }}
                paths:
                  - ~/.cache/golangci-lint
      - run:
          name: Waiting for Postgres to be ready
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Run tests
          environment:
            NODE_ENV: test
          # while we aren't using the parallel test split here, we still need to
          # use test-go-ci-split to get junit output and proper coverage file
          # storage
          command: go tool mage -v testGoCISplit

      - run:
          name: Validate service is working (mmmbbb)
          command: go tool mage -v testSmoke mmmbbb localhost:8084

      - run:
          name: Coverage HTML report
          command: |
            go tool cover -html="${TEST_RESULTS}/coverage.out" -o "${TEST_RESULTS}/coverage.html"
            go tool cover -html="${TEST_RESULTS}/coverage-smoke-mmmbbb.out" -o "${TEST_RESULTS}/coverage-smoke-mmmbbb.html"
      - sixrs-gke/codecov:
          codecov-params: "-s ${TEST_RESULTS}"
      - store_artifacts:
          name: Capture test result artifacts
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          name: Store test results for CircleCI
          path: /tmp/test-results
      - save_cache:
          name: Save module cache
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/go/pkg"

      # post to slack if `main` fails to build
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - sixrs-gke/status:
                channel: "#eng_mmmbbb"
                fail_only: true

  publish-docker-multiarch:
    docker:
      - image: cimg/go:1.24
    resource_class: large
    environment:
      GOPRIVATE: "go.6river.tech/*,github.com/6RiverSystems/*"
      GOMAXPROCS: "4"
    steps:
      - checkout
      - run:
          name: Limit cache weekly
          command: date +%Y%U >/tmp/cache-time-limit
      - restore_cache:
          name: Restore module cache
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
        # for Go modules, we only need version numbers on `main`, as Go can
        # pull any other git commit by hash. We do need a version tag for
        # docker for this package however, just don't need it to be a git
        # tag.
      - when:
          condition:
            equal: ["main", << pipeline.git.branch >>]
          steps:
            - sixrs-gke/run-release
      - unless:
          condition:
            equal: ["main", << pipeline.git.branch >>]
          steps:
            - run:
                name: Select dev version
                command: go tool mage -v generate:devVersion
      - store_artifacts:
          name: Capture chosen version
          path: .version
      - run: go mod download
      - run: go mod verify
      - run: go tool mage -v installProtobufTools
      - run: go tool mage -v generate:force
      - setup_remote_docker
      - sixrs-gke/docker-login
      - run:
          name: Build docker test image
          command: |
            go tool ko resolve --local --platform linux/amd64 -f <( echo ko://./cmd/mmmbbb ) | head -n1 | tee /tmp/testimage.txt
      - run:
          name: Verify docker images
          command: |
            set -xeuo pipefail
            docker run --rm $(</tmp/testimage.txt) --version
            # fire this one into the background for the smoke test run
            docker run --name mmmbbb-smoke --rm $(</tmp/testimage.txt) &
            pid=$!
            # can't contact the remote docker directly, so we have to build
            # the mage binary, copy it over, and exec it
            CGO_ENABLED=0 go tool mage -v -compile magebinary
            docker cp magebinary mmmbbb-smoke:/
            rm -f magebinary
            # this should ask the app to shut down at the end
            docker exec mmmbbb-smoke /magebinary -v testSmokeCore mmmbbb localhost:8084
            wait $pid
      - run:
          name: Publish docker images
          command: |
            set -xeuo pipefail
            version=$(<.version)
            args=(--bare --tags "$version")
            if [ "$CIRCLE_BRANCH" = "main" ]; then
              args+=(--tags latest)
            fi
            KO_DOCKER_REPO=us-docker.pkg.dev/plasma-column-128721/gcr.io/mmmbbb go tool ko build "${args[@]}" ./cmd/mmmbbb

workflows:
  build-workflow:
    jobs:
      - all-in-one:
          context: 6rs-circle
          matrix:
            parameters:
              pgver:
                - *pg_default
                - "15.12"
                - "16.8"
                - "17.4"
              cgo:
                - "1"
                # modernc driver is suffering from test flake issues, skip it for now
                # - "0"
      - publish-docker-multiarch:
          context: 6rs-circle
          requires:
            - all-in-one
          filters:
            branches:
              only:
                - main
                - /^publish\/.*/
