version: 2.1

orbs:
  sixrs-gke: sixriversystems/sixrs-gke@3

jobs:
  all-in-one:
    parameters:
      pgimg:
        type: string
      cgo:
        type: string
    docker:
      - image: cimg/go:1.17
      - image: << parameters.pgimg >>
        environment:
          POSTGRES_USER: circle
          POSTGRES_DB: circle_test
    resource_class: large

    environment:
      TEST_RESULTS: /tmp/test-results
      DATABASE_URL: "postgres://circle@localhost:5432/circle_test?sslmode=disable"
      GOPRIVATE: "go.6river.tech/*,github.com/6RiverSystems/*"
      CGO_ENABLED: << parameters.cgo >>

    steps:
      - checkout
      - run:
          name: Limit cache weekly
          command: date +%Y%U >/tmp/cache-time-limit
      - restore_cache:
          name: Restore module cache
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - restore_cache:
          name: Restore similar AIO build cache
          keys:
            - go-build-aio-v1-cgo<< parameters.cgo >>-{{ checksum "/tmp/cache-time-limit" }}-{{ .Revision }}
            - go-build-aio-v1-cgo<< parameters.cgo >>-{{ checksum "/tmp/cache-time-limit" }}-

      - run: ./mage -v get
      - run: ./mage -v installCITools
      - run: ./mage -v generate:force

      - run:
          name: Compile code
          command: ./mage -v compile

      - run:
          name: Prepare for tests
          command: mkdir -p $TEST_RESULTS
      - run:
          name: format check
          command: |
            ./mage -v format
            git diff --exit-code
      # we only need to run lint on one pg version
      - when:
          condition:
            equal: ["cimg/postgres:9.6", << parameters.pgimg >>]
          steps:
            - restore_cache:
                name: Restore golangci-lint cache
                keys:
                  - go-lint-v1-cgo<< parameters.cgo >>-{{ checksum "/tmp/cache-time-limit" }}-{{ .Revision }}
                  - go-lint-v1-cgo<< parameters.cgo >>-{{ checksum "/tmp/cache-time-limit" }}-
            - run: ./mage -v lint:ci
            - save_cache:
                name: Save golangci-lint cache
                key: go-lint-v1-cgo<< parameters.cgo >>-{{ checksum "/tmp/cache-time-limit" }}-{{ .Revision }}
                paths:
                  - ~/.cache/golangci-lint
      - run:
          name: Waiting for Postgres to be ready
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Run tests
          environment:
            NODE_ENV: test
          # while we aren't using the parallel test split here, we still need to
          # use test-go-ci-split to get junit output and proper coverage file
          # storage
          command: ./mage -v testGoCISplit

      - run:
          name: Validate service is working (service)
          command: ./mage -v testSmoke service localhost:3001

      - run:
          name: Coverage HTML report
          command: |
            go tool cover -html="${TEST_RESULTS}/coverage.out" -o "${TEST_RESULTS}/coverage.html"
            go tool cover -html="${TEST_RESULTS}/coverage-smoke-service.out" -o "${TEST_RESULTS}/coverage-smoke-service.html"
      - sixrs-gke/codecov:
          codecov-params: "-s ${TEST_RESULTS}"
      - store_artifacts:
          name: Capture test result artifacts
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          name: Store test results for CircleCI
          path: /tmp/test-results
      - save_cache:
          name: Save module cache
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/go/pkg"
      - save_cache:
          name: Save AIO build cache
          key: go-build-aio-v1-cgo<< parameters.cgo >>-{{ checksum "/tmp/cache-time-limit" }}-{{ .Revision }}
          paths:
            - ~/.cache/go-build

      # post to slack if `main` fails to build
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - sixrs-gke/status:
                channel: "#eng_mmmbbb"
                fail_only: true

  publish-docker-multiarch:
    docker:
      - image: cimg/go:1.17
    resource_class: large
    environment:
      GOPRIVATE: "go.6river.tech/*,github.com/6RiverSystems/*"
    steps:
      - checkout
      - run:
          name: Limit cache weekly
          command: date +%Y%U >/tmp/cache-time-limit
      - restore_cache:
          name: Restore module cache
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
      - restore_cache:
          name: Restore similar multiarch build cache
          keys:
            - go-build-multiarch-v1-{{ checksum "/tmp/cache-time-limit" }}-{{ .Revision }}
            - go-build-multiarch-v1-{{ checksum "/tmp/cache-time-limit" }}-
        # for Go modules, we only need version numbers on `main`, as Go can
        # pull any other git commit by hash. We do need a version tag for
        # docker for this package however, just don't need it to be a git
        # tag.
      - when:
          condition:
            equal: ["main", << pipeline.git.branch >>]
          steps:
            - sixrs-gke/run-release
      - unless:
          condition:
            equal: ["main", << pipeline.git.branch >>]
          steps:
            - run:
                name: Select dev version
                command: ./mage -v generate:devVersion
      - store_artifacts:
          name: Capture chosen version
          path: .version
      - run: ./mage -v get
      - run: ./mage -v installCITools
      - run: ./mage -v generate:force
      - setup_remote_docker:
          version: 20.10.11
      - sixrs-gke/docker-login
      - run:
          name: Initialize docker buildx
          command: |
            docker run --privileged --rm tonistiigi/binfmt --install all
            docker context create multiarch-context
            docker buildx create --name mmmbbb-multiarch --driver docker-container --bootstrap --use multiarch-context
      - run:
          name: Build multiarch binaries
          command: ./mage -v releaseBinaries
      - run:
          name: Build multiarch docker images
          command: ./mage -v docker:multiarchBuildAll
      - run:
          name: Push multiarch docker images
          command: ./mage -v docker:multiarchPushAll
      - save_cache:
          name: Save multiarch build cache
          key: go-build-multiarch-v1-{{ checksum "/tmp/cache-time-limit" }}-{{ .Revision }}
          paths:
            - ~/.cache/go-build

workflows:
  version: 2
  build-workflow:
    jobs:
      - all-in-one:
          context: 6rs-circle
          matrix:
            parameters:
              pgimg:
                - cimg/postgres:9.6
                # - cimg/postgres:13.5
                - cimg/postgres:14.1
              cgo:
                - "1"
                - "0"
      - publish-docker-multiarch:
          context: 6rs-circle
          requires:
            - all-in-one
