// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"go.6river.tech/mmmbbb/ent/message"
	"go.6river.tech/mmmbbb/ent/predicate"
	"go.6river.tech/mmmbbb/ent/subscription"
	"go.6river.tech/mmmbbb/ent/topic"
)

// TopicUpdate is the builder for updating Topic entities.
type TopicUpdate struct {
	config
	hooks    []Hook
	mutation *TopicMutation
}

// Where appends a list predicates to the TopicUpdate builder.
func (tu *TopicUpdate) Where(ps ...predicate.Topic) *TopicUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetLive sets the "live" field.
func (tu *TopicUpdate) SetLive(b bool) *TopicUpdate {
	tu.mutation.SetLive(b)
	return tu
}

// SetNillableLive sets the "live" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableLive(b *bool) *TopicUpdate {
	if b != nil {
		tu.SetLive(*b)
	}
	return tu
}

// ClearLive clears the value of the "live" field.
func (tu *TopicUpdate) ClearLive() *TopicUpdate {
	tu.mutation.ClearLive()
	return tu
}

// SetDeletedAt sets the "deletedAt" field.
func (tu *TopicUpdate) SetDeletedAt(t time.Time) *TopicUpdate {
	tu.mutation.SetDeletedAt(t)
	return tu
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (tu *TopicUpdate) SetNillableDeletedAt(t *time.Time) *TopicUpdate {
	if t != nil {
		tu.SetDeletedAt(*t)
	}
	return tu
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (tu *TopicUpdate) ClearDeletedAt() *TopicUpdate {
	tu.mutation.ClearDeletedAt()
	return tu
}

// SetLabels sets the "labels" field.
func (tu *TopicUpdate) SetLabels(m map[string]string) *TopicUpdate {
	tu.mutation.SetLabels(m)
	return tu
}

// ClearLabels clears the value of the "labels" field.
func (tu *TopicUpdate) ClearLabels() *TopicUpdate {
	tu.mutation.ClearLabels()
	return tu
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (tu *TopicUpdate) AddSubscriptionIDs(ids ...uuid.UUID) *TopicUpdate {
	tu.mutation.AddSubscriptionIDs(ids...)
	return tu
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (tu *TopicUpdate) AddSubscriptions(s ...*Subscription) *TopicUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddSubscriptionIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (tu *TopicUpdate) AddMessageIDs(ids ...uuid.UUID) *TopicUpdate {
	tu.mutation.AddMessageIDs(ids...)
	return tu
}

// AddMessages adds the "messages" edges to the Message entity.
func (tu *TopicUpdate) AddMessages(m ...*Message) *TopicUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.AddMessageIDs(ids...)
}

// Mutation returns the TopicMutation object of the builder.
func (tu *TopicUpdate) Mutation() *TopicMutation {
	return tu.mutation
}

// ClearSubscriptions clears all "subscriptions" edges to the Subscription entity.
func (tu *TopicUpdate) ClearSubscriptions() *TopicUpdate {
	tu.mutation.ClearSubscriptions()
	return tu
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to Subscription entities by IDs.
func (tu *TopicUpdate) RemoveSubscriptionIDs(ids ...uuid.UUID) *TopicUpdate {
	tu.mutation.RemoveSubscriptionIDs(ids...)
	return tu
}

// RemoveSubscriptions removes "subscriptions" edges to Subscription entities.
func (tu *TopicUpdate) RemoveSubscriptions(s ...*Subscription) *TopicUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveSubscriptionIDs(ids...)
}

// ClearMessages clears all "messages" edges to the Message entity.
func (tu *TopicUpdate) ClearMessages() *TopicUpdate {
	tu.mutation.ClearMessages()
	return tu
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (tu *TopicUpdate) RemoveMessageIDs(ids ...uuid.UUID) *TopicUpdate {
	tu.mutation.RemoveMessageIDs(ids...)
	return tu
}

// RemoveMessages removes "messages" edges to Message entities.
func (tu *TopicUpdate) RemoveMessages(m ...*Message) *TopicUpdate {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tu.RemoveMessageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TopicUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TopicUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TopicUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TopicUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TopicUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(topic.Table, topic.Columns, sqlgraph.NewFieldSpec(topic.FieldID, field.TypeUUID))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Live(); ok {
		_spec.SetField(topic.FieldLive, field.TypeBool, value)
	}
	if tu.mutation.LiveCleared() {
		_spec.ClearField(topic.FieldLive, field.TypeBool)
	}
	if value, ok := tu.mutation.DeletedAt(); ok {
		_spec.SetField(topic.FieldDeletedAt, field.TypeTime, value)
	}
	if tu.mutation.DeletedAtCleared() {
		_spec.ClearField(topic.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.Labels(); ok {
		_spec.SetField(topic.FieldLabels, field.TypeJSON, value)
	}
	if tu.mutation.LabelsCleared() {
		_spec.ClearField(topic.FieldLabels, field.TypeJSON)
	}
	if tu.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   topic.SubscriptionsTable,
			Columns: []string{topic.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !tu.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   topic.SubscriptionsTable,
			Columns: []string{topic.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   topic.SubscriptionsTable,
			Columns: []string{topic.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   topic.MessagesTable,
			Columns: []string{topic.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !tu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   topic.MessagesTable,
			Columns: []string{topic.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   topic.MessagesTable,
			Columns: []string{topic.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TopicUpdateOne is the builder for updating a single Topic entity.
type TopicUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TopicMutation
}

// SetLive sets the "live" field.
func (tuo *TopicUpdateOne) SetLive(b bool) *TopicUpdateOne {
	tuo.mutation.SetLive(b)
	return tuo
}

// SetNillableLive sets the "live" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableLive(b *bool) *TopicUpdateOne {
	if b != nil {
		tuo.SetLive(*b)
	}
	return tuo
}

// ClearLive clears the value of the "live" field.
func (tuo *TopicUpdateOne) ClearLive() *TopicUpdateOne {
	tuo.mutation.ClearLive()
	return tuo
}

// SetDeletedAt sets the "deletedAt" field.
func (tuo *TopicUpdateOne) SetDeletedAt(t time.Time) *TopicUpdateOne {
	tuo.mutation.SetDeletedAt(t)
	return tuo
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (tuo *TopicUpdateOne) SetNillableDeletedAt(t *time.Time) *TopicUpdateOne {
	if t != nil {
		tuo.SetDeletedAt(*t)
	}
	return tuo
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (tuo *TopicUpdateOne) ClearDeletedAt() *TopicUpdateOne {
	tuo.mutation.ClearDeletedAt()
	return tuo
}

// SetLabels sets the "labels" field.
func (tuo *TopicUpdateOne) SetLabels(m map[string]string) *TopicUpdateOne {
	tuo.mutation.SetLabels(m)
	return tuo
}

// ClearLabels clears the value of the "labels" field.
func (tuo *TopicUpdateOne) ClearLabels() *TopicUpdateOne {
	tuo.mutation.ClearLabels()
	return tuo
}

// AddSubscriptionIDs adds the "subscriptions" edge to the Subscription entity by IDs.
func (tuo *TopicUpdateOne) AddSubscriptionIDs(ids ...uuid.UUID) *TopicUpdateOne {
	tuo.mutation.AddSubscriptionIDs(ids...)
	return tuo
}

// AddSubscriptions adds the "subscriptions" edges to the Subscription entity.
func (tuo *TopicUpdateOne) AddSubscriptions(s ...*Subscription) *TopicUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddSubscriptionIDs(ids...)
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (tuo *TopicUpdateOne) AddMessageIDs(ids ...uuid.UUID) *TopicUpdateOne {
	tuo.mutation.AddMessageIDs(ids...)
	return tuo
}

// AddMessages adds the "messages" edges to the Message entity.
func (tuo *TopicUpdateOne) AddMessages(m ...*Message) *TopicUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.AddMessageIDs(ids...)
}

// Mutation returns the TopicMutation object of the builder.
func (tuo *TopicUpdateOne) Mutation() *TopicMutation {
	return tuo.mutation
}

// ClearSubscriptions clears all "subscriptions" edges to the Subscription entity.
func (tuo *TopicUpdateOne) ClearSubscriptions() *TopicUpdateOne {
	tuo.mutation.ClearSubscriptions()
	return tuo
}

// RemoveSubscriptionIDs removes the "subscriptions" edge to Subscription entities by IDs.
func (tuo *TopicUpdateOne) RemoveSubscriptionIDs(ids ...uuid.UUID) *TopicUpdateOne {
	tuo.mutation.RemoveSubscriptionIDs(ids...)
	return tuo
}

// RemoveSubscriptions removes "subscriptions" edges to Subscription entities.
func (tuo *TopicUpdateOne) RemoveSubscriptions(s ...*Subscription) *TopicUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveSubscriptionIDs(ids...)
}

// ClearMessages clears all "messages" edges to the Message entity.
func (tuo *TopicUpdateOne) ClearMessages() *TopicUpdateOne {
	tuo.mutation.ClearMessages()
	return tuo
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (tuo *TopicUpdateOne) RemoveMessageIDs(ids ...uuid.UUID) *TopicUpdateOne {
	tuo.mutation.RemoveMessageIDs(ids...)
	return tuo
}

// RemoveMessages removes "messages" edges to Message entities.
func (tuo *TopicUpdateOne) RemoveMessages(m ...*Message) *TopicUpdateOne {
	ids := make([]uuid.UUID, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return tuo.RemoveMessageIDs(ids...)
}

// Where appends a list predicates to the TopicUpdate builder.
func (tuo *TopicUpdateOne) Where(ps ...predicate.Topic) *TopicUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TopicUpdateOne) Select(field string, fields ...string) *TopicUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Topic entity.
func (tuo *TopicUpdateOne) Save(ctx context.Context) (*Topic, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TopicUpdateOne) SaveX(ctx context.Context) *Topic {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TopicUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TopicUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TopicUpdateOne) sqlSave(ctx context.Context) (_node *Topic, err error) {
	_spec := sqlgraph.NewUpdateSpec(topic.Table, topic.Columns, sqlgraph.NewFieldSpec(topic.FieldID, field.TypeUUID))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Topic.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, topic.FieldID)
		for _, f := range fields {
			if !topic.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != topic.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Live(); ok {
		_spec.SetField(topic.FieldLive, field.TypeBool, value)
	}
	if tuo.mutation.LiveCleared() {
		_spec.ClearField(topic.FieldLive, field.TypeBool)
	}
	if value, ok := tuo.mutation.DeletedAt(); ok {
		_spec.SetField(topic.FieldDeletedAt, field.TypeTime, value)
	}
	if tuo.mutation.DeletedAtCleared() {
		_spec.ClearField(topic.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.Labels(); ok {
		_spec.SetField(topic.FieldLabels, field.TypeJSON, value)
	}
	if tuo.mutation.LabelsCleared() {
		_spec.ClearField(topic.FieldLabels, field.TypeJSON)
	}
	if tuo.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   topic.SubscriptionsTable,
			Columns: []string{topic.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedSubscriptionsIDs(); len(nodes) > 0 && !tuo.mutation.SubscriptionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   topic.SubscriptionsTable,
			Columns: []string{topic.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SubscriptionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   topic.SubscriptionsTable,
			Columns: []string{topic.SubscriptionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   topic.MessagesTable,
			Columns: []string{topic.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !tuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   topic.MessagesTable,
			Columns: []string{topic.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   topic.MessagesTable,
			Columns: []string{topic.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Topic{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{topic.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
