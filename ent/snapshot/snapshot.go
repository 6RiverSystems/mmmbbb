// Code generated by ent, DO NOT EDIT.

package snapshot

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the snapshot type in the database.
	Label = "snapshot"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTopicID holds the string denoting the topicid field in the database.
	FieldTopicID = "topic_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldExpiresAt holds the string denoting the expiresat field in the database.
	FieldExpiresAt = "expires_at"
	// FieldLabels holds the string denoting the labels field in the database.
	FieldLabels = "labels"
	// FieldAckedMessagesBefore holds the string denoting the ackedmessagesbefore field in the database.
	FieldAckedMessagesBefore = "acked_messages_before"
	// FieldAckedMessageIDs holds the string denoting the ackedmessageids field in the database.
	FieldAckedMessageIDs = "acked_message_ids"
	// EdgeTopic holds the string denoting the topic edge name in mutations.
	EdgeTopic = "topic"
	// Table holds the table name of the snapshot in the database.
	Table = "snapshots"
	// TopicTable is the table that holds the topic relation/edge.
	TopicTable = "snapshots"
	// TopicInverseTable is the table name for the Topic entity.
	// It exists in this package in order to avoid circular dependency with the "topic" package.
	TopicInverseTable = "topics"
	// TopicColumn is the table column denoting the topic relation/edge.
	TopicColumn = "topic_id"
)

// Columns holds all SQL columns for snapshot fields.
var Columns = []string{
	FieldID,
	FieldTopicID,
	FieldName,
	FieldCreatedAt,
	FieldExpiresAt,
	FieldLabels,
	FieldAckedMessagesBefore,
	FieldAckedMessageIDs,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "createdAt" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Snapshot queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTopicID orders the results by the topicID field.
func ByTopicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopicID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expiresAt field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByAckedMessagesBefore orders the results by the ackedMessagesBefore field.
func ByAckedMessagesBefore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAckedMessagesBefore, opts...).ToFunc()
}

// ByTopicField orders the results by topic field.
func ByTopicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTopicStep(), sql.OrderByField(field, opts...))
	}
}
func newTopicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TopicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TopicTable, TopicColumn),
	)
}
