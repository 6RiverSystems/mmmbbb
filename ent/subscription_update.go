// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"go.6river.tech/mmmbbb/ent/delivery"
	"go.6river.tech/mmmbbb/ent/predicate"
	"go.6river.tech/mmmbbb/ent/subscription"
	"go.6river.tech/mmmbbb/ent/topic"
	"go.6river.tech/mmmbbb/internal/sqltypes"
)

// SubscriptionUpdate is the builder for updating Subscription entities.
type SubscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionMutation
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (_u *SubscriptionUpdate) Where(ps ...predicate.Subscription) *SubscriptionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTopicID sets the "topicID" field.
func (_u *SubscriptionUpdate) SetTopicID(v uuid.UUID) *SubscriptionUpdate {
	_u.mutation.SetTopicID(v)
	return _u
}

// SetNillableTopicID sets the "topicID" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableTopicID(v *uuid.UUID) *SubscriptionUpdate {
	if v != nil {
		_u.SetTopicID(*v)
	}
	return _u
}

// SetExpiresAt sets the "expiresAt" field.
func (_u *SubscriptionUpdate) SetExpiresAt(v time.Time) *SubscriptionUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expiresAt" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableExpiresAt(v *time.Time) *SubscriptionUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetLive sets the "live" field.
func (_u *SubscriptionUpdate) SetLive(v bool) *SubscriptionUpdate {
	_u.mutation.SetLive(v)
	return _u
}

// SetNillableLive sets the "live" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableLive(v *bool) *SubscriptionUpdate {
	if v != nil {
		_u.SetLive(*v)
	}
	return _u
}

// ClearLive clears the value of the "live" field.
func (_u *SubscriptionUpdate) ClearLive() *SubscriptionUpdate {
	_u.mutation.ClearLive()
	return _u
}

// SetDeletedAt sets the "deletedAt" field.
func (_u *SubscriptionUpdate) SetDeletedAt(v time.Time) *SubscriptionUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableDeletedAt(v *time.Time) *SubscriptionUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (_u *SubscriptionUpdate) ClearDeletedAt() *SubscriptionUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetTTL sets the "ttl" field.
func (_u *SubscriptionUpdate) SetTTL(v sqltypes.Interval) *SubscriptionUpdate {
	_u.mutation.SetTTL(v)
	return _u
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableTTL(v *sqltypes.Interval) *SubscriptionUpdate {
	if v != nil {
		_u.SetTTL(*v)
	}
	return _u
}

// SetMessageTTL sets the "messageTTL" field.
func (_u *SubscriptionUpdate) SetMessageTTL(v sqltypes.Interval) *SubscriptionUpdate {
	_u.mutation.SetMessageTTL(v)
	return _u
}

// SetNillableMessageTTL sets the "messageTTL" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableMessageTTL(v *sqltypes.Interval) *SubscriptionUpdate {
	if v != nil {
		_u.SetMessageTTL(*v)
	}
	return _u
}

// SetOrderedDelivery sets the "orderedDelivery" field.
func (_u *SubscriptionUpdate) SetOrderedDelivery(v bool) *SubscriptionUpdate {
	_u.mutation.SetOrderedDelivery(v)
	return _u
}

// SetNillableOrderedDelivery sets the "orderedDelivery" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableOrderedDelivery(v *bool) *SubscriptionUpdate {
	if v != nil {
		_u.SetOrderedDelivery(*v)
	}
	return _u
}

// ClearOrderedDelivery clears the value of the "orderedDelivery" field.
func (_u *SubscriptionUpdate) ClearOrderedDelivery() *SubscriptionUpdate {
	_u.mutation.ClearOrderedDelivery()
	return _u
}

// SetLabels sets the "labels" field.
func (_u *SubscriptionUpdate) SetLabels(v map[string]string) *SubscriptionUpdate {
	_u.mutation.SetLabels(v)
	return _u
}

// ClearLabels clears the value of the "labels" field.
func (_u *SubscriptionUpdate) ClearLabels() *SubscriptionUpdate {
	_u.mutation.ClearLabels()
	return _u
}

// SetMinBackoff sets the "minBackoff" field.
func (_u *SubscriptionUpdate) SetMinBackoff(v *sqltypes.Interval) *SubscriptionUpdate {
	_u.mutation.SetMinBackoff(v)
	return _u
}

// ClearMinBackoff clears the value of the "minBackoff" field.
func (_u *SubscriptionUpdate) ClearMinBackoff() *SubscriptionUpdate {
	_u.mutation.ClearMinBackoff()
	return _u
}

// SetMaxBackoff sets the "maxBackoff" field.
func (_u *SubscriptionUpdate) SetMaxBackoff(v *sqltypes.Interval) *SubscriptionUpdate {
	_u.mutation.SetMaxBackoff(v)
	return _u
}

// ClearMaxBackoff clears the value of the "maxBackoff" field.
func (_u *SubscriptionUpdate) ClearMaxBackoff() *SubscriptionUpdate {
	_u.mutation.ClearMaxBackoff()
	return _u
}

// SetPushEndpoint sets the "pushEndpoint" field.
func (_u *SubscriptionUpdate) SetPushEndpoint(v string) *SubscriptionUpdate {
	_u.mutation.SetPushEndpoint(v)
	return _u
}

// SetNillablePushEndpoint sets the "pushEndpoint" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillablePushEndpoint(v *string) *SubscriptionUpdate {
	if v != nil {
		_u.SetPushEndpoint(*v)
	}
	return _u
}

// ClearPushEndpoint clears the value of the "pushEndpoint" field.
func (_u *SubscriptionUpdate) ClearPushEndpoint() *SubscriptionUpdate {
	_u.mutation.ClearPushEndpoint()
	return _u
}

// SetMessageFilter sets the "messageFilter" field.
func (_u *SubscriptionUpdate) SetMessageFilter(v string) *SubscriptionUpdate {
	_u.mutation.SetMessageFilter(v)
	return _u
}

// SetNillableMessageFilter sets the "messageFilter" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableMessageFilter(v *string) *SubscriptionUpdate {
	if v != nil {
		_u.SetMessageFilter(*v)
	}
	return _u
}

// ClearMessageFilter clears the value of the "messageFilter" field.
func (_u *SubscriptionUpdate) ClearMessageFilter() *SubscriptionUpdate {
	_u.mutation.ClearMessageFilter()
	return _u
}

// SetMaxDeliveryAttempts sets the "maxDeliveryAttempts" field.
func (_u *SubscriptionUpdate) SetMaxDeliveryAttempts(v int32) *SubscriptionUpdate {
	_u.mutation.ResetMaxDeliveryAttempts()
	_u.mutation.SetMaxDeliveryAttempts(v)
	return _u
}

// SetNillableMaxDeliveryAttempts sets the "maxDeliveryAttempts" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableMaxDeliveryAttempts(v *int32) *SubscriptionUpdate {
	if v != nil {
		_u.SetMaxDeliveryAttempts(*v)
	}
	return _u
}

// AddMaxDeliveryAttempts adds value to the "maxDeliveryAttempts" field.
func (_u *SubscriptionUpdate) AddMaxDeliveryAttempts(v int32) *SubscriptionUpdate {
	_u.mutation.AddMaxDeliveryAttempts(v)
	return _u
}

// ClearMaxDeliveryAttempts clears the value of the "maxDeliveryAttempts" field.
func (_u *SubscriptionUpdate) ClearMaxDeliveryAttempts() *SubscriptionUpdate {
	_u.mutation.ClearMaxDeliveryAttempts()
	return _u
}

// SetDeadLetterTopicID sets the "deadLetterTopicID" field.
func (_u *SubscriptionUpdate) SetDeadLetterTopicID(v uuid.UUID) *SubscriptionUpdate {
	_u.mutation.SetDeadLetterTopicID(v)
	return _u
}

// SetNillableDeadLetterTopicID sets the "deadLetterTopicID" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableDeadLetterTopicID(v *uuid.UUID) *SubscriptionUpdate {
	if v != nil {
		_u.SetDeadLetterTopicID(*v)
	}
	return _u
}

// ClearDeadLetterTopicID clears the value of the "deadLetterTopicID" field.
func (_u *SubscriptionUpdate) ClearDeadLetterTopicID() *SubscriptionUpdate {
	_u.mutation.ClearDeadLetterTopicID()
	return _u
}

// SetDeliveryDelay sets the "deliveryDelay" field.
func (_u *SubscriptionUpdate) SetDeliveryDelay(v sqltypes.Interval) *SubscriptionUpdate {
	_u.mutation.SetDeliveryDelay(v)
	return _u
}

// SetNillableDeliveryDelay sets the "deliveryDelay" field if the given value is not nil.
func (_u *SubscriptionUpdate) SetNillableDeliveryDelay(v *sqltypes.Interval) *SubscriptionUpdate {
	if v != nil {
		_u.SetDeliveryDelay(*v)
	}
	return _u
}

// SetTopic sets the "topic" edge to the Topic entity.
func (_u *SubscriptionUpdate) SetTopic(v *Topic) *SubscriptionUpdate {
	return _u.SetTopicID(v.ID)
}

// AddDeliveryIDs adds the "deliveries" edge to the Delivery entity by IDs.
func (_u *SubscriptionUpdate) AddDeliveryIDs(ids ...uuid.UUID) *SubscriptionUpdate {
	_u.mutation.AddDeliveryIDs(ids...)
	return _u
}

// AddDeliveries adds the "deliveries" edges to the Delivery entity.
func (_u *SubscriptionUpdate) AddDeliveries(v ...*Delivery) *SubscriptionUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDeliveryIDs(ids...)
}

// SetDeadLetterTopic sets the "deadLetterTopic" edge to the Topic entity.
func (_u *SubscriptionUpdate) SetDeadLetterTopic(v *Topic) *SubscriptionUpdate {
	return _u.SetDeadLetterTopicID(v.ID)
}

// Mutation returns the SubscriptionMutation object of the builder.
func (_u *SubscriptionUpdate) Mutation() *SubscriptionMutation {
	return _u.mutation
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (_u *SubscriptionUpdate) ClearTopic() *SubscriptionUpdate {
	_u.mutation.ClearTopic()
	return _u
}

// ClearDeliveries clears all "deliveries" edges to the Delivery entity.
func (_u *SubscriptionUpdate) ClearDeliveries() *SubscriptionUpdate {
	_u.mutation.ClearDeliveries()
	return _u
}

// RemoveDeliveryIDs removes the "deliveries" edge to Delivery entities by IDs.
func (_u *SubscriptionUpdate) RemoveDeliveryIDs(ids ...uuid.UUID) *SubscriptionUpdate {
	_u.mutation.RemoveDeliveryIDs(ids...)
	return _u
}

// RemoveDeliveries removes "deliveries" edges to Delivery entities.
func (_u *SubscriptionUpdate) RemoveDeliveries(v ...*Delivery) *SubscriptionUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDeliveryIDs(ids...)
}

// ClearDeadLetterTopic clears the "deadLetterTopic" edge to the Topic entity.
func (_u *SubscriptionUpdate) ClearDeadLetterTopic() *SubscriptionUpdate {
	_u.mutation.ClearDeadLetterTopic()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SubscriptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubscriptionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubscriptionUpdate) check() error {
	if _u.mutation.TopicCleared() && len(_u.mutation.TopicIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Subscription.topic"`)
	}
	return nil
}

func (_u *SubscriptionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(subscription.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Live(); ok {
		_spec.SetField(subscription.FieldLive, field.TypeBool, value)
	}
	if _u.mutation.LiveCleared() {
		_spec.ClearField(subscription.FieldLive, field.TypeBool)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(subscription.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(subscription.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.TTL(); ok {
		_spec.SetField(subscription.FieldTTL, field.TypeString, value)
	}
	if value, ok := _u.mutation.MessageTTL(); ok {
		_spec.SetField(subscription.FieldMessageTTL, field.TypeString, value)
	}
	if value, ok := _u.mutation.OrderedDelivery(); ok {
		_spec.SetField(subscription.FieldOrderedDelivery, field.TypeBool, value)
	}
	if _u.mutation.OrderedDeliveryCleared() {
		_spec.ClearField(subscription.FieldOrderedDelivery, field.TypeBool)
	}
	if value, ok := _u.mutation.Labels(); ok {
		_spec.SetField(subscription.FieldLabels, field.TypeJSON, value)
	}
	if _u.mutation.LabelsCleared() {
		_spec.ClearField(subscription.FieldLabels, field.TypeJSON)
	}
	if value, ok := _u.mutation.MinBackoff(); ok {
		_spec.SetField(subscription.FieldMinBackoff, field.TypeString, value)
	}
	if _u.mutation.MinBackoffCleared() {
		_spec.ClearField(subscription.FieldMinBackoff, field.TypeString)
	}
	if value, ok := _u.mutation.MaxBackoff(); ok {
		_spec.SetField(subscription.FieldMaxBackoff, field.TypeString, value)
	}
	if _u.mutation.MaxBackoffCleared() {
		_spec.ClearField(subscription.FieldMaxBackoff, field.TypeString)
	}
	if value, ok := _u.mutation.PushEndpoint(); ok {
		_spec.SetField(subscription.FieldPushEndpoint, field.TypeString, value)
	}
	if _u.mutation.PushEndpointCleared() {
		_spec.ClearField(subscription.FieldPushEndpoint, field.TypeString)
	}
	if value, ok := _u.mutation.MessageFilter(); ok {
		_spec.SetField(subscription.FieldMessageFilter, field.TypeString, value)
	}
	if _u.mutation.MessageFilterCleared() {
		_spec.ClearField(subscription.FieldMessageFilter, field.TypeString)
	}
	if value, ok := _u.mutation.MaxDeliveryAttempts(); ok {
		_spec.SetField(subscription.FieldMaxDeliveryAttempts, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedMaxDeliveryAttempts(); ok {
		_spec.AddField(subscription.FieldMaxDeliveryAttempts, field.TypeInt32, value)
	}
	if _u.mutation.MaxDeliveryAttemptsCleared() {
		_spec.ClearField(subscription.FieldMaxDeliveryAttempts, field.TypeInt32)
	}
	if value, ok := _u.mutation.DeliveryDelay(); ok {
		_spec.SetField(subscription.FieldDeliveryDelay, field.TypeOther, value)
	}
	if _u.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscription.TopicTable,
			Columns: []string{subscription.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscription.TopicTable,
			Columns: []string{subscription.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DeliveriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subscription.DeliveriesTable,
			Columns: []string{subscription.DeliveriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDeliveriesIDs(); len(nodes) > 0 && !_u.mutation.DeliveriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subscription.DeliveriesTable,
			Columns: []string{subscription.DeliveriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DeliveriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subscription.DeliveriesTable,
			Columns: []string{subscription.DeliveriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DeadLetterTopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscription.DeadLetterTopicTable,
			Columns: []string{subscription.DeadLetterTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DeadLetterTopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscription.DeadLetterTopicTable,
			Columns: []string{subscription.DeadLetterTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SubscriptionUpdateOne is the builder for updating a single Subscription entity.
type SubscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionMutation
}

// SetTopicID sets the "topicID" field.
func (_u *SubscriptionUpdateOne) SetTopicID(v uuid.UUID) *SubscriptionUpdateOne {
	_u.mutation.SetTopicID(v)
	return _u
}

// SetNillableTopicID sets the "topicID" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableTopicID(v *uuid.UUID) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetTopicID(*v)
	}
	return _u
}

// SetExpiresAt sets the "expiresAt" field.
func (_u *SubscriptionUpdateOne) SetExpiresAt(v time.Time) *SubscriptionUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expiresAt" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableExpiresAt(v *time.Time) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetLive sets the "live" field.
func (_u *SubscriptionUpdateOne) SetLive(v bool) *SubscriptionUpdateOne {
	_u.mutation.SetLive(v)
	return _u
}

// SetNillableLive sets the "live" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableLive(v *bool) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetLive(*v)
	}
	return _u
}

// ClearLive clears the value of the "live" field.
func (_u *SubscriptionUpdateOne) ClearLive() *SubscriptionUpdateOne {
	_u.mutation.ClearLive()
	return _u
}

// SetDeletedAt sets the "deletedAt" field.
func (_u *SubscriptionUpdateOne) SetDeletedAt(v time.Time) *SubscriptionUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableDeletedAt(v *time.Time) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (_u *SubscriptionUpdateOne) ClearDeletedAt() *SubscriptionUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetTTL sets the "ttl" field.
func (_u *SubscriptionUpdateOne) SetTTL(v sqltypes.Interval) *SubscriptionUpdateOne {
	_u.mutation.SetTTL(v)
	return _u
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableTTL(v *sqltypes.Interval) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetTTL(*v)
	}
	return _u
}

// SetMessageTTL sets the "messageTTL" field.
func (_u *SubscriptionUpdateOne) SetMessageTTL(v sqltypes.Interval) *SubscriptionUpdateOne {
	_u.mutation.SetMessageTTL(v)
	return _u
}

// SetNillableMessageTTL sets the "messageTTL" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableMessageTTL(v *sqltypes.Interval) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetMessageTTL(*v)
	}
	return _u
}

// SetOrderedDelivery sets the "orderedDelivery" field.
func (_u *SubscriptionUpdateOne) SetOrderedDelivery(v bool) *SubscriptionUpdateOne {
	_u.mutation.SetOrderedDelivery(v)
	return _u
}

// SetNillableOrderedDelivery sets the "orderedDelivery" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableOrderedDelivery(v *bool) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetOrderedDelivery(*v)
	}
	return _u
}

// ClearOrderedDelivery clears the value of the "orderedDelivery" field.
func (_u *SubscriptionUpdateOne) ClearOrderedDelivery() *SubscriptionUpdateOne {
	_u.mutation.ClearOrderedDelivery()
	return _u
}

// SetLabels sets the "labels" field.
func (_u *SubscriptionUpdateOne) SetLabels(v map[string]string) *SubscriptionUpdateOne {
	_u.mutation.SetLabels(v)
	return _u
}

// ClearLabels clears the value of the "labels" field.
func (_u *SubscriptionUpdateOne) ClearLabels() *SubscriptionUpdateOne {
	_u.mutation.ClearLabels()
	return _u
}

// SetMinBackoff sets the "minBackoff" field.
func (_u *SubscriptionUpdateOne) SetMinBackoff(v *sqltypes.Interval) *SubscriptionUpdateOne {
	_u.mutation.SetMinBackoff(v)
	return _u
}

// ClearMinBackoff clears the value of the "minBackoff" field.
func (_u *SubscriptionUpdateOne) ClearMinBackoff() *SubscriptionUpdateOne {
	_u.mutation.ClearMinBackoff()
	return _u
}

// SetMaxBackoff sets the "maxBackoff" field.
func (_u *SubscriptionUpdateOne) SetMaxBackoff(v *sqltypes.Interval) *SubscriptionUpdateOne {
	_u.mutation.SetMaxBackoff(v)
	return _u
}

// ClearMaxBackoff clears the value of the "maxBackoff" field.
func (_u *SubscriptionUpdateOne) ClearMaxBackoff() *SubscriptionUpdateOne {
	_u.mutation.ClearMaxBackoff()
	return _u
}

// SetPushEndpoint sets the "pushEndpoint" field.
func (_u *SubscriptionUpdateOne) SetPushEndpoint(v string) *SubscriptionUpdateOne {
	_u.mutation.SetPushEndpoint(v)
	return _u
}

// SetNillablePushEndpoint sets the "pushEndpoint" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillablePushEndpoint(v *string) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetPushEndpoint(*v)
	}
	return _u
}

// ClearPushEndpoint clears the value of the "pushEndpoint" field.
func (_u *SubscriptionUpdateOne) ClearPushEndpoint() *SubscriptionUpdateOne {
	_u.mutation.ClearPushEndpoint()
	return _u
}

// SetMessageFilter sets the "messageFilter" field.
func (_u *SubscriptionUpdateOne) SetMessageFilter(v string) *SubscriptionUpdateOne {
	_u.mutation.SetMessageFilter(v)
	return _u
}

// SetNillableMessageFilter sets the "messageFilter" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableMessageFilter(v *string) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetMessageFilter(*v)
	}
	return _u
}

// ClearMessageFilter clears the value of the "messageFilter" field.
func (_u *SubscriptionUpdateOne) ClearMessageFilter() *SubscriptionUpdateOne {
	_u.mutation.ClearMessageFilter()
	return _u
}

// SetMaxDeliveryAttempts sets the "maxDeliveryAttempts" field.
func (_u *SubscriptionUpdateOne) SetMaxDeliveryAttempts(v int32) *SubscriptionUpdateOne {
	_u.mutation.ResetMaxDeliveryAttempts()
	_u.mutation.SetMaxDeliveryAttempts(v)
	return _u
}

// SetNillableMaxDeliveryAttempts sets the "maxDeliveryAttempts" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableMaxDeliveryAttempts(v *int32) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetMaxDeliveryAttempts(*v)
	}
	return _u
}

// AddMaxDeliveryAttempts adds value to the "maxDeliveryAttempts" field.
func (_u *SubscriptionUpdateOne) AddMaxDeliveryAttempts(v int32) *SubscriptionUpdateOne {
	_u.mutation.AddMaxDeliveryAttempts(v)
	return _u
}

// ClearMaxDeliveryAttempts clears the value of the "maxDeliveryAttempts" field.
func (_u *SubscriptionUpdateOne) ClearMaxDeliveryAttempts() *SubscriptionUpdateOne {
	_u.mutation.ClearMaxDeliveryAttempts()
	return _u
}

// SetDeadLetterTopicID sets the "deadLetterTopicID" field.
func (_u *SubscriptionUpdateOne) SetDeadLetterTopicID(v uuid.UUID) *SubscriptionUpdateOne {
	_u.mutation.SetDeadLetterTopicID(v)
	return _u
}

// SetNillableDeadLetterTopicID sets the "deadLetterTopicID" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableDeadLetterTopicID(v *uuid.UUID) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetDeadLetterTopicID(*v)
	}
	return _u
}

// ClearDeadLetterTopicID clears the value of the "deadLetterTopicID" field.
func (_u *SubscriptionUpdateOne) ClearDeadLetterTopicID() *SubscriptionUpdateOne {
	_u.mutation.ClearDeadLetterTopicID()
	return _u
}

// SetDeliveryDelay sets the "deliveryDelay" field.
func (_u *SubscriptionUpdateOne) SetDeliveryDelay(v sqltypes.Interval) *SubscriptionUpdateOne {
	_u.mutation.SetDeliveryDelay(v)
	return _u
}

// SetNillableDeliveryDelay sets the "deliveryDelay" field if the given value is not nil.
func (_u *SubscriptionUpdateOne) SetNillableDeliveryDelay(v *sqltypes.Interval) *SubscriptionUpdateOne {
	if v != nil {
		_u.SetDeliveryDelay(*v)
	}
	return _u
}

// SetTopic sets the "topic" edge to the Topic entity.
func (_u *SubscriptionUpdateOne) SetTopic(v *Topic) *SubscriptionUpdateOne {
	return _u.SetTopicID(v.ID)
}

// AddDeliveryIDs adds the "deliveries" edge to the Delivery entity by IDs.
func (_u *SubscriptionUpdateOne) AddDeliveryIDs(ids ...uuid.UUID) *SubscriptionUpdateOne {
	_u.mutation.AddDeliveryIDs(ids...)
	return _u
}

// AddDeliveries adds the "deliveries" edges to the Delivery entity.
func (_u *SubscriptionUpdateOne) AddDeliveries(v ...*Delivery) *SubscriptionUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddDeliveryIDs(ids...)
}

// SetDeadLetterTopic sets the "deadLetterTopic" edge to the Topic entity.
func (_u *SubscriptionUpdateOne) SetDeadLetterTopic(v *Topic) *SubscriptionUpdateOne {
	return _u.SetDeadLetterTopicID(v.ID)
}

// Mutation returns the SubscriptionMutation object of the builder.
func (_u *SubscriptionUpdateOne) Mutation() *SubscriptionMutation {
	return _u.mutation
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (_u *SubscriptionUpdateOne) ClearTopic() *SubscriptionUpdateOne {
	_u.mutation.ClearTopic()
	return _u
}

// ClearDeliveries clears all "deliveries" edges to the Delivery entity.
func (_u *SubscriptionUpdateOne) ClearDeliveries() *SubscriptionUpdateOne {
	_u.mutation.ClearDeliveries()
	return _u
}

// RemoveDeliveryIDs removes the "deliveries" edge to Delivery entities by IDs.
func (_u *SubscriptionUpdateOne) RemoveDeliveryIDs(ids ...uuid.UUID) *SubscriptionUpdateOne {
	_u.mutation.RemoveDeliveryIDs(ids...)
	return _u
}

// RemoveDeliveries removes "deliveries" edges to Delivery entities.
func (_u *SubscriptionUpdateOne) RemoveDeliveries(v ...*Delivery) *SubscriptionUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveDeliveryIDs(ids...)
}

// ClearDeadLetterTopic clears the "deadLetterTopic" edge to the Topic entity.
func (_u *SubscriptionUpdateOne) ClearDeadLetterTopic() *SubscriptionUpdateOne {
	_u.mutation.ClearDeadLetterTopic()
	return _u
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (_u *SubscriptionUpdateOne) Where(ps ...predicate.Subscription) *SubscriptionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SubscriptionUpdateOne) Select(field string, fields ...string) *SubscriptionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Subscription entity.
func (_u *SubscriptionUpdateOne) Save(ctx context.Context) (*Subscription, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SubscriptionUpdateOne) SaveX(ctx context.Context) *Subscription {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SubscriptionUpdateOne) check() error {
	if _u.mutation.TopicCleared() && len(_u.mutation.TopicIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Subscription.topic"`)
	}
	return nil
}

func (_u *SubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *Subscription, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscription.FieldID)
		for _, f := range fields {
			if !subscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(subscription.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Live(); ok {
		_spec.SetField(subscription.FieldLive, field.TypeBool, value)
	}
	if _u.mutation.LiveCleared() {
		_spec.ClearField(subscription.FieldLive, field.TypeBool)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(subscription.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(subscription.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.TTL(); ok {
		_spec.SetField(subscription.FieldTTL, field.TypeString, value)
	}
	if value, ok := _u.mutation.MessageTTL(); ok {
		_spec.SetField(subscription.FieldMessageTTL, field.TypeString, value)
	}
	if value, ok := _u.mutation.OrderedDelivery(); ok {
		_spec.SetField(subscription.FieldOrderedDelivery, field.TypeBool, value)
	}
	if _u.mutation.OrderedDeliveryCleared() {
		_spec.ClearField(subscription.FieldOrderedDelivery, field.TypeBool)
	}
	if value, ok := _u.mutation.Labels(); ok {
		_spec.SetField(subscription.FieldLabels, field.TypeJSON, value)
	}
	if _u.mutation.LabelsCleared() {
		_spec.ClearField(subscription.FieldLabels, field.TypeJSON)
	}
	if value, ok := _u.mutation.MinBackoff(); ok {
		_spec.SetField(subscription.FieldMinBackoff, field.TypeString, value)
	}
	if _u.mutation.MinBackoffCleared() {
		_spec.ClearField(subscription.FieldMinBackoff, field.TypeString)
	}
	if value, ok := _u.mutation.MaxBackoff(); ok {
		_spec.SetField(subscription.FieldMaxBackoff, field.TypeString, value)
	}
	if _u.mutation.MaxBackoffCleared() {
		_spec.ClearField(subscription.FieldMaxBackoff, field.TypeString)
	}
	if value, ok := _u.mutation.PushEndpoint(); ok {
		_spec.SetField(subscription.FieldPushEndpoint, field.TypeString, value)
	}
	if _u.mutation.PushEndpointCleared() {
		_spec.ClearField(subscription.FieldPushEndpoint, field.TypeString)
	}
	if value, ok := _u.mutation.MessageFilter(); ok {
		_spec.SetField(subscription.FieldMessageFilter, field.TypeString, value)
	}
	if _u.mutation.MessageFilterCleared() {
		_spec.ClearField(subscription.FieldMessageFilter, field.TypeString)
	}
	if value, ok := _u.mutation.MaxDeliveryAttempts(); ok {
		_spec.SetField(subscription.FieldMaxDeliveryAttempts, field.TypeInt32, value)
	}
	if value, ok := _u.mutation.AddedMaxDeliveryAttempts(); ok {
		_spec.AddField(subscription.FieldMaxDeliveryAttempts, field.TypeInt32, value)
	}
	if _u.mutation.MaxDeliveryAttemptsCleared() {
		_spec.ClearField(subscription.FieldMaxDeliveryAttempts, field.TypeInt32)
	}
	if value, ok := _u.mutation.DeliveryDelay(); ok {
		_spec.SetField(subscription.FieldDeliveryDelay, field.TypeOther, value)
	}
	if _u.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscription.TopicTable,
			Columns: []string{subscription.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscription.TopicTable,
			Columns: []string{subscription.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DeliveriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subscription.DeliveriesTable,
			Columns: []string{subscription.DeliveriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedDeliveriesIDs(); len(nodes) > 0 && !_u.mutation.DeliveriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subscription.DeliveriesTable,
			Columns: []string{subscription.DeliveriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DeliveriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subscription.DeliveriesTable,
			Columns: []string{subscription.DeliveriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DeadLetterTopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscription.DeadLetterTopicTable,
			Columns: []string{subscription.DeadLetterTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DeadLetterTopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscription.DeadLetterTopicTable,
			Columns: []string{subscription.DeadLetterTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subscription{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
