// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"go.6river.tech/mmmbbb/ent/message"
	"go.6river.tech/mmmbbb/ent/topic"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TopicID holds the value of the "topicID" field.
	TopicID uuid.UUID `json:"topicID,omitempty"`
	// Payload holds the value of the "payload" field.
	Payload json.RawMessage `json:"payload,omitempty"`
	// Attributes holds the value of the "attributes" field.
	Attributes map[string]string `json:"attributes,omitempty"`
	// PublishedAt holds the value of the "publishedAt" field.
	PublishedAt time.Time `json:"publishedAt,omitempty"`
	// OrderKey holds the value of the "orderKey" field.
	OrderKey *string `json:"orderKey,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageQuery when eager-loading is set.
	Edges        MessageEdges `json:"-"`
	selectValues sql.SelectValues
}

// MessageEdges holds the relations/edges for other nodes in the graph.
type MessageEdges struct {
	// Deliveries holds the value of the deliveries edge.
	Deliveries []*Delivery `json:"deliveries,omitempty"`
	// Topic holds the value of the topic edge.
	Topic *Topic `json:"topic,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// DeliveriesOrErr returns the Deliveries value or an error if the edge
// was not loaded in eager-loading.
func (e MessageEdges) DeliveriesOrErr() ([]*Delivery, error) {
	if e.loadedTypes[0] {
		return e.Deliveries, nil
	}
	return nil, &NotLoadedError{edge: "deliveries"}
}

// TopicOrErr returns the Topic value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) TopicOrErr() (*Topic, error) {
	if e.Topic != nil {
		return e.Topic, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: topic.Label}
	}
	return nil, &NotLoadedError{edge: "topic"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldPayload, message.FieldAttributes:
			values[i] = new([]byte)
		case message.FieldOrderKey:
			values[i] = new(sql.NullString)
		case message.FieldPublishedAt:
			values[i] = new(sql.NullTime)
		case message.FieldID, message.FieldTopicID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (m *Message) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				m.ID = *value
			}
		case message.FieldTopicID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field topicID", values[i])
			} else if value != nil {
				m.TopicID = *value
			}
		case message.FieldPayload:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field payload", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Payload); err != nil {
					return fmt.Errorf("unmarshal field payload: %w", err)
				}
			}
		case message.FieldAttributes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field attributes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &m.Attributes); err != nil {
					return fmt.Errorf("unmarshal field attributes: %w", err)
				}
			}
		case message.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field publishedAt", values[i])
			} else if value.Valid {
				m.PublishedAt = value.Time
			}
		case message.FieldOrderKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field orderKey", values[i])
			} else if value.Valid {
				m.OrderKey = new(string)
				*m.OrderKey = value.String
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Message.
// This includes values selected through modifiers, order, etc.
func (m *Message) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryDeliveries queries the "deliveries" edge of the Message entity.
func (m *Message) QueryDeliveries() *DeliveryQuery {
	return NewMessageClient(m.config).QueryDeliveries(m)
}

// QueryTopic queries the "topic" edge of the Message entity.
func (m *Message) QueryTopic() *TopicQuery {
	return NewMessageClient(m.config).QueryTopic(m)
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Message) Update() *MessageUpdateOne {
	return NewMessageClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Message) Unwrap() *Message {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Message is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("topicID=")
	builder.WriteString(fmt.Sprintf("%v", m.TopicID))
	builder.WriteString(", ")
	builder.WriteString("payload=")
	builder.WriteString(fmt.Sprintf("%v", m.Payload))
	builder.WriteString(", ")
	builder.WriteString("attributes=")
	builder.WriteString(fmt.Sprintf("%v", m.Attributes))
	builder.WriteString(", ")
	builder.WriteString("publishedAt=")
	builder.WriteString(m.PublishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := m.OrderKey; v != nil {
		builder.WriteString("orderKey=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Messages is a parsable slice of Message.
type Messages []*Message
