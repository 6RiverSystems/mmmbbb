// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"go.6river.tech/mmmbbb/ent/predicate"
	"go.6river.tech/mmmbbb/ent/snapshot"
	"go.6river.tech/mmmbbb/ent/topic"
)

// SnapshotUpdate is the builder for updating Snapshot entities.
type SnapshotUpdate struct {
	config
	hooks    []Hook
	mutation *SnapshotMutation
}

// Where appends a list predicates to the SnapshotUpdate builder.
func (_u *SnapshotUpdate) Where(ps ...predicate.Snapshot) *SnapshotUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTopicID sets the "topicID" field.
func (_u *SnapshotUpdate) SetTopicID(v uuid.UUID) *SnapshotUpdate {
	_u.mutation.SetTopicID(v)
	return _u
}

// SetNillableTopicID sets the "topicID" field if the given value is not nil.
func (_u *SnapshotUpdate) SetNillableTopicID(v *uuid.UUID) *SnapshotUpdate {
	if v != nil {
		_u.SetTopicID(*v)
	}
	return _u
}

// SetExpiresAt sets the "expiresAt" field.
func (_u *SnapshotUpdate) SetExpiresAt(v time.Time) *SnapshotUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expiresAt" field if the given value is not nil.
func (_u *SnapshotUpdate) SetNillableExpiresAt(v *time.Time) *SnapshotUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetLabels sets the "labels" field.
func (_u *SnapshotUpdate) SetLabels(v map[string]string) *SnapshotUpdate {
	_u.mutation.SetLabels(v)
	return _u
}

// ClearLabels clears the value of the "labels" field.
func (_u *SnapshotUpdate) ClearLabels() *SnapshotUpdate {
	_u.mutation.ClearLabels()
	return _u
}

// SetAckedMessagesBefore sets the "ackedMessagesBefore" field.
func (_u *SnapshotUpdate) SetAckedMessagesBefore(v time.Time) *SnapshotUpdate {
	_u.mutation.SetAckedMessagesBefore(v)
	return _u
}

// SetNillableAckedMessagesBefore sets the "ackedMessagesBefore" field if the given value is not nil.
func (_u *SnapshotUpdate) SetNillableAckedMessagesBefore(v *time.Time) *SnapshotUpdate {
	if v != nil {
		_u.SetAckedMessagesBefore(*v)
	}
	return _u
}

// SetAckedMessageIDs sets the "ackedMessageIDs" field.
func (_u *SnapshotUpdate) SetAckedMessageIDs(v []uuid.UUID) *SnapshotUpdate {
	_u.mutation.SetAckedMessageIDs(v)
	return _u
}

// AppendAckedMessageIDs appends value to the "ackedMessageIDs" field.
func (_u *SnapshotUpdate) AppendAckedMessageIDs(v []uuid.UUID) *SnapshotUpdate {
	_u.mutation.AppendAckedMessageIDs(v)
	return _u
}

// ClearAckedMessageIDs clears the value of the "ackedMessageIDs" field.
func (_u *SnapshotUpdate) ClearAckedMessageIDs() *SnapshotUpdate {
	_u.mutation.ClearAckedMessageIDs()
	return _u
}

// SetTopic sets the "topic" edge to the Topic entity.
func (_u *SnapshotUpdate) SetTopic(v *Topic) *SnapshotUpdate {
	return _u.SetTopicID(v.ID)
}

// Mutation returns the SnapshotMutation object of the builder.
func (_u *SnapshotUpdate) Mutation() *SnapshotMutation {
	return _u.mutation
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (_u *SnapshotUpdate) ClearTopic() *SnapshotUpdate {
	_u.mutation.ClearTopic()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SnapshotUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SnapshotUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SnapshotUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SnapshotUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SnapshotUpdate) check() error {
	if _u.mutation.TopicCleared() && len(_u.mutation.TopicIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Snapshot.topic"`)
	}
	return nil
}

func (_u *SnapshotUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(snapshot.Table, snapshot.Columns, sqlgraph.NewFieldSpec(snapshot.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(snapshot.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Labels(); ok {
		_spec.SetField(snapshot.FieldLabels, field.TypeJSON, value)
	}
	if _u.mutation.LabelsCleared() {
		_spec.ClearField(snapshot.FieldLabels, field.TypeJSON)
	}
	if value, ok := _u.mutation.AckedMessagesBefore(); ok {
		_spec.SetField(snapshot.FieldAckedMessagesBefore, field.TypeTime, value)
	}
	if value, ok := _u.mutation.AckedMessageIDs(); ok {
		_spec.SetField(snapshot.FieldAckedMessageIDs, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAckedMessageIDs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, snapshot.FieldAckedMessageIDs, value)
		})
	}
	if _u.mutation.AckedMessageIDsCleared() {
		_spec.ClearField(snapshot.FieldAckedMessageIDs, field.TypeJSON)
	}
	if _u.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   snapshot.TopicTable,
			Columns: []string{snapshot.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   snapshot.TopicTable,
			Columns: []string{snapshot.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{snapshot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SnapshotUpdateOne is the builder for updating a single Snapshot entity.
type SnapshotUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SnapshotMutation
}

// SetTopicID sets the "topicID" field.
func (_u *SnapshotUpdateOne) SetTopicID(v uuid.UUID) *SnapshotUpdateOne {
	_u.mutation.SetTopicID(v)
	return _u
}

// SetNillableTopicID sets the "topicID" field if the given value is not nil.
func (_u *SnapshotUpdateOne) SetNillableTopicID(v *uuid.UUID) *SnapshotUpdateOne {
	if v != nil {
		_u.SetTopicID(*v)
	}
	return _u
}

// SetExpiresAt sets the "expiresAt" field.
func (_u *SnapshotUpdateOne) SetExpiresAt(v time.Time) *SnapshotUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expiresAt" field if the given value is not nil.
func (_u *SnapshotUpdateOne) SetNillableExpiresAt(v *time.Time) *SnapshotUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetLabels sets the "labels" field.
func (_u *SnapshotUpdateOne) SetLabels(v map[string]string) *SnapshotUpdateOne {
	_u.mutation.SetLabels(v)
	return _u
}

// ClearLabels clears the value of the "labels" field.
func (_u *SnapshotUpdateOne) ClearLabels() *SnapshotUpdateOne {
	_u.mutation.ClearLabels()
	return _u
}

// SetAckedMessagesBefore sets the "ackedMessagesBefore" field.
func (_u *SnapshotUpdateOne) SetAckedMessagesBefore(v time.Time) *SnapshotUpdateOne {
	_u.mutation.SetAckedMessagesBefore(v)
	return _u
}

// SetNillableAckedMessagesBefore sets the "ackedMessagesBefore" field if the given value is not nil.
func (_u *SnapshotUpdateOne) SetNillableAckedMessagesBefore(v *time.Time) *SnapshotUpdateOne {
	if v != nil {
		_u.SetAckedMessagesBefore(*v)
	}
	return _u
}

// SetAckedMessageIDs sets the "ackedMessageIDs" field.
func (_u *SnapshotUpdateOne) SetAckedMessageIDs(v []uuid.UUID) *SnapshotUpdateOne {
	_u.mutation.SetAckedMessageIDs(v)
	return _u
}

// AppendAckedMessageIDs appends value to the "ackedMessageIDs" field.
func (_u *SnapshotUpdateOne) AppendAckedMessageIDs(v []uuid.UUID) *SnapshotUpdateOne {
	_u.mutation.AppendAckedMessageIDs(v)
	return _u
}

// ClearAckedMessageIDs clears the value of the "ackedMessageIDs" field.
func (_u *SnapshotUpdateOne) ClearAckedMessageIDs() *SnapshotUpdateOne {
	_u.mutation.ClearAckedMessageIDs()
	return _u
}

// SetTopic sets the "topic" edge to the Topic entity.
func (_u *SnapshotUpdateOne) SetTopic(v *Topic) *SnapshotUpdateOne {
	return _u.SetTopicID(v.ID)
}

// Mutation returns the SnapshotMutation object of the builder.
func (_u *SnapshotUpdateOne) Mutation() *SnapshotMutation {
	return _u.mutation
}

// ClearTopic clears the "topic" edge to the Topic entity.
func (_u *SnapshotUpdateOne) ClearTopic() *SnapshotUpdateOne {
	_u.mutation.ClearTopic()
	return _u
}

// Where appends a list predicates to the SnapshotUpdate builder.
func (_u *SnapshotUpdateOne) Where(ps ...predicate.Snapshot) *SnapshotUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SnapshotUpdateOne) Select(field string, fields ...string) *SnapshotUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Snapshot entity.
func (_u *SnapshotUpdateOne) Save(ctx context.Context) (*Snapshot, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SnapshotUpdateOne) SaveX(ctx context.Context) *Snapshot {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SnapshotUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SnapshotUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *SnapshotUpdateOne) check() error {
	if _u.mutation.TopicCleared() && len(_u.mutation.TopicIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Snapshot.topic"`)
	}
	return nil
}

func (_u *SnapshotUpdateOne) sqlSave(ctx context.Context) (_node *Snapshot, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(snapshot.Table, snapshot.Columns, sqlgraph.NewFieldSpec(snapshot.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Snapshot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, snapshot.FieldID)
		for _, f := range fields {
			if !snapshot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != snapshot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(snapshot.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Labels(); ok {
		_spec.SetField(snapshot.FieldLabels, field.TypeJSON, value)
	}
	if _u.mutation.LabelsCleared() {
		_spec.ClearField(snapshot.FieldLabels, field.TypeJSON)
	}
	if value, ok := _u.mutation.AckedMessagesBefore(); ok {
		_spec.SetField(snapshot.FieldAckedMessagesBefore, field.TypeTime, value)
	}
	if value, ok := _u.mutation.AckedMessageIDs(); ok {
		_spec.SetField(snapshot.FieldAckedMessageIDs, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedAckedMessageIDs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, snapshot.FieldAckedMessageIDs, value)
		})
	}
	if _u.mutation.AckedMessageIDsCleared() {
		_spec.ClearField(snapshot.FieldAckedMessageIDs, field.TypeJSON)
	}
	if _u.mutation.TopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   snapshot.TopicTable,
			Columns: []string{snapshot.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   snapshot.TopicTable,
			Columns: []string{snapshot.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Snapshot{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{snapshot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
