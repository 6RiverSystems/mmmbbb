// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"go.6river.tech/mmmbbb/ent/delivery"
	"go.6river.tech/mmmbbb/ent/message"
	"go.6river.tech/mmmbbb/ent/predicate"
	"go.6river.tech/mmmbbb/ent/subscription"
)

// DeliveryUpdate is the builder for updating Delivery entities.
type DeliveryUpdate struct {
	config
	hooks    []Hook
	mutation *DeliveryMutation
}

// Where appends a list predicates to the DeliveryUpdate builder.
func (du *DeliveryUpdate) Where(ps ...predicate.Delivery) *DeliveryUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetMessageID sets the "messageID" field.
func (du *DeliveryUpdate) SetMessageID(u uuid.UUID) *DeliveryUpdate {
	du.mutation.SetMessageID(u)
	return du
}

// SetNillableMessageID sets the "messageID" field if the given value is not nil.
func (du *DeliveryUpdate) SetNillableMessageID(u *uuid.UUID) *DeliveryUpdate {
	if u != nil {
		du.SetMessageID(*u)
	}
	return du
}

// SetSubscriptionID sets the "subscriptionID" field.
func (du *DeliveryUpdate) SetSubscriptionID(u uuid.UUID) *DeliveryUpdate {
	du.mutation.SetSubscriptionID(u)
	return du
}

// SetNillableSubscriptionID sets the "subscriptionID" field if the given value is not nil.
func (du *DeliveryUpdate) SetNillableSubscriptionID(u *uuid.UUID) *DeliveryUpdate {
	if u != nil {
		du.SetSubscriptionID(*u)
	}
	return du
}

// SetPublishedAt sets the "publishedAt" field.
func (du *DeliveryUpdate) SetPublishedAt(t time.Time) *DeliveryUpdate {
	du.mutation.SetPublishedAt(t)
	return du
}

// SetNillablePublishedAt sets the "publishedAt" field if the given value is not nil.
func (du *DeliveryUpdate) SetNillablePublishedAt(t *time.Time) *DeliveryUpdate {
	if t != nil {
		du.SetPublishedAt(*t)
	}
	return du
}

// SetAttemptAt sets the "attemptAt" field.
func (du *DeliveryUpdate) SetAttemptAt(t time.Time) *DeliveryUpdate {
	du.mutation.SetAttemptAt(t)
	return du
}

// SetNillableAttemptAt sets the "attemptAt" field if the given value is not nil.
func (du *DeliveryUpdate) SetNillableAttemptAt(t *time.Time) *DeliveryUpdate {
	if t != nil {
		du.SetAttemptAt(*t)
	}
	return du
}

// SetLastAttemptedAt sets the "lastAttemptedAt" field.
func (du *DeliveryUpdate) SetLastAttemptedAt(t time.Time) *DeliveryUpdate {
	du.mutation.SetLastAttemptedAt(t)
	return du
}

// SetNillableLastAttemptedAt sets the "lastAttemptedAt" field if the given value is not nil.
func (du *DeliveryUpdate) SetNillableLastAttemptedAt(t *time.Time) *DeliveryUpdate {
	if t != nil {
		du.SetLastAttemptedAt(*t)
	}
	return du
}

// ClearLastAttemptedAt clears the value of the "lastAttemptedAt" field.
func (du *DeliveryUpdate) ClearLastAttemptedAt() *DeliveryUpdate {
	du.mutation.ClearLastAttemptedAt()
	return du
}

// SetAttempts sets the "attempts" field.
func (du *DeliveryUpdate) SetAttempts(i int) *DeliveryUpdate {
	du.mutation.ResetAttempts()
	du.mutation.SetAttempts(i)
	return du
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (du *DeliveryUpdate) SetNillableAttempts(i *int) *DeliveryUpdate {
	if i != nil {
		du.SetAttempts(*i)
	}
	return du
}

// AddAttempts adds i to the "attempts" field.
func (du *DeliveryUpdate) AddAttempts(i int) *DeliveryUpdate {
	du.mutation.AddAttempts(i)
	return du
}

// SetCompletedAt sets the "completedAt" field.
func (du *DeliveryUpdate) SetCompletedAt(t time.Time) *DeliveryUpdate {
	du.mutation.SetCompletedAt(t)
	return du
}

// SetNillableCompletedAt sets the "completedAt" field if the given value is not nil.
func (du *DeliveryUpdate) SetNillableCompletedAt(t *time.Time) *DeliveryUpdate {
	if t != nil {
		du.SetCompletedAt(*t)
	}
	return du
}

// ClearCompletedAt clears the value of the "completedAt" field.
func (du *DeliveryUpdate) ClearCompletedAt() *DeliveryUpdate {
	du.mutation.ClearCompletedAt()
	return du
}

// SetExpiresAt sets the "expiresAt" field.
func (du *DeliveryUpdate) SetExpiresAt(t time.Time) *DeliveryUpdate {
	du.mutation.SetExpiresAt(t)
	return du
}

// SetNillableExpiresAt sets the "expiresAt" field if the given value is not nil.
func (du *DeliveryUpdate) SetNillableExpiresAt(t *time.Time) *DeliveryUpdate {
	if t != nil {
		du.SetExpiresAt(*t)
	}
	return du
}

// SetNotBeforeID sets the "notBeforeID" field.
func (du *DeliveryUpdate) SetNotBeforeID(u uuid.UUID) *DeliveryUpdate {
	du.mutation.SetNotBeforeID(u)
	return du
}

// SetNillableNotBeforeID sets the "notBeforeID" field if the given value is not nil.
func (du *DeliveryUpdate) SetNillableNotBeforeID(u *uuid.UUID) *DeliveryUpdate {
	if u != nil {
		du.SetNotBeforeID(*u)
	}
	return du
}

// ClearNotBeforeID clears the value of the "notBeforeID" field.
func (du *DeliveryUpdate) ClearNotBeforeID() *DeliveryUpdate {
	du.mutation.ClearNotBeforeID()
	return du
}

// SetMessage sets the "message" edge to the Message entity.
func (du *DeliveryUpdate) SetMessage(m *Message) *DeliveryUpdate {
	return du.SetMessageID(m.ID)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (du *DeliveryUpdate) SetSubscription(s *Subscription) *DeliveryUpdate {
	return du.SetSubscriptionID(s.ID)
}

// SetNotBefore sets the "notBefore" edge to the Delivery entity.
func (du *DeliveryUpdate) SetNotBefore(d *Delivery) *DeliveryUpdate {
	return du.SetNotBeforeID(d.ID)
}

// AddNextReadyIDs adds the "nextReady" edge to the Delivery entity by IDs.
func (du *DeliveryUpdate) AddNextReadyIDs(ids ...uuid.UUID) *DeliveryUpdate {
	du.mutation.AddNextReadyIDs(ids...)
	return du
}

// AddNextReady adds the "nextReady" edges to the Delivery entity.
func (du *DeliveryUpdate) AddNextReady(d ...*Delivery) *DeliveryUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.AddNextReadyIDs(ids...)
}

// Mutation returns the DeliveryMutation object of the builder.
func (du *DeliveryUpdate) Mutation() *DeliveryMutation {
	return du.mutation
}

// ClearMessage clears the "message" edge to the Message entity.
func (du *DeliveryUpdate) ClearMessage() *DeliveryUpdate {
	du.mutation.ClearMessage()
	return du
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (du *DeliveryUpdate) ClearSubscription() *DeliveryUpdate {
	du.mutation.ClearSubscription()
	return du
}

// ClearNotBefore clears the "notBefore" edge to the Delivery entity.
func (du *DeliveryUpdate) ClearNotBefore() *DeliveryUpdate {
	du.mutation.ClearNotBefore()
	return du
}

// ClearNextReady clears all "nextReady" edges to the Delivery entity.
func (du *DeliveryUpdate) ClearNextReady() *DeliveryUpdate {
	du.mutation.ClearNextReady()
	return du
}

// RemoveNextReadyIDs removes the "nextReady" edge to Delivery entities by IDs.
func (du *DeliveryUpdate) RemoveNextReadyIDs(ids ...uuid.UUID) *DeliveryUpdate {
	du.mutation.RemoveNextReadyIDs(ids...)
	return du
}

// RemoveNextReady removes "nextReady" edges to Delivery entities.
func (du *DeliveryUpdate) RemoveNextReady(d ...*Delivery) *DeliveryUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return du.RemoveNextReadyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DeliveryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DeliveryUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DeliveryUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DeliveryUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DeliveryUpdate) check() error {
	if du.mutation.MessageCleared() && len(du.mutation.MessageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Delivery.message"`)
	}
	if du.mutation.SubscriptionCleared() && len(du.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Delivery.subscription"`)
	}
	return nil
}

func (du *DeliveryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(delivery.Table, delivery.Columns, sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.PublishedAt(); ok {
		_spec.SetField(delivery.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.AttemptAt(); ok {
		_spec.SetField(delivery.FieldAttemptAt, field.TypeTime, value)
	}
	if value, ok := du.mutation.LastAttemptedAt(); ok {
		_spec.SetField(delivery.FieldLastAttemptedAt, field.TypeTime, value)
	}
	if du.mutation.LastAttemptedAtCleared() {
		_spec.ClearField(delivery.FieldLastAttemptedAt, field.TypeTime)
	}
	if value, ok := du.mutation.Attempts(); ok {
		_spec.SetField(delivery.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := du.mutation.AddedAttempts(); ok {
		_spec.AddField(delivery.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := du.mutation.CompletedAt(); ok {
		_spec.SetField(delivery.FieldCompletedAt, field.TypeTime, value)
	}
	if du.mutation.CompletedAtCleared() {
		_spec.ClearField(delivery.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := du.mutation.ExpiresAt(); ok {
		_spec.SetField(delivery.FieldExpiresAt, field.TypeTime, value)
	}
	if du.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delivery.MessageTable,
			Columns: []string{delivery.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delivery.MessageTable,
			Columns: []string{delivery.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delivery.SubscriptionTable,
			Columns: []string{delivery.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delivery.SubscriptionTable,
			Columns: []string{delivery.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.NotBeforeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delivery.NotBeforeTable,
			Columns: []string{delivery.NotBeforeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.NotBeforeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delivery.NotBeforeTable,
			Columns: []string{delivery.NotBeforeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.NextReadyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   delivery.NextReadyTable,
			Columns: []string{delivery.NextReadyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedNextReadyIDs(); len(nodes) > 0 && !du.mutation.NextReadyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   delivery.NextReadyTable,
			Columns: []string{delivery.NextReadyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.NextReadyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   delivery.NextReadyTable,
			Columns: []string{delivery.NextReadyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delivery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DeliveryUpdateOne is the builder for updating a single Delivery entity.
type DeliveryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeliveryMutation
}

// SetMessageID sets the "messageID" field.
func (duo *DeliveryUpdateOne) SetMessageID(u uuid.UUID) *DeliveryUpdateOne {
	duo.mutation.SetMessageID(u)
	return duo
}

// SetNillableMessageID sets the "messageID" field if the given value is not nil.
func (duo *DeliveryUpdateOne) SetNillableMessageID(u *uuid.UUID) *DeliveryUpdateOne {
	if u != nil {
		duo.SetMessageID(*u)
	}
	return duo
}

// SetSubscriptionID sets the "subscriptionID" field.
func (duo *DeliveryUpdateOne) SetSubscriptionID(u uuid.UUID) *DeliveryUpdateOne {
	duo.mutation.SetSubscriptionID(u)
	return duo
}

// SetNillableSubscriptionID sets the "subscriptionID" field if the given value is not nil.
func (duo *DeliveryUpdateOne) SetNillableSubscriptionID(u *uuid.UUID) *DeliveryUpdateOne {
	if u != nil {
		duo.SetSubscriptionID(*u)
	}
	return duo
}

// SetPublishedAt sets the "publishedAt" field.
func (duo *DeliveryUpdateOne) SetPublishedAt(t time.Time) *DeliveryUpdateOne {
	duo.mutation.SetPublishedAt(t)
	return duo
}

// SetNillablePublishedAt sets the "publishedAt" field if the given value is not nil.
func (duo *DeliveryUpdateOne) SetNillablePublishedAt(t *time.Time) *DeliveryUpdateOne {
	if t != nil {
		duo.SetPublishedAt(*t)
	}
	return duo
}

// SetAttemptAt sets the "attemptAt" field.
func (duo *DeliveryUpdateOne) SetAttemptAt(t time.Time) *DeliveryUpdateOne {
	duo.mutation.SetAttemptAt(t)
	return duo
}

// SetNillableAttemptAt sets the "attemptAt" field if the given value is not nil.
func (duo *DeliveryUpdateOne) SetNillableAttemptAt(t *time.Time) *DeliveryUpdateOne {
	if t != nil {
		duo.SetAttemptAt(*t)
	}
	return duo
}

// SetLastAttemptedAt sets the "lastAttemptedAt" field.
func (duo *DeliveryUpdateOne) SetLastAttemptedAt(t time.Time) *DeliveryUpdateOne {
	duo.mutation.SetLastAttemptedAt(t)
	return duo
}

// SetNillableLastAttemptedAt sets the "lastAttemptedAt" field if the given value is not nil.
func (duo *DeliveryUpdateOne) SetNillableLastAttemptedAt(t *time.Time) *DeliveryUpdateOne {
	if t != nil {
		duo.SetLastAttemptedAt(*t)
	}
	return duo
}

// ClearLastAttemptedAt clears the value of the "lastAttemptedAt" field.
func (duo *DeliveryUpdateOne) ClearLastAttemptedAt() *DeliveryUpdateOne {
	duo.mutation.ClearLastAttemptedAt()
	return duo
}

// SetAttempts sets the "attempts" field.
func (duo *DeliveryUpdateOne) SetAttempts(i int) *DeliveryUpdateOne {
	duo.mutation.ResetAttempts()
	duo.mutation.SetAttempts(i)
	return duo
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (duo *DeliveryUpdateOne) SetNillableAttempts(i *int) *DeliveryUpdateOne {
	if i != nil {
		duo.SetAttempts(*i)
	}
	return duo
}

// AddAttempts adds i to the "attempts" field.
func (duo *DeliveryUpdateOne) AddAttempts(i int) *DeliveryUpdateOne {
	duo.mutation.AddAttempts(i)
	return duo
}

// SetCompletedAt sets the "completedAt" field.
func (duo *DeliveryUpdateOne) SetCompletedAt(t time.Time) *DeliveryUpdateOne {
	duo.mutation.SetCompletedAt(t)
	return duo
}

// SetNillableCompletedAt sets the "completedAt" field if the given value is not nil.
func (duo *DeliveryUpdateOne) SetNillableCompletedAt(t *time.Time) *DeliveryUpdateOne {
	if t != nil {
		duo.SetCompletedAt(*t)
	}
	return duo
}

// ClearCompletedAt clears the value of the "completedAt" field.
func (duo *DeliveryUpdateOne) ClearCompletedAt() *DeliveryUpdateOne {
	duo.mutation.ClearCompletedAt()
	return duo
}

// SetExpiresAt sets the "expiresAt" field.
func (duo *DeliveryUpdateOne) SetExpiresAt(t time.Time) *DeliveryUpdateOne {
	duo.mutation.SetExpiresAt(t)
	return duo
}

// SetNillableExpiresAt sets the "expiresAt" field if the given value is not nil.
func (duo *DeliveryUpdateOne) SetNillableExpiresAt(t *time.Time) *DeliveryUpdateOne {
	if t != nil {
		duo.SetExpiresAt(*t)
	}
	return duo
}

// SetNotBeforeID sets the "notBeforeID" field.
func (duo *DeliveryUpdateOne) SetNotBeforeID(u uuid.UUID) *DeliveryUpdateOne {
	duo.mutation.SetNotBeforeID(u)
	return duo
}

// SetNillableNotBeforeID sets the "notBeforeID" field if the given value is not nil.
func (duo *DeliveryUpdateOne) SetNillableNotBeforeID(u *uuid.UUID) *DeliveryUpdateOne {
	if u != nil {
		duo.SetNotBeforeID(*u)
	}
	return duo
}

// ClearNotBeforeID clears the value of the "notBeforeID" field.
func (duo *DeliveryUpdateOne) ClearNotBeforeID() *DeliveryUpdateOne {
	duo.mutation.ClearNotBeforeID()
	return duo
}

// SetMessage sets the "message" edge to the Message entity.
func (duo *DeliveryUpdateOne) SetMessage(m *Message) *DeliveryUpdateOne {
	return duo.SetMessageID(m.ID)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (duo *DeliveryUpdateOne) SetSubscription(s *Subscription) *DeliveryUpdateOne {
	return duo.SetSubscriptionID(s.ID)
}

// SetNotBefore sets the "notBefore" edge to the Delivery entity.
func (duo *DeliveryUpdateOne) SetNotBefore(d *Delivery) *DeliveryUpdateOne {
	return duo.SetNotBeforeID(d.ID)
}

// AddNextReadyIDs adds the "nextReady" edge to the Delivery entity by IDs.
func (duo *DeliveryUpdateOne) AddNextReadyIDs(ids ...uuid.UUID) *DeliveryUpdateOne {
	duo.mutation.AddNextReadyIDs(ids...)
	return duo
}

// AddNextReady adds the "nextReady" edges to the Delivery entity.
func (duo *DeliveryUpdateOne) AddNextReady(d ...*Delivery) *DeliveryUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.AddNextReadyIDs(ids...)
}

// Mutation returns the DeliveryMutation object of the builder.
func (duo *DeliveryUpdateOne) Mutation() *DeliveryMutation {
	return duo.mutation
}

// ClearMessage clears the "message" edge to the Message entity.
func (duo *DeliveryUpdateOne) ClearMessage() *DeliveryUpdateOne {
	duo.mutation.ClearMessage()
	return duo
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (duo *DeliveryUpdateOne) ClearSubscription() *DeliveryUpdateOne {
	duo.mutation.ClearSubscription()
	return duo
}

// ClearNotBefore clears the "notBefore" edge to the Delivery entity.
func (duo *DeliveryUpdateOne) ClearNotBefore() *DeliveryUpdateOne {
	duo.mutation.ClearNotBefore()
	return duo
}

// ClearNextReady clears all "nextReady" edges to the Delivery entity.
func (duo *DeliveryUpdateOne) ClearNextReady() *DeliveryUpdateOne {
	duo.mutation.ClearNextReady()
	return duo
}

// RemoveNextReadyIDs removes the "nextReady" edge to Delivery entities by IDs.
func (duo *DeliveryUpdateOne) RemoveNextReadyIDs(ids ...uuid.UUID) *DeliveryUpdateOne {
	duo.mutation.RemoveNextReadyIDs(ids...)
	return duo
}

// RemoveNextReady removes "nextReady" edges to Delivery entities.
func (duo *DeliveryUpdateOne) RemoveNextReady(d ...*Delivery) *DeliveryUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return duo.RemoveNextReadyIDs(ids...)
}

// Where appends a list predicates to the DeliveryUpdate builder.
func (duo *DeliveryUpdateOne) Where(ps ...predicate.Delivery) *DeliveryUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DeliveryUpdateOne) Select(field string, fields ...string) *DeliveryUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Delivery entity.
func (duo *DeliveryUpdateOne) Save(ctx context.Context) (*Delivery, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DeliveryUpdateOne) SaveX(ctx context.Context) *Delivery {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DeliveryUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DeliveryUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DeliveryUpdateOne) check() error {
	if duo.mutation.MessageCleared() && len(duo.mutation.MessageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Delivery.message"`)
	}
	if duo.mutation.SubscriptionCleared() && len(duo.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Delivery.subscription"`)
	}
	return nil
}

func (duo *DeliveryUpdateOne) sqlSave(ctx context.Context) (_node *Delivery, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(delivery.Table, delivery.Columns, sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Delivery.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, delivery.FieldID)
		for _, f := range fields {
			if !delivery.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != delivery.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.PublishedAt(); ok {
		_spec.SetField(delivery.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.AttemptAt(); ok {
		_spec.SetField(delivery.FieldAttemptAt, field.TypeTime, value)
	}
	if value, ok := duo.mutation.LastAttemptedAt(); ok {
		_spec.SetField(delivery.FieldLastAttemptedAt, field.TypeTime, value)
	}
	if duo.mutation.LastAttemptedAtCleared() {
		_spec.ClearField(delivery.FieldLastAttemptedAt, field.TypeTime)
	}
	if value, ok := duo.mutation.Attempts(); ok {
		_spec.SetField(delivery.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := duo.mutation.AddedAttempts(); ok {
		_spec.AddField(delivery.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := duo.mutation.CompletedAt(); ok {
		_spec.SetField(delivery.FieldCompletedAt, field.TypeTime, value)
	}
	if duo.mutation.CompletedAtCleared() {
		_spec.ClearField(delivery.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := duo.mutation.ExpiresAt(); ok {
		_spec.SetField(delivery.FieldExpiresAt, field.TypeTime, value)
	}
	if duo.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delivery.MessageTable,
			Columns: []string{delivery.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delivery.MessageTable,
			Columns: []string{delivery.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delivery.SubscriptionTable,
			Columns: []string{delivery.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delivery.SubscriptionTable,
			Columns: []string{delivery.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.NotBeforeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delivery.NotBeforeTable,
			Columns: []string{delivery.NotBeforeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.NotBeforeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delivery.NotBeforeTable,
			Columns: []string{delivery.NotBeforeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.NextReadyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   delivery.NextReadyTable,
			Columns: []string{delivery.NextReadyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedNextReadyIDs(); len(nodes) > 0 && !duo.mutation.NextReadyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   delivery.NextReadyTable,
			Columns: []string{delivery.NextReadyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.NextReadyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   delivery.NextReadyTable,
			Columns: []string{delivery.NextReadyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Delivery{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delivery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
