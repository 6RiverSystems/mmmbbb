// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"go.6river.tech/mmmbbb/ent/delivery"
	"go.6river.tech/mmmbbb/ent/message"
	"go.6river.tech/mmmbbb/ent/predicate"
	"go.6river.tech/mmmbbb/ent/subscription"
)

// DeliveryUpdate is the builder for updating Delivery entities.
type DeliveryUpdate struct {
	config
	hooks    []Hook
	mutation *DeliveryMutation
}

// Where appends a list predicates to the DeliveryUpdate builder.
func (_u *DeliveryUpdate) Where(ps ...predicate.Delivery) *DeliveryUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetMessageID sets the "messageID" field.
func (_u *DeliveryUpdate) SetMessageID(v uuid.UUID) *DeliveryUpdate {
	_u.mutation.SetMessageID(v)
	return _u
}

// SetNillableMessageID sets the "messageID" field if the given value is not nil.
func (_u *DeliveryUpdate) SetNillableMessageID(v *uuid.UUID) *DeliveryUpdate {
	if v != nil {
		_u.SetMessageID(*v)
	}
	return _u
}

// SetSubscriptionID sets the "subscriptionID" field.
func (_u *DeliveryUpdate) SetSubscriptionID(v uuid.UUID) *DeliveryUpdate {
	_u.mutation.SetSubscriptionID(v)
	return _u
}

// SetNillableSubscriptionID sets the "subscriptionID" field if the given value is not nil.
func (_u *DeliveryUpdate) SetNillableSubscriptionID(v *uuid.UUID) *DeliveryUpdate {
	if v != nil {
		_u.SetSubscriptionID(*v)
	}
	return _u
}

// SetPublishedAt sets the "publishedAt" field.
func (_u *DeliveryUpdate) SetPublishedAt(v time.Time) *DeliveryUpdate {
	_u.mutation.SetPublishedAt(v)
	return _u
}

// SetNillablePublishedAt sets the "publishedAt" field if the given value is not nil.
func (_u *DeliveryUpdate) SetNillablePublishedAt(v *time.Time) *DeliveryUpdate {
	if v != nil {
		_u.SetPublishedAt(*v)
	}
	return _u
}

// SetAttemptAt sets the "attemptAt" field.
func (_u *DeliveryUpdate) SetAttemptAt(v time.Time) *DeliveryUpdate {
	_u.mutation.SetAttemptAt(v)
	return _u
}

// SetNillableAttemptAt sets the "attemptAt" field if the given value is not nil.
func (_u *DeliveryUpdate) SetNillableAttemptAt(v *time.Time) *DeliveryUpdate {
	if v != nil {
		_u.SetAttemptAt(*v)
	}
	return _u
}

// SetLastAttemptedAt sets the "lastAttemptedAt" field.
func (_u *DeliveryUpdate) SetLastAttemptedAt(v time.Time) *DeliveryUpdate {
	_u.mutation.SetLastAttemptedAt(v)
	return _u
}

// SetNillableLastAttemptedAt sets the "lastAttemptedAt" field if the given value is not nil.
func (_u *DeliveryUpdate) SetNillableLastAttemptedAt(v *time.Time) *DeliveryUpdate {
	if v != nil {
		_u.SetLastAttemptedAt(*v)
	}
	return _u
}

// ClearLastAttemptedAt clears the value of the "lastAttemptedAt" field.
func (_u *DeliveryUpdate) ClearLastAttemptedAt() *DeliveryUpdate {
	_u.mutation.ClearLastAttemptedAt()
	return _u
}

// SetAttempts sets the "attempts" field.
func (_u *DeliveryUpdate) SetAttempts(v int) *DeliveryUpdate {
	_u.mutation.ResetAttempts()
	_u.mutation.SetAttempts(v)
	return _u
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (_u *DeliveryUpdate) SetNillableAttempts(v *int) *DeliveryUpdate {
	if v != nil {
		_u.SetAttempts(*v)
	}
	return _u
}

// AddAttempts adds value to the "attempts" field.
func (_u *DeliveryUpdate) AddAttempts(v int) *DeliveryUpdate {
	_u.mutation.AddAttempts(v)
	return _u
}

// SetCompletedAt sets the "completedAt" field.
func (_u *DeliveryUpdate) SetCompletedAt(v time.Time) *DeliveryUpdate {
	_u.mutation.SetCompletedAt(v)
	return _u
}

// SetNillableCompletedAt sets the "completedAt" field if the given value is not nil.
func (_u *DeliveryUpdate) SetNillableCompletedAt(v *time.Time) *DeliveryUpdate {
	if v != nil {
		_u.SetCompletedAt(*v)
	}
	return _u
}

// ClearCompletedAt clears the value of the "completedAt" field.
func (_u *DeliveryUpdate) ClearCompletedAt() *DeliveryUpdate {
	_u.mutation.ClearCompletedAt()
	return _u
}

// SetExpiresAt sets the "expiresAt" field.
func (_u *DeliveryUpdate) SetExpiresAt(v time.Time) *DeliveryUpdate {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expiresAt" field if the given value is not nil.
func (_u *DeliveryUpdate) SetNillableExpiresAt(v *time.Time) *DeliveryUpdate {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetNotBeforeID sets the "notBeforeID" field.
func (_u *DeliveryUpdate) SetNotBeforeID(v uuid.UUID) *DeliveryUpdate {
	_u.mutation.SetNotBeforeID(v)
	return _u
}

// SetNillableNotBeforeID sets the "notBeforeID" field if the given value is not nil.
func (_u *DeliveryUpdate) SetNillableNotBeforeID(v *uuid.UUID) *DeliveryUpdate {
	if v != nil {
		_u.SetNotBeforeID(*v)
	}
	return _u
}

// ClearNotBeforeID clears the value of the "notBeforeID" field.
func (_u *DeliveryUpdate) ClearNotBeforeID() *DeliveryUpdate {
	_u.mutation.ClearNotBeforeID()
	return _u
}

// SetMessage sets the "message" edge to the Message entity.
func (_u *DeliveryUpdate) SetMessage(v *Message) *DeliveryUpdate {
	return _u.SetMessageID(v.ID)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (_u *DeliveryUpdate) SetSubscription(v *Subscription) *DeliveryUpdate {
	return _u.SetSubscriptionID(v.ID)
}

// SetNotBefore sets the "notBefore" edge to the Delivery entity.
func (_u *DeliveryUpdate) SetNotBefore(v *Delivery) *DeliveryUpdate {
	return _u.SetNotBeforeID(v.ID)
}

// AddNextReadyIDs adds the "nextReady" edge to the Delivery entity by IDs.
func (_u *DeliveryUpdate) AddNextReadyIDs(ids ...uuid.UUID) *DeliveryUpdate {
	_u.mutation.AddNextReadyIDs(ids...)
	return _u
}

// AddNextReady adds the "nextReady" edges to the Delivery entity.
func (_u *DeliveryUpdate) AddNextReady(v ...*Delivery) *DeliveryUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNextReadyIDs(ids...)
}

// Mutation returns the DeliveryMutation object of the builder.
func (_u *DeliveryUpdate) Mutation() *DeliveryMutation {
	return _u.mutation
}

// ClearMessage clears the "message" edge to the Message entity.
func (_u *DeliveryUpdate) ClearMessage() *DeliveryUpdate {
	_u.mutation.ClearMessage()
	return _u
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (_u *DeliveryUpdate) ClearSubscription() *DeliveryUpdate {
	_u.mutation.ClearSubscription()
	return _u
}

// ClearNotBefore clears the "notBefore" edge to the Delivery entity.
func (_u *DeliveryUpdate) ClearNotBefore() *DeliveryUpdate {
	_u.mutation.ClearNotBefore()
	return _u
}

// ClearNextReady clears all "nextReady" edges to the Delivery entity.
func (_u *DeliveryUpdate) ClearNextReady() *DeliveryUpdate {
	_u.mutation.ClearNextReady()
	return _u
}

// RemoveNextReadyIDs removes the "nextReady" edge to Delivery entities by IDs.
func (_u *DeliveryUpdate) RemoveNextReadyIDs(ids ...uuid.UUID) *DeliveryUpdate {
	_u.mutation.RemoveNextReadyIDs(ids...)
	return _u
}

// RemoveNextReady removes "nextReady" edges to Delivery entities.
func (_u *DeliveryUpdate) RemoveNextReady(v ...*Delivery) *DeliveryUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNextReadyIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *DeliveryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DeliveryUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *DeliveryUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DeliveryUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DeliveryUpdate) check() error {
	if _u.mutation.MessageCleared() && len(_u.mutation.MessageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Delivery.message"`)
	}
	if _u.mutation.SubscriptionCleared() && len(_u.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Delivery.subscription"`)
	}
	return nil
}

func (_u *DeliveryUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(delivery.Table, delivery.Columns, sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PublishedAt(); ok {
		_spec.SetField(delivery.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.AttemptAt(); ok {
		_spec.SetField(delivery.FieldAttemptAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.LastAttemptedAt(); ok {
		_spec.SetField(delivery.FieldLastAttemptedAt, field.TypeTime, value)
	}
	if _u.mutation.LastAttemptedAtCleared() {
		_spec.ClearField(delivery.FieldLastAttemptedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Attempts(); ok {
		_spec.SetField(delivery.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAttempts(); ok {
		_spec.AddField(delivery.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CompletedAt(); ok {
		_spec.SetField(delivery.FieldCompletedAt, field.TypeTime, value)
	}
	if _u.mutation.CompletedAtCleared() {
		_spec.ClearField(delivery.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(delivery.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delivery.MessageTable,
			Columns: []string{delivery.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delivery.MessageTable,
			Columns: []string{delivery.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delivery.SubscriptionTable,
			Columns: []string{delivery.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delivery.SubscriptionTable,
			Columns: []string{delivery.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NotBeforeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delivery.NotBeforeTable,
			Columns: []string{delivery.NotBeforeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotBeforeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delivery.NotBeforeTable,
			Columns: []string{delivery.NotBeforeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NextReadyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   delivery.NextReadyTable,
			Columns: []string{delivery.NextReadyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNextReadyIDs(); len(nodes) > 0 && !_u.mutation.NextReadyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   delivery.NextReadyTable,
			Columns: []string{delivery.NextReadyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NextReadyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   delivery.NextReadyTable,
			Columns: []string{delivery.NextReadyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delivery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// DeliveryUpdateOne is the builder for updating a single Delivery entity.
type DeliveryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeliveryMutation
}

// SetMessageID sets the "messageID" field.
func (_u *DeliveryUpdateOne) SetMessageID(v uuid.UUID) *DeliveryUpdateOne {
	_u.mutation.SetMessageID(v)
	return _u
}

// SetNillableMessageID sets the "messageID" field if the given value is not nil.
func (_u *DeliveryUpdateOne) SetNillableMessageID(v *uuid.UUID) *DeliveryUpdateOne {
	if v != nil {
		_u.SetMessageID(*v)
	}
	return _u
}

// SetSubscriptionID sets the "subscriptionID" field.
func (_u *DeliveryUpdateOne) SetSubscriptionID(v uuid.UUID) *DeliveryUpdateOne {
	_u.mutation.SetSubscriptionID(v)
	return _u
}

// SetNillableSubscriptionID sets the "subscriptionID" field if the given value is not nil.
func (_u *DeliveryUpdateOne) SetNillableSubscriptionID(v *uuid.UUID) *DeliveryUpdateOne {
	if v != nil {
		_u.SetSubscriptionID(*v)
	}
	return _u
}

// SetPublishedAt sets the "publishedAt" field.
func (_u *DeliveryUpdateOne) SetPublishedAt(v time.Time) *DeliveryUpdateOne {
	_u.mutation.SetPublishedAt(v)
	return _u
}

// SetNillablePublishedAt sets the "publishedAt" field if the given value is not nil.
func (_u *DeliveryUpdateOne) SetNillablePublishedAt(v *time.Time) *DeliveryUpdateOne {
	if v != nil {
		_u.SetPublishedAt(*v)
	}
	return _u
}

// SetAttemptAt sets the "attemptAt" field.
func (_u *DeliveryUpdateOne) SetAttemptAt(v time.Time) *DeliveryUpdateOne {
	_u.mutation.SetAttemptAt(v)
	return _u
}

// SetNillableAttemptAt sets the "attemptAt" field if the given value is not nil.
func (_u *DeliveryUpdateOne) SetNillableAttemptAt(v *time.Time) *DeliveryUpdateOne {
	if v != nil {
		_u.SetAttemptAt(*v)
	}
	return _u
}

// SetLastAttemptedAt sets the "lastAttemptedAt" field.
func (_u *DeliveryUpdateOne) SetLastAttemptedAt(v time.Time) *DeliveryUpdateOne {
	_u.mutation.SetLastAttemptedAt(v)
	return _u
}

// SetNillableLastAttemptedAt sets the "lastAttemptedAt" field if the given value is not nil.
func (_u *DeliveryUpdateOne) SetNillableLastAttemptedAt(v *time.Time) *DeliveryUpdateOne {
	if v != nil {
		_u.SetLastAttemptedAt(*v)
	}
	return _u
}

// ClearLastAttemptedAt clears the value of the "lastAttemptedAt" field.
func (_u *DeliveryUpdateOne) ClearLastAttemptedAt() *DeliveryUpdateOne {
	_u.mutation.ClearLastAttemptedAt()
	return _u
}

// SetAttempts sets the "attempts" field.
func (_u *DeliveryUpdateOne) SetAttempts(v int) *DeliveryUpdateOne {
	_u.mutation.ResetAttempts()
	_u.mutation.SetAttempts(v)
	return _u
}

// SetNillableAttempts sets the "attempts" field if the given value is not nil.
func (_u *DeliveryUpdateOne) SetNillableAttempts(v *int) *DeliveryUpdateOne {
	if v != nil {
		_u.SetAttempts(*v)
	}
	return _u
}

// AddAttempts adds value to the "attempts" field.
func (_u *DeliveryUpdateOne) AddAttempts(v int) *DeliveryUpdateOne {
	_u.mutation.AddAttempts(v)
	return _u
}

// SetCompletedAt sets the "completedAt" field.
func (_u *DeliveryUpdateOne) SetCompletedAt(v time.Time) *DeliveryUpdateOne {
	_u.mutation.SetCompletedAt(v)
	return _u
}

// SetNillableCompletedAt sets the "completedAt" field if the given value is not nil.
func (_u *DeliveryUpdateOne) SetNillableCompletedAt(v *time.Time) *DeliveryUpdateOne {
	if v != nil {
		_u.SetCompletedAt(*v)
	}
	return _u
}

// ClearCompletedAt clears the value of the "completedAt" field.
func (_u *DeliveryUpdateOne) ClearCompletedAt() *DeliveryUpdateOne {
	_u.mutation.ClearCompletedAt()
	return _u
}

// SetExpiresAt sets the "expiresAt" field.
func (_u *DeliveryUpdateOne) SetExpiresAt(v time.Time) *DeliveryUpdateOne {
	_u.mutation.SetExpiresAt(v)
	return _u
}

// SetNillableExpiresAt sets the "expiresAt" field if the given value is not nil.
func (_u *DeliveryUpdateOne) SetNillableExpiresAt(v *time.Time) *DeliveryUpdateOne {
	if v != nil {
		_u.SetExpiresAt(*v)
	}
	return _u
}

// SetNotBeforeID sets the "notBeforeID" field.
func (_u *DeliveryUpdateOne) SetNotBeforeID(v uuid.UUID) *DeliveryUpdateOne {
	_u.mutation.SetNotBeforeID(v)
	return _u
}

// SetNillableNotBeforeID sets the "notBeforeID" field if the given value is not nil.
func (_u *DeliveryUpdateOne) SetNillableNotBeforeID(v *uuid.UUID) *DeliveryUpdateOne {
	if v != nil {
		_u.SetNotBeforeID(*v)
	}
	return _u
}

// ClearNotBeforeID clears the value of the "notBeforeID" field.
func (_u *DeliveryUpdateOne) ClearNotBeforeID() *DeliveryUpdateOne {
	_u.mutation.ClearNotBeforeID()
	return _u
}

// SetMessage sets the "message" edge to the Message entity.
func (_u *DeliveryUpdateOne) SetMessage(v *Message) *DeliveryUpdateOne {
	return _u.SetMessageID(v.ID)
}

// SetSubscription sets the "subscription" edge to the Subscription entity.
func (_u *DeliveryUpdateOne) SetSubscription(v *Subscription) *DeliveryUpdateOne {
	return _u.SetSubscriptionID(v.ID)
}

// SetNotBefore sets the "notBefore" edge to the Delivery entity.
func (_u *DeliveryUpdateOne) SetNotBefore(v *Delivery) *DeliveryUpdateOne {
	return _u.SetNotBeforeID(v.ID)
}

// AddNextReadyIDs adds the "nextReady" edge to the Delivery entity by IDs.
func (_u *DeliveryUpdateOne) AddNextReadyIDs(ids ...uuid.UUID) *DeliveryUpdateOne {
	_u.mutation.AddNextReadyIDs(ids...)
	return _u
}

// AddNextReady adds the "nextReady" edges to the Delivery entity.
func (_u *DeliveryUpdateOne) AddNextReady(v ...*Delivery) *DeliveryUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddNextReadyIDs(ids...)
}

// Mutation returns the DeliveryMutation object of the builder.
func (_u *DeliveryUpdateOne) Mutation() *DeliveryMutation {
	return _u.mutation
}

// ClearMessage clears the "message" edge to the Message entity.
func (_u *DeliveryUpdateOne) ClearMessage() *DeliveryUpdateOne {
	_u.mutation.ClearMessage()
	return _u
}

// ClearSubscription clears the "subscription" edge to the Subscription entity.
func (_u *DeliveryUpdateOne) ClearSubscription() *DeliveryUpdateOne {
	_u.mutation.ClearSubscription()
	return _u
}

// ClearNotBefore clears the "notBefore" edge to the Delivery entity.
func (_u *DeliveryUpdateOne) ClearNotBefore() *DeliveryUpdateOne {
	_u.mutation.ClearNotBefore()
	return _u
}

// ClearNextReady clears all "nextReady" edges to the Delivery entity.
func (_u *DeliveryUpdateOne) ClearNextReady() *DeliveryUpdateOne {
	_u.mutation.ClearNextReady()
	return _u
}

// RemoveNextReadyIDs removes the "nextReady" edge to Delivery entities by IDs.
func (_u *DeliveryUpdateOne) RemoveNextReadyIDs(ids ...uuid.UUID) *DeliveryUpdateOne {
	_u.mutation.RemoveNextReadyIDs(ids...)
	return _u
}

// RemoveNextReady removes "nextReady" edges to Delivery entities.
func (_u *DeliveryUpdateOne) RemoveNextReady(v ...*Delivery) *DeliveryUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveNextReadyIDs(ids...)
}

// Where appends a list predicates to the DeliveryUpdate builder.
func (_u *DeliveryUpdateOne) Where(ps ...predicate.Delivery) *DeliveryUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *DeliveryUpdateOne) Select(field string, fields ...string) *DeliveryUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Delivery entity.
func (_u *DeliveryUpdateOne) Save(ctx context.Context) (*Delivery, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *DeliveryUpdateOne) SaveX(ctx context.Context) *Delivery {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *DeliveryUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *DeliveryUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *DeliveryUpdateOne) check() error {
	if _u.mutation.MessageCleared() && len(_u.mutation.MessageIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Delivery.message"`)
	}
	if _u.mutation.SubscriptionCleared() && len(_u.mutation.SubscriptionIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Delivery.subscription"`)
	}
	return nil
}

func (_u *DeliveryUpdateOne) sqlSave(ctx context.Context) (_node *Delivery, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(delivery.Table, delivery.Columns, sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Delivery.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, delivery.FieldID)
		for _, f := range fields {
			if !delivery.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != delivery.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PublishedAt(); ok {
		_spec.SetField(delivery.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.AttemptAt(); ok {
		_spec.SetField(delivery.FieldAttemptAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.LastAttemptedAt(); ok {
		_spec.SetField(delivery.FieldLastAttemptedAt, field.TypeTime, value)
	}
	if _u.mutation.LastAttemptedAtCleared() {
		_spec.ClearField(delivery.FieldLastAttemptedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.Attempts(); ok {
		_spec.SetField(delivery.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAttempts(); ok {
		_spec.AddField(delivery.FieldAttempts, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CompletedAt(); ok {
		_spec.SetField(delivery.FieldCompletedAt, field.TypeTime, value)
	}
	if _u.mutation.CompletedAtCleared() {
		_spec.ClearField(delivery.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.ExpiresAt(); ok {
		_spec.SetField(delivery.FieldExpiresAt, field.TypeTime, value)
	}
	if _u.mutation.MessageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delivery.MessageTable,
			Columns: []string{delivery.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.MessageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delivery.MessageTable,
			Columns: []string{delivery.MessageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.SubscriptionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delivery.SubscriptionTable,
			Columns: []string{delivery.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SubscriptionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delivery.SubscriptionTable,
			Columns: []string{delivery.SubscriptionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NotBeforeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delivery.NotBeforeTable,
			Columns: []string{delivery.NotBeforeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NotBeforeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delivery.NotBeforeTable,
			Columns: []string{delivery.NotBeforeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.NextReadyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   delivery.NextReadyTable,
			Columns: []string{delivery.NextReadyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedNextReadyIDs(); len(nodes) > 0 && !_u.mutation.NextReadyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   delivery.NextReadyTable,
			Columns: []string{delivery.NextReadyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.NextReadyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   delivery.NextReadyTable,
			Columns: []string{delivery.NextReadyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Delivery{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{delivery.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
