// Code generated by ent, DO NOT EDIT.

package ent

import (
	"go.6river.tech/mmmbbb/ent/delivery"
	"go.6river.tech/mmmbbb/ent/message"
	"go.6river.tech/mmmbbb/ent/predicate"
	"go.6river.tech/mmmbbb/ent/snapshot"
	"go.6river.tech/mmmbbb/ent/subscription"
	"go.6river.tech/mmmbbb/ent/topic"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 5)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   delivery.Table,
			Columns: delivery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: delivery.FieldID,
			},
		},
		Type: "Delivery",
		Fields: map[string]*sqlgraph.FieldSpec{
			delivery.FieldMessageID:       {Type: field.TypeUUID, Column: delivery.FieldMessageID},
			delivery.FieldSubscriptionID:  {Type: field.TypeUUID, Column: delivery.FieldSubscriptionID},
			delivery.FieldPublishedAt:     {Type: field.TypeTime, Column: delivery.FieldPublishedAt},
			delivery.FieldAttemptAt:       {Type: field.TypeTime, Column: delivery.FieldAttemptAt},
			delivery.FieldLastAttemptedAt: {Type: field.TypeTime, Column: delivery.FieldLastAttemptedAt},
			delivery.FieldAttempts:        {Type: field.TypeInt, Column: delivery.FieldAttempts},
			delivery.FieldCompletedAt:     {Type: field.TypeTime, Column: delivery.FieldCompletedAt},
			delivery.FieldExpiresAt:       {Type: field.TypeTime, Column: delivery.FieldExpiresAt},
			delivery.FieldNotBeforeID:     {Type: field.TypeUUID, Column: delivery.FieldNotBeforeID},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   message.Table,
			Columns: message.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: message.FieldID,
			},
		},
		Type: "Message",
		Fields: map[string]*sqlgraph.FieldSpec{
			message.FieldTopicID:     {Type: field.TypeUUID, Column: message.FieldTopicID},
			message.FieldPayload:     {Type: field.TypeJSON, Column: message.FieldPayload},
			message.FieldAttributes:  {Type: field.TypeJSON, Column: message.FieldAttributes},
			message.FieldPublishedAt: {Type: field.TypeTime, Column: message.FieldPublishedAt},
			message.FieldOrderKey:    {Type: field.TypeString, Column: message.FieldOrderKey},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   snapshot.Table,
			Columns: snapshot.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: snapshot.FieldID,
			},
		},
		Type: "Snapshot",
		Fields: map[string]*sqlgraph.FieldSpec{
			snapshot.FieldTopicID:             {Type: field.TypeUUID, Column: snapshot.FieldTopicID},
			snapshot.FieldName:                {Type: field.TypeString, Column: snapshot.FieldName},
			snapshot.FieldCreatedAt:           {Type: field.TypeTime, Column: snapshot.FieldCreatedAt},
			snapshot.FieldExpiresAt:           {Type: field.TypeTime, Column: snapshot.FieldExpiresAt},
			snapshot.FieldLabels:              {Type: field.TypeJSON, Column: snapshot.FieldLabels},
			snapshot.FieldAckedMessagesBefore: {Type: field.TypeTime, Column: snapshot.FieldAckedMessagesBefore},
			snapshot.FieldAckedMessageIDs:     {Type: field.TypeJSON, Column: snapshot.FieldAckedMessageIDs},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   subscription.Table,
			Columns: subscription.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: subscription.FieldID,
			},
		},
		Type: "Subscription",
		Fields: map[string]*sqlgraph.FieldSpec{
			subscription.FieldTopicID:             {Type: field.TypeUUID, Column: subscription.FieldTopicID},
			subscription.FieldName:                {Type: field.TypeString, Column: subscription.FieldName},
			subscription.FieldCreatedAt:           {Type: field.TypeTime, Column: subscription.FieldCreatedAt},
			subscription.FieldExpiresAt:           {Type: field.TypeTime, Column: subscription.FieldExpiresAt},
			subscription.FieldLive:                {Type: field.TypeBool, Column: subscription.FieldLive},
			subscription.FieldDeletedAt:           {Type: field.TypeTime, Column: subscription.FieldDeletedAt},
			subscription.FieldTTL:                 {Type: field.TypeString, Column: subscription.FieldTTL},
			subscription.FieldMessageTTL:          {Type: field.TypeString, Column: subscription.FieldMessageTTL},
			subscription.FieldOrderedDelivery:     {Type: field.TypeBool, Column: subscription.FieldOrderedDelivery},
			subscription.FieldLabels:              {Type: field.TypeJSON, Column: subscription.FieldLabels},
			subscription.FieldMinBackoff:          {Type: field.TypeString, Column: subscription.FieldMinBackoff},
			subscription.FieldMaxBackoff:          {Type: field.TypeString, Column: subscription.FieldMaxBackoff},
			subscription.FieldPushEndpoint:        {Type: field.TypeString, Column: subscription.FieldPushEndpoint},
			subscription.FieldMessageFilter:       {Type: field.TypeString, Column: subscription.FieldMessageFilter},
			subscription.FieldMaxDeliveryAttempts: {Type: field.TypeInt32, Column: subscription.FieldMaxDeliveryAttempts},
			subscription.FieldDeadLetterTopicID:   {Type: field.TypeUUID, Column: subscription.FieldDeadLetterTopicID},
			subscription.FieldDeliveryDelay:       {Type: field.TypeOther, Column: subscription.FieldDeliveryDelay},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   topic.Table,
			Columns: topic.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: topic.FieldID,
			},
		},
		Type: "Topic",
		Fields: map[string]*sqlgraph.FieldSpec{
			topic.FieldName:      {Type: field.TypeString, Column: topic.FieldName},
			topic.FieldCreatedAt: {Type: field.TypeTime, Column: topic.FieldCreatedAt},
			topic.FieldLive:      {Type: field.TypeBool, Column: topic.FieldLive},
			topic.FieldDeletedAt: {Type: field.TypeTime, Column: topic.FieldDeletedAt},
			topic.FieldLabels:    {Type: field.TypeJSON, Column: topic.FieldLabels},
		},
	}
	graph.MustAddE(
		"message",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delivery.MessageTable,
			Columns: []string{delivery.MessageColumn},
			Bidi:    false,
		},
		"Delivery",
		"Message",
	)
	graph.MustAddE(
		"subscription",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   delivery.SubscriptionTable,
			Columns: []string{delivery.SubscriptionColumn},
			Bidi:    false,
		},
		"Delivery",
		"Subscription",
	)
	graph.MustAddE(
		"notBefore",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   delivery.NotBeforeTable,
			Columns: []string{delivery.NotBeforeColumn},
			Bidi:    false,
		},
		"Delivery",
		"Delivery",
	)
	graph.MustAddE(
		"nextReady",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   delivery.NextReadyTable,
			Columns: []string{delivery.NextReadyColumn},
			Bidi:    false,
		},
		"Delivery",
		"Delivery",
	)
	graph.MustAddE(
		"deliveries",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   message.DeliveriesTable,
			Columns: []string{message.DeliveriesColumn},
			Bidi:    false,
		},
		"Message",
		"Delivery",
	)
	graph.MustAddE(
		"topic",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   message.TopicTable,
			Columns: []string{message.TopicColumn},
			Bidi:    false,
		},
		"Message",
		"Topic",
	)
	graph.MustAddE(
		"topic",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   snapshot.TopicTable,
			Columns: []string{snapshot.TopicColumn},
			Bidi:    false,
		},
		"Snapshot",
		"Topic",
	)
	graph.MustAddE(
		"topic",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscription.TopicTable,
			Columns: []string{subscription.TopicColumn},
			Bidi:    false,
		},
		"Subscription",
		"Topic",
	)
	graph.MustAddE(
		"deliveries",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subscription.DeliveriesTable,
			Columns: []string{subscription.DeliveriesColumn},
			Bidi:    false,
		},
		"Subscription",
		"Delivery",
	)
	graph.MustAddE(
		"deadLetterTopic",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscription.DeadLetterTopicTable,
			Columns: []string{subscription.DeadLetterTopicColumn},
			Bidi:    false,
		},
		"Subscription",
		"Topic",
	)
	graph.MustAddE(
		"subscriptions",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   topic.SubscriptionsTable,
			Columns: []string{topic.SubscriptionsColumn},
			Bidi:    false,
		},
		"Topic",
		"Subscription",
	)
	graph.MustAddE(
		"messages",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   topic.MessagesTable,
			Columns: []string{topic.MessagesColumn},
			Bidi:    false,
		},
		"Topic",
		"Message",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (dq *DeliveryQuery) addPredicate(pred func(s *sql.Selector)) {
	dq.predicates = append(dq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the DeliveryQuery builder.
func (dq *DeliveryQuery) Filter() *DeliveryFilter {
	return &DeliveryFilter{config: dq.config, predicateAdder: dq}
}

// addPredicate implements the predicateAdder interface.
func (m *DeliveryMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the DeliveryMutation builder.
func (m *DeliveryMutation) Filter() *DeliveryFilter {
	return &DeliveryFilter{config: m.config, predicateAdder: m}
}

// DeliveryFilter provides a generic filtering capability at runtime for DeliveryQuery.
type DeliveryFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *DeliveryFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *DeliveryFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(delivery.FieldID))
}

// WhereMessageID applies the entql [16]byte predicate on the messageID field.
func (f *DeliveryFilter) WhereMessageID(p entql.ValueP) {
	f.Where(p.Field(delivery.FieldMessageID))
}

// WhereSubscriptionID applies the entql [16]byte predicate on the subscriptionID field.
func (f *DeliveryFilter) WhereSubscriptionID(p entql.ValueP) {
	f.Where(p.Field(delivery.FieldSubscriptionID))
}

// WherePublishedAt applies the entql time.Time predicate on the publishedAt field.
func (f *DeliveryFilter) WherePublishedAt(p entql.TimeP) {
	f.Where(p.Field(delivery.FieldPublishedAt))
}

// WhereAttemptAt applies the entql time.Time predicate on the attemptAt field.
func (f *DeliveryFilter) WhereAttemptAt(p entql.TimeP) {
	f.Where(p.Field(delivery.FieldAttemptAt))
}

// WhereLastAttemptedAt applies the entql time.Time predicate on the lastAttemptedAt field.
func (f *DeliveryFilter) WhereLastAttemptedAt(p entql.TimeP) {
	f.Where(p.Field(delivery.FieldLastAttemptedAt))
}

// WhereAttempts applies the entql int predicate on the attempts field.
func (f *DeliveryFilter) WhereAttempts(p entql.IntP) {
	f.Where(p.Field(delivery.FieldAttempts))
}

// WhereCompletedAt applies the entql time.Time predicate on the completedAt field.
func (f *DeliveryFilter) WhereCompletedAt(p entql.TimeP) {
	f.Where(p.Field(delivery.FieldCompletedAt))
}

// WhereExpiresAt applies the entql time.Time predicate on the expiresAt field.
func (f *DeliveryFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(delivery.FieldExpiresAt))
}

// WhereNotBeforeID applies the entql [16]byte predicate on the notBeforeID field.
func (f *DeliveryFilter) WhereNotBeforeID(p entql.ValueP) {
	f.Where(p.Field(delivery.FieldNotBeforeID))
}

// WhereHasMessage applies a predicate to check if query has an edge message.
func (f *DeliveryFilter) WhereHasMessage() {
	f.Where(entql.HasEdge("message"))
}

// WhereHasMessageWith applies a predicate to check if query has an edge message with a given conditions (other predicates).
func (f *DeliveryFilter) WhereHasMessageWith(preds ...predicate.Message) {
	f.Where(entql.HasEdgeWith("message", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSubscription applies a predicate to check if query has an edge subscription.
func (f *DeliveryFilter) WhereHasSubscription() {
	f.Where(entql.HasEdge("subscription"))
}

// WhereHasSubscriptionWith applies a predicate to check if query has an edge subscription with a given conditions (other predicates).
func (f *DeliveryFilter) WhereHasSubscriptionWith(preds ...predicate.Subscription) {
	f.Where(entql.HasEdgeWith("subscription", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNotBefore applies a predicate to check if query has an edge notBefore.
func (f *DeliveryFilter) WhereHasNotBefore() {
	f.Where(entql.HasEdge("notBefore"))
}

// WhereHasNotBeforeWith applies a predicate to check if query has an edge notBefore with a given conditions (other predicates).
func (f *DeliveryFilter) WhereHasNotBeforeWith(preds ...predicate.Delivery) {
	f.Where(entql.HasEdgeWith("notBefore", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasNextReady applies a predicate to check if query has an edge nextReady.
func (f *DeliveryFilter) WhereHasNextReady() {
	f.Where(entql.HasEdge("nextReady"))
}

// WhereHasNextReadyWith applies a predicate to check if query has an edge nextReady with a given conditions (other predicates).
func (f *DeliveryFilter) WhereHasNextReadyWith(preds ...predicate.Delivery) {
	f.Where(entql.HasEdgeWith("nextReady", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (mq *MessageQuery) addPredicate(pred func(s *sql.Selector)) {
	mq.predicates = append(mq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the MessageQuery builder.
func (mq *MessageQuery) Filter() *MessageFilter {
	return &MessageFilter{config: mq.config, predicateAdder: mq}
}

// addPredicate implements the predicateAdder interface.
func (m *MessageMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the MessageMutation builder.
func (m *MessageMutation) Filter() *MessageFilter {
	return &MessageFilter{config: m.config, predicateAdder: m}
}

// MessageFilter provides a generic filtering capability at runtime for MessageQuery.
type MessageFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *MessageFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *MessageFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(message.FieldID))
}

// WhereTopicID applies the entql [16]byte predicate on the topicID field.
func (f *MessageFilter) WhereTopicID(p entql.ValueP) {
	f.Where(p.Field(message.FieldTopicID))
}

// WherePayload applies the entql json.RawMessage predicate on the payload field.
func (f *MessageFilter) WherePayload(p entql.BytesP) {
	f.Where(p.Field(message.FieldPayload))
}

// WhereAttributes applies the entql json.RawMessage predicate on the attributes field.
func (f *MessageFilter) WhereAttributes(p entql.BytesP) {
	f.Where(p.Field(message.FieldAttributes))
}

// WherePublishedAt applies the entql time.Time predicate on the publishedAt field.
func (f *MessageFilter) WherePublishedAt(p entql.TimeP) {
	f.Where(p.Field(message.FieldPublishedAt))
}

// WhereOrderKey applies the entql string predicate on the orderKey field.
func (f *MessageFilter) WhereOrderKey(p entql.StringP) {
	f.Where(p.Field(message.FieldOrderKey))
}

// WhereHasDeliveries applies a predicate to check if query has an edge deliveries.
func (f *MessageFilter) WhereHasDeliveries() {
	f.Where(entql.HasEdge("deliveries"))
}

// WhereHasDeliveriesWith applies a predicate to check if query has an edge deliveries with a given conditions (other predicates).
func (f *MessageFilter) WhereHasDeliveriesWith(preds ...predicate.Delivery) {
	f.Where(entql.HasEdgeWith("deliveries", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasTopic applies a predicate to check if query has an edge topic.
func (f *MessageFilter) WhereHasTopic() {
	f.Where(entql.HasEdge("topic"))
}

// WhereHasTopicWith applies a predicate to check if query has an edge topic with a given conditions (other predicates).
func (f *MessageFilter) WhereHasTopicWith(preds ...predicate.Topic) {
	f.Where(entql.HasEdgeWith("topic", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SnapshotQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SnapshotQuery builder.
func (sq *SnapshotQuery) Filter() *SnapshotFilter {
	return &SnapshotFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SnapshotMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SnapshotMutation builder.
func (m *SnapshotMutation) Filter() *SnapshotFilter {
	return &SnapshotFilter{config: m.config, predicateAdder: m}
}

// SnapshotFilter provides a generic filtering capability at runtime for SnapshotQuery.
type SnapshotFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SnapshotFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *SnapshotFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(snapshot.FieldID))
}

// WhereTopicID applies the entql [16]byte predicate on the topicID field.
func (f *SnapshotFilter) WhereTopicID(p entql.ValueP) {
	f.Where(p.Field(snapshot.FieldTopicID))
}

// WhereName applies the entql string predicate on the name field.
func (f *SnapshotFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(snapshot.FieldName))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *SnapshotFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(snapshot.FieldCreatedAt))
}

// WhereExpiresAt applies the entql time.Time predicate on the expiresAt field.
func (f *SnapshotFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(snapshot.FieldExpiresAt))
}

// WhereLabels applies the entql json.RawMessage predicate on the labels field.
func (f *SnapshotFilter) WhereLabels(p entql.BytesP) {
	f.Where(p.Field(snapshot.FieldLabels))
}

// WhereAckedMessagesBefore applies the entql time.Time predicate on the ackedMessagesBefore field.
func (f *SnapshotFilter) WhereAckedMessagesBefore(p entql.TimeP) {
	f.Where(p.Field(snapshot.FieldAckedMessagesBefore))
}

// WhereAckedMessageIDs applies the entql json.RawMessage predicate on the ackedMessageIDs field.
func (f *SnapshotFilter) WhereAckedMessageIDs(p entql.BytesP) {
	f.Where(p.Field(snapshot.FieldAckedMessageIDs))
}

// WhereHasTopic applies a predicate to check if query has an edge topic.
func (f *SnapshotFilter) WhereHasTopic() {
	f.Where(entql.HasEdge("topic"))
}

// WhereHasTopicWith applies a predicate to check if query has an edge topic with a given conditions (other predicates).
func (f *SnapshotFilter) WhereHasTopicWith(preds ...predicate.Topic) {
	f.Where(entql.HasEdgeWith("topic", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *SubscriptionQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the SubscriptionQuery builder.
func (sq *SubscriptionQuery) Filter() *SubscriptionFilter {
	return &SubscriptionFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *SubscriptionMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the SubscriptionMutation builder.
func (m *SubscriptionMutation) Filter() *SubscriptionFilter {
	return &SubscriptionFilter{config: m.config, predicateAdder: m}
}

// SubscriptionFilter provides a generic filtering capability at runtime for SubscriptionQuery.
type SubscriptionFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *SubscriptionFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *SubscriptionFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(subscription.FieldID))
}

// WhereTopicID applies the entql [16]byte predicate on the topicID field.
func (f *SubscriptionFilter) WhereTopicID(p entql.ValueP) {
	f.Where(p.Field(subscription.FieldTopicID))
}

// WhereName applies the entql string predicate on the name field.
func (f *SubscriptionFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(subscription.FieldName))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *SubscriptionFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(subscription.FieldCreatedAt))
}

// WhereExpiresAt applies the entql time.Time predicate on the expiresAt field.
func (f *SubscriptionFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(subscription.FieldExpiresAt))
}

// WhereLive applies the entql bool predicate on the live field.
func (f *SubscriptionFilter) WhereLive(p entql.BoolP) {
	f.Where(p.Field(subscription.FieldLive))
}

// WhereDeletedAt applies the entql time.Time predicate on the deletedAt field.
func (f *SubscriptionFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(subscription.FieldDeletedAt))
}

// WhereTTL applies the entql string predicate on the ttl field.
func (f *SubscriptionFilter) WhereTTL(p entql.StringP) {
	f.Where(p.Field(subscription.FieldTTL))
}

// WhereMessageTTL applies the entql string predicate on the messageTTL field.
func (f *SubscriptionFilter) WhereMessageTTL(p entql.StringP) {
	f.Where(p.Field(subscription.FieldMessageTTL))
}

// WhereOrderedDelivery applies the entql bool predicate on the orderedDelivery field.
func (f *SubscriptionFilter) WhereOrderedDelivery(p entql.BoolP) {
	f.Where(p.Field(subscription.FieldOrderedDelivery))
}

// WhereLabels applies the entql json.RawMessage predicate on the labels field.
func (f *SubscriptionFilter) WhereLabels(p entql.BytesP) {
	f.Where(p.Field(subscription.FieldLabels))
}

// WhereMinBackoff applies the entql string predicate on the minBackoff field.
func (f *SubscriptionFilter) WhereMinBackoff(p entql.StringP) {
	f.Where(p.Field(subscription.FieldMinBackoff))
}

// WhereMaxBackoff applies the entql string predicate on the maxBackoff field.
func (f *SubscriptionFilter) WhereMaxBackoff(p entql.StringP) {
	f.Where(p.Field(subscription.FieldMaxBackoff))
}

// WherePushEndpoint applies the entql string predicate on the pushEndpoint field.
func (f *SubscriptionFilter) WherePushEndpoint(p entql.StringP) {
	f.Where(p.Field(subscription.FieldPushEndpoint))
}

// WhereMessageFilter applies the entql string predicate on the messageFilter field.
func (f *SubscriptionFilter) WhereMessageFilter(p entql.StringP) {
	f.Where(p.Field(subscription.FieldMessageFilter))
}

// WhereMaxDeliveryAttempts applies the entql int32 predicate on the maxDeliveryAttempts field.
func (f *SubscriptionFilter) WhereMaxDeliveryAttempts(p entql.Int32P) {
	f.Where(p.Field(subscription.FieldMaxDeliveryAttempts))
}

// WhereDeadLetterTopicID applies the entql [16]byte predicate on the deadLetterTopicID field.
func (f *SubscriptionFilter) WhereDeadLetterTopicID(p entql.ValueP) {
	f.Where(p.Field(subscription.FieldDeadLetterTopicID))
}

// WhereDeliveryDelay applies the entql other predicate on the deliveryDelay field.
func (f *SubscriptionFilter) WhereDeliveryDelay(p entql.OtherP) {
	f.Where(p.Field(subscription.FieldDeliveryDelay))
}

// WhereHasTopic applies a predicate to check if query has an edge topic.
func (f *SubscriptionFilter) WhereHasTopic() {
	f.Where(entql.HasEdge("topic"))
}

// WhereHasTopicWith applies a predicate to check if query has an edge topic with a given conditions (other predicates).
func (f *SubscriptionFilter) WhereHasTopicWith(preds ...predicate.Topic) {
	f.Where(entql.HasEdgeWith("topic", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeliveries applies a predicate to check if query has an edge deliveries.
func (f *SubscriptionFilter) WhereHasDeliveries() {
	f.Where(entql.HasEdge("deliveries"))
}

// WhereHasDeliveriesWith applies a predicate to check if query has an edge deliveries with a given conditions (other predicates).
func (f *SubscriptionFilter) WhereHasDeliveriesWith(preds ...predicate.Delivery) {
	f.Where(entql.HasEdgeWith("deliveries", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDeadLetterTopic applies a predicate to check if query has an edge deadLetterTopic.
func (f *SubscriptionFilter) WhereHasDeadLetterTopic() {
	f.Where(entql.HasEdge("deadLetterTopic"))
}

// WhereHasDeadLetterTopicWith applies a predicate to check if query has an edge deadLetterTopic with a given conditions (other predicates).
func (f *SubscriptionFilter) WhereHasDeadLetterTopicWith(preds ...predicate.Topic) {
	f.Where(entql.HasEdgeWith("deadLetterTopic", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (tq *TopicQuery) addPredicate(pred func(s *sql.Selector)) {
	tq.predicates = append(tq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the TopicQuery builder.
func (tq *TopicQuery) Filter() *TopicFilter {
	return &TopicFilter{config: tq.config, predicateAdder: tq}
}

// addPredicate implements the predicateAdder interface.
func (m *TopicMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the TopicMutation builder.
func (m *TopicMutation) Filter() *TopicFilter {
	return &TopicFilter{config: m.config, predicateAdder: m}
}

// TopicFilter provides a generic filtering capability at runtime for TopicQuery.
type TopicFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *TopicFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql [16]byte predicate on the id field.
func (f *TopicFilter) WhereID(p entql.ValueP) {
	f.Where(p.Field(topic.FieldID))
}

// WhereName applies the entql string predicate on the name field.
func (f *TopicFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(topic.FieldName))
}

// WhereCreatedAt applies the entql time.Time predicate on the createdAt field.
func (f *TopicFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(topic.FieldCreatedAt))
}

// WhereLive applies the entql bool predicate on the live field.
func (f *TopicFilter) WhereLive(p entql.BoolP) {
	f.Where(p.Field(topic.FieldLive))
}

// WhereDeletedAt applies the entql time.Time predicate on the deletedAt field.
func (f *TopicFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(topic.FieldDeletedAt))
}

// WhereLabels applies the entql json.RawMessage predicate on the labels field.
func (f *TopicFilter) WhereLabels(p entql.BytesP) {
	f.Where(p.Field(topic.FieldLabels))
}

// WhereHasSubscriptions applies a predicate to check if query has an edge subscriptions.
func (f *TopicFilter) WhereHasSubscriptions() {
	f.Where(entql.HasEdge("subscriptions"))
}

// WhereHasSubscriptionsWith applies a predicate to check if query has an edge subscriptions with a given conditions (other predicates).
func (f *TopicFilter) WhereHasSubscriptionsWith(preds ...predicate.Subscription) {
	f.Where(entql.HasEdgeWith("subscriptions", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMessages applies a predicate to check if query has an edge messages.
func (f *TopicFilter) WhereHasMessages() {
	f.Where(entql.HasEdge("messages"))
}

// WhereHasMessagesWith applies a predicate to check if query has an edge messages with a given conditions (other predicates).
func (f *TopicFilter) WhereHasMessagesWith(preds ...predicate.Message) {
	f.Where(entql.HasEdgeWith("messages", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
