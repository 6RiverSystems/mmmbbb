// Code generated by ent, DO NOT EDIT.

package delivery

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the delivery type in the database.
	Label = "delivery"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMessageID holds the string denoting the messageid field in the database.
	FieldMessageID = "message_id"
	// FieldSubscriptionID holds the string denoting the subscriptionid field in the database.
	FieldSubscriptionID = "subscription_id"
	// FieldPublishedAt holds the string denoting the publishedat field in the database.
	FieldPublishedAt = "published_at"
	// FieldAttemptAt holds the string denoting the attemptat field in the database.
	FieldAttemptAt = "attempt_at"
	// FieldLastAttemptedAt holds the string denoting the lastattemptedat field in the database.
	FieldLastAttemptedAt = "last_attempted_at"
	// FieldAttempts holds the string denoting the attempts field in the database.
	FieldAttempts = "attempts"
	// FieldCompletedAt holds the string denoting the completedat field in the database.
	FieldCompletedAt = "completed_at"
	// FieldExpiresAt holds the string denoting the expiresat field in the database.
	FieldExpiresAt = "expires_at"
	// FieldNotBeforeID holds the string denoting the notbeforeid field in the database.
	FieldNotBeforeID = "not_before_id"
	// EdgeMessage holds the string denoting the message edge name in mutations.
	EdgeMessage = "message"
	// EdgeSubscription holds the string denoting the subscription edge name in mutations.
	EdgeSubscription = "subscription"
	// EdgeNotBefore holds the string denoting the notbefore edge name in mutations.
	EdgeNotBefore = "notBefore"
	// EdgeNextReady holds the string denoting the nextready edge name in mutations.
	EdgeNextReady = "nextReady"
	// Table holds the table name of the delivery in the database.
	Table = "deliveries"
	// MessageTable is the table that holds the message relation/edge.
	MessageTable = "deliveries"
	// MessageInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	MessageInverseTable = "messages"
	// MessageColumn is the table column denoting the message relation/edge.
	MessageColumn = "message_id"
	// SubscriptionTable is the table that holds the subscription relation/edge.
	SubscriptionTable = "deliveries"
	// SubscriptionInverseTable is the table name for the Subscription entity.
	// It exists in this package in order to avoid circular dependency with the "subscription" package.
	SubscriptionInverseTable = "subscriptions"
	// SubscriptionColumn is the table column denoting the subscription relation/edge.
	SubscriptionColumn = "subscription_id"
	// NotBeforeTable is the table that holds the notBefore relation/edge.
	NotBeforeTable = "deliveries"
	// NotBeforeColumn is the table column denoting the notBefore relation/edge.
	NotBeforeColumn = "not_before_id"
	// NextReadyTable is the table that holds the nextReady relation/edge.
	NextReadyTable = "deliveries"
	// NextReadyColumn is the table column denoting the nextReady relation/edge.
	NextReadyColumn = "not_before_id"
)

// Columns holds all SQL columns for delivery fields.
var Columns = []string{
	FieldID,
	FieldMessageID,
	FieldSubscriptionID,
	FieldPublishedAt,
	FieldAttemptAt,
	FieldLastAttemptedAt,
	FieldAttempts,
	FieldCompletedAt,
	FieldExpiresAt,
	FieldNotBeforeID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPublishedAt holds the default value on creation for the "publishedAt" field.
	DefaultPublishedAt func() time.Time
	// DefaultAttemptAt holds the default value on creation for the "attemptAt" field.
	DefaultAttemptAt func() time.Time
	// DefaultAttempts holds the default value on creation for the "attempts" field.
	DefaultAttempts int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Delivery queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMessageID orders the results by the messageID field.
func ByMessageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessageID, opts...).ToFunc()
}

// BySubscriptionID orders the results by the subscriptionID field.
func BySubscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscriptionID, opts...).ToFunc()
}

// ByPublishedAt orders the results by the publishedAt field.
func ByPublishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishedAt, opts...).ToFunc()
}

// ByAttemptAt orders the results by the attemptAt field.
func ByAttemptAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttemptAt, opts...).ToFunc()
}

// ByLastAttemptedAt orders the results by the lastAttemptedAt field.
func ByLastAttemptedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastAttemptedAt, opts...).ToFunc()
}

// ByAttempts orders the results by the attempts field.
func ByAttempts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAttempts, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completedAt field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expiresAt field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByNotBeforeID orders the results by the notBeforeID field.
func ByNotBeforeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNotBeforeID, opts...).ToFunc()
}

// ByMessageField orders the results by message field.
func ByMessageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMessageStep(), sql.OrderByField(field, opts...))
	}
}

// BySubscriptionField orders the results by subscription field.
func BySubscriptionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscriptionStep(), sql.OrderByField(field, opts...))
	}
}

// ByNotBeforeField orders the results by notBefore field.
func ByNotBeforeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotBeforeStep(), sql.OrderByField(field, opts...))
	}
}

// ByNextReadyCount orders the results by nextReady count.
func ByNextReadyCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNextReadyStep(), opts...)
	}
}

// ByNextReady orders the results by nextReady terms.
func ByNextReady(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNextReadyStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMessageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MessageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, MessageTable, MessageColumn),
	)
}
func newSubscriptionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscriptionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SubscriptionTable, SubscriptionColumn),
	)
}
func newNotBeforeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NotBeforeTable, NotBeforeColumn),
	)
}
func newNextReadyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NextReadyTable, NextReadyColumn),
	)
}
