// Code generated by ent, DO NOT EDIT.

package delivery

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"go.6river.tech/mmmbbb/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldLTE(FieldID, id))
}

// MessageID applies equality check predicate on the "messageID" field. It's identical to MessageIDEQ.
func MessageID(v uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldMessageID, v))
}

// SubscriptionID applies equality check predicate on the "subscriptionID" field. It's identical to SubscriptionIDEQ.
func SubscriptionID(v uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldSubscriptionID, v))
}

// PublishedAt applies equality check predicate on the "publishedAt" field. It's identical to PublishedAtEQ.
func PublishedAt(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldPublishedAt, v))
}

// AttemptAt applies equality check predicate on the "attemptAt" field. It's identical to AttemptAtEQ.
func AttemptAt(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldAttemptAt, v))
}

// LastAttemptedAt applies equality check predicate on the "lastAttemptedAt" field. It's identical to LastAttemptedAtEQ.
func LastAttemptedAt(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldLastAttemptedAt, v))
}

// Attempts applies equality check predicate on the "attempts" field. It's identical to AttemptsEQ.
func Attempts(v int) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldAttempts, v))
}

// CompletedAt applies equality check predicate on the "completedAt" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldCompletedAt, v))
}

// ExpiresAt applies equality check predicate on the "expiresAt" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldExpiresAt, v))
}

// NotBeforeID applies equality check predicate on the "notBeforeID" field. It's identical to NotBeforeIDEQ.
func NotBeforeID(v uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldNotBeforeID, v))
}

// MessageIDEQ applies the EQ predicate on the "messageID" field.
func MessageIDEQ(v uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldMessageID, v))
}

// MessageIDNEQ applies the NEQ predicate on the "messageID" field.
func MessageIDNEQ(v uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldNEQ(FieldMessageID, v))
}

// MessageIDIn applies the In predicate on the "messageID" field.
func MessageIDIn(vs ...uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldIn(FieldMessageID, vs...))
}

// MessageIDNotIn applies the NotIn predicate on the "messageID" field.
func MessageIDNotIn(vs ...uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldNotIn(FieldMessageID, vs...))
}

// SubscriptionIDEQ applies the EQ predicate on the "subscriptionID" field.
func SubscriptionIDEQ(v uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldSubscriptionID, v))
}

// SubscriptionIDNEQ applies the NEQ predicate on the "subscriptionID" field.
func SubscriptionIDNEQ(v uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldNEQ(FieldSubscriptionID, v))
}

// SubscriptionIDIn applies the In predicate on the "subscriptionID" field.
func SubscriptionIDIn(vs ...uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldIn(FieldSubscriptionID, vs...))
}

// SubscriptionIDNotIn applies the NotIn predicate on the "subscriptionID" field.
func SubscriptionIDNotIn(vs ...uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldNotIn(FieldSubscriptionID, vs...))
}

// PublishedAtEQ applies the EQ predicate on the "publishedAt" field.
func PublishedAtEQ(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldPublishedAt, v))
}

// PublishedAtNEQ applies the NEQ predicate on the "publishedAt" field.
func PublishedAtNEQ(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldNEQ(FieldPublishedAt, v))
}

// PublishedAtIn applies the In predicate on the "publishedAt" field.
func PublishedAtIn(vs ...time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldIn(FieldPublishedAt, vs...))
}

// PublishedAtNotIn applies the NotIn predicate on the "publishedAt" field.
func PublishedAtNotIn(vs ...time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldNotIn(FieldPublishedAt, vs...))
}

// PublishedAtGT applies the GT predicate on the "publishedAt" field.
func PublishedAtGT(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldGT(FieldPublishedAt, v))
}

// PublishedAtGTE applies the GTE predicate on the "publishedAt" field.
func PublishedAtGTE(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldGTE(FieldPublishedAt, v))
}

// PublishedAtLT applies the LT predicate on the "publishedAt" field.
func PublishedAtLT(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldLT(FieldPublishedAt, v))
}

// PublishedAtLTE applies the LTE predicate on the "publishedAt" field.
func PublishedAtLTE(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldLTE(FieldPublishedAt, v))
}

// AttemptAtEQ applies the EQ predicate on the "attemptAt" field.
func AttemptAtEQ(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldAttemptAt, v))
}

// AttemptAtNEQ applies the NEQ predicate on the "attemptAt" field.
func AttemptAtNEQ(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldNEQ(FieldAttemptAt, v))
}

// AttemptAtIn applies the In predicate on the "attemptAt" field.
func AttemptAtIn(vs ...time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldIn(FieldAttemptAt, vs...))
}

// AttemptAtNotIn applies the NotIn predicate on the "attemptAt" field.
func AttemptAtNotIn(vs ...time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldNotIn(FieldAttemptAt, vs...))
}

// AttemptAtGT applies the GT predicate on the "attemptAt" field.
func AttemptAtGT(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldGT(FieldAttemptAt, v))
}

// AttemptAtGTE applies the GTE predicate on the "attemptAt" field.
func AttemptAtGTE(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldGTE(FieldAttemptAt, v))
}

// AttemptAtLT applies the LT predicate on the "attemptAt" field.
func AttemptAtLT(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldLT(FieldAttemptAt, v))
}

// AttemptAtLTE applies the LTE predicate on the "attemptAt" field.
func AttemptAtLTE(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldLTE(FieldAttemptAt, v))
}

// LastAttemptedAtEQ applies the EQ predicate on the "lastAttemptedAt" field.
func LastAttemptedAtEQ(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldLastAttemptedAt, v))
}

// LastAttemptedAtNEQ applies the NEQ predicate on the "lastAttemptedAt" field.
func LastAttemptedAtNEQ(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldNEQ(FieldLastAttemptedAt, v))
}

// LastAttemptedAtIn applies the In predicate on the "lastAttemptedAt" field.
func LastAttemptedAtIn(vs ...time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldIn(FieldLastAttemptedAt, vs...))
}

// LastAttemptedAtNotIn applies the NotIn predicate on the "lastAttemptedAt" field.
func LastAttemptedAtNotIn(vs ...time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldNotIn(FieldLastAttemptedAt, vs...))
}

// LastAttemptedAtGT applies the GT predicate on the "lastAttemptedAt" field.
func LastAttemptedAtGT(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldGT(FieldLastAttemptedAt, v))
}

// LastAttemptedAtGTE applies the GTE predicate on the "lastAttemptedAt" field.
func LastAttemptedAtGTE(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldGTE(FieldLastAttemptedAt, v))
}

// LastAttemptedAtLT applies the LT predicate on the "lastAttemptedAt" field.
func LastAttemptedAtLT(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldLT(FieldLastAttemptedAt, v))
}

// LastAttemptedAtLTE applies the LTE predicate on the "lastAttemptedAt" field.
func LastAttemptedAtLTE(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldLTE(FieldLastAttemptedAt, v))
}

// LastAttemptedAtIsNil applies the IsNil predicate on the "lastAttemptedAt" field.
func LastAttemptedAtIsNil() predicate.Delivery {
	return predicate.Delivery(sql.FieldIsNull(FieldLastAttemptedAt))
}

// LastAttemptedAtNotNil applies the NotNil predicate on the "lastAttemptedAt" field.
func LastAttemptedAtNotNil() predicate.Delivery {
	return predicate.Delivery(sql.FieldNotNull(FieldLastAttemptedAt))
}

// AttemptsEQ applies the EQ predicate on the "attempts" field.
func AttemptsEQ(v int) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldAttempts, v))
}

// AttemptsNEQ applies the NEQ predicate on the "attempts" field.
func AttemptsNEQ(v int) predicate.Delivery {
	return predicate.Delivery(sql.FieldNEQ(FieldAttempts, v))
}

// AttemptsIn applies the In predicate on the "attempts" field.
func AttemptsIn(vs ...int) predicate.Delivery {
	return predicate.Delivery(sql.FieldIn(FieldAttempts, vs...))
}

// AttemptsNotIn applies the NotIn predicate on the "attempts" field.
func AttemptsNotIn(vs ...int) predicate.Delivery {
	return predicate.Delivery(sql.FieldNotIn(FieldAttempts, vs...))
}

// AttemptsGT applies the GT predicate on the "attempts" field.
func AttemptsGT(v int) predicate.Delivery {
	return predicate.Delivery(sql.FieldGT(FieldAttempts, v))
}

// AttemptsGTE applies the GTE predicate on the "attempts" field.
func AttemptsGTE(v int) predicate.Delivery {
	return predicate.Delivery(sql.FieldGTE(FieldAttempts, v))
}

// AttemptsLT applies the LT predicate on the "attempts" field.
func AttemptsLT(v int) predicate.Delivery {
	return predicate.Delivery(sql.FieldLT(FieldAttempts, v))
}

// AttemptsLTE applies the LTE predicate on the "attempts" field.
func AttemptsLTE(v int) predicate.Delivery {
	return predicate.Delivery(sql.FieldLTE(FieldAttempts, v))
}

// CompletedAtEQ applies the EQ predicate on the "completedAt" field.
func CompletedAtEQ(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completedAt" field.
func CompletedAtNEQ(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completedAt" field.
func CompletedAtIn(vs ...time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completedAt" field.
func CompletedAtNotIn(vs ...time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completedAt" field.
func CompletedAtGT(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completedAt" field.
func CompletedAtGTE(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completedAt" field.
func CompletedAtLT(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completedAt" field.
func CompletedAtLTE(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completedAt" field.
func CompletedAtIsNil() predicate.Delivery {
	return predicate.Delivery(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completedAt" field.
func CompletedAtNotNil() predicate.Delivery {
	return predicate.Delivery(sql.FieldNotNull(FieldCompletedAt))
}

// ExpiresAtEQ applies the EQ predicate on the "expiresAt" field.
func ExpiresAtEQ(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expiresAt" field.
func ExpiresAtNEQ(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expiresAt" field.
func ExpiresAtIn(vs ...time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expiresAt" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expiresAt" field.
func ExpiresAtGT(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expiresAt" field.
func ExpiresAtGTE(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expiresAt" field.
func ExpiresAtLT(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expiresAt" field.
func ExpiresAtLTE(v time.Time) predicate.Delivery {
	return predicate.Delivery(sql.FieldLTE(FieldExpiresAt, v))
}

// NotBeforeIDEQ applies the EQ predicate on the "notBeforeID" field.
func NotBeforeIDEQ(v uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldEQ(FieldNotBeforeID, v))
}

// NotBeforeIDNEQ applies the NEQ predicate on the "notBeforeID" field.
func NotBeforeIDNEQ(v uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldNEQ(FieldNotBeforeID, v))
}

// NotBeforeIDIn applies the In predicate on the "notBeforeID" field.
func NotBeforeIDIn(vs ...uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldIn(FieldNotBeforeID, vs...))
}

// NotBeforeIDNotIn applies the NotIn predicate on the "notBeforeID" field.
func NotBeforeIDNotIn(vs ...uuid.UUID) predicate.Delivery {
	return predicate.Delivery(sql.FieldNotIn(FieldNotBeforeID, vs...))
}

// NotBeforeIDIsNil applies the IsNil predicate on the "notBeforeID" field.
func NotBeforeIDIsNil() predicate.Delivery {
	return predicate.Delivery(sql.FieldIsNull(FieldNotBeforeID))
}

// NotBeforeIDNotNil applies the NotNil predicate on the "notBeforeID" field.
func NotBeforeIDNotNil() predicate.Delivery {
	return predicate.Delivery(sql.FieldNotNull(FieldNotBeforeID))
}

// HasMessage applies the HasEdge predicate on the "message" edge.
func HasMessage() predicate.Delivery {
	return predicate.Delivery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MessageTable, MessageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMessageWith applies the HasEdge predicate on the "message" edge with a given conditions (other predicates).
func HasMessageWith(preds ...predicate.Message) predicate.Delivery {
	return predicate.Delivery(func(s *sql.Selector) {
		step := newMessageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubscription applies the HasEdge predicate on the "subscription" edge.
func HasSubscription() predicate.Delivery {
	return predicate.Delivery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SubscriptionTable, SubscriptionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubscriptionWith applies the HasEdge predicate on the "subscription" edge with a given conditions (other predicates).
func HasSubscriptionWith(preds ...predicate.Subscription) predicate.Delivery {
	return predicate.Delivery(func(s *sql.Selector) {
		step := newSubscriptionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNotBefore applies the HasEdge predicate on the "notBefore" edge.
func HasNotBefore() predicate.Delivery {
	return predicate.Delivery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NotBeforeTable, NotBeforeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNotBeforeWith applies the HasEdge predicate on the "notBefore" edge with a given conditions (other predicates).
func HasNotBeforeWith(preds ...predicate.Delivery) predicate.Delivery {
	return predicate.Delivery(func(s *sql.Selector) {
		step := newNotBeforeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNextReady applies the HasEdge predicate on the "nextReady" edge.
func HasNextReady() predicate.Delivery {
	return predicate.Delivery(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NextReadyTable, NextReadyColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNextReadyWith applies the HasEdge predicate on the "nextReady" edge with a given conditions (other predicates).
func HasNextReadyWith(preds ...predicate.Delivery) predicate.Delivery {
	return predicate.Delivery(func(s *sql.Selector) {
		step := newNextReadyStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Delivery) predicate.Delivery {
	return predicate.Delivery(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Delivery) predicate.Delivery {
	return predicate.Delivery(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Delivery) predicate.Delivery {
	return predicate.Delivery(sql.NotPredicates(p))
}
