// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"go.6river.tech/mmmbbb/ent/delivery"
	"go.6river.tech/mmmbbb/ent/subscription"
	"go.6river.tech/mmmbbb/ent/topic"
	"go.6river.tech/mmmbbb/internal/sqltypes"
)

// SubscriptionCreate is the builder for creating a Subscription entity.
type SubscriptionCreate struct {
	config
	mutation *SubscriptionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTopicID sets the "topicID" field.
func (_c *SubscriptionCreate) SetTopicID(v uuid.UUID) *SubscriptionCreate {
	_c.mutation.SetTopicID(v)
	return _c
}

// SetName sets the "name" field.
func (_c *SubscriptionCreate) SetName(v string) *SubscriptionCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetCreatedAt sets the "createdAt" field.
func (_c *SubscriptionCreate) SetCreatedAt(v time.Time) *SubscriptionCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "createdAt" field if the given value is not nil.
func (_c *SubscriptionCreate) SetNillableCreatedAt(v *time.Time) *SubscriptionCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetExpiresAt sets the "expiresAt" field.
func (_c *SubscriptionCreate) SetExpiresAt(v time.Time) *SubscriptionCreate {
	_c.mutation.SetExpiresAt(v)
	return _c
}

// SetLive sets the "live" field.
func (_c *SubscriptionCreate) SetLive(v bool) *SubscriptionCreate {
	_c.mutation.SetLive(v)
	return _c
}

// SetNillableLive sets the "live" field if the given value is not nil.
func (_c *SubscriptionCreate) SetNillableLive(v *bool) *SubscriptionCreate {
	if v != nil {
		_c.SetLive(*v)
	}
	return _c
}

// SetDeletedAt sets the "deletedAt" field.
func (_c *SubscriptionCreate) SetDeletedAt(v time.Time) *SubscriptionCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deletedAt" field if the given value is not nil.
func (_c *SubscriptionCreate) SetNillableDeletedAt(v *time.Time) *SubscriptionCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetTTL sets the "ttl" field.
func (_c *SubscriptionCreate) SetTTL(v sqltypes.Interval) *SubscriptionCreate {
	_c.mutation.SetTTL(v)
	return _c
}

// SetMessageTTL sets the "messageTTL" field.
func (_c *SubscriptionCreate) SetMessageTTL(v sqltypes.Interval) *SubscriptionCreate {
	_c.mutation.SetMessageTTL(v)
	return _c
}

// SetOrderedDelivery sets the "orderedDelivery" field.
func (_c *SubscriptionCreate) SetOrderedDelivery(v bool) *SubscriptionCreate {
	_c.mutation.SetOrderedDelivery(v)
	return _c
}

// SetNillableOrderedDelivery sets the "orderedDelivery" field if the given value is not nil.
func (_c *SubscriptionCreate) SetNillableOrderedDelivery(v *bool) *SubscriptionCreate {
	if v != nil {
		_c.SetOrderedDelivery(*v)
	}
	return _c
}

// SetLabels sets the "labels" field.
func (_c *SubscriptionCreate) SetLabels(v map[string]string) *SubscriptionCreate {
	_c.mutation.SetLabels(v)
	return _c
}

// SetMinBackoff sets the "minBackoff" field.
func (_c *SubscriptionCreate) SetMinBackoff(v *sqltypes.Interval) *SubscriptionCreate {
	_c.mutation.SetMinBackoff(v)
	return _c
}

// SetMaxBackoff sets the "maxBackoff" field.
func (_c *SubscriptionCreate) SetMaxBackoff(v *sqltypes.Interval) *SubscriptionCreate {
	_c.mutation.SetMaxBackoff(v)
	return _c
}

// SetPushEndpoint sets the "pushEndpoint" field.
func (_c *SubscriptionCreate) SetPushEndpoint(v string) *SubscriptionCreate {
	_c.mutation.SetPushEndpoint(v)
	return _c
}

// SetNillablePushEndpoint sets the "pushEndpoint" field if the given value is not nil.
func (_c *SubscriptionCreate) SetNillablePushEndpoint(v *string) *SubscriptionCreate {
	if v != nil {
		_c.SetPushEndpoint(*v)
	}
	return _c
}

// SetMessageFilter sets the "messageFilter" field.
func (_c *SubscriptionCreate) SetMessageFilter(v string) *SubscriptionCreate {
	_c.mutation.SetMessageFilter(v)
	return _c
}

// SetNillableMessageFilter sets the "messageFilter" field if the given value is not nil.
func (_c *SubscriptionCreate) SetNillableMessageFilter(v *string) *SubscriptionCreate {
	if v != nil {
		_c.SetMessageFilter(*v)
	}
	return _c
}

// SetMaxDeliveryAttempts sets the "maxDeliveryAttempts" field.
func (_c *SubscriptionCreate) SetMaxDeliveryAttempts(v int32) *SubscriptionCreate {
	_c.mutation.SetMaxDeliveryAttempts(v)
	return _c
}

// SetNillableMaxDeliveryAttempts sets the "maxDeliveryAttempts" field if the given value is not nil.
func (_c *SubscriptionCreate) SetNillableMaxDeliveryAttempts(v *int32) *SubscriptionCreate {
	if v != nil {
		_c.SetMaxDeliveryAttempts(*v)
	}
	return _c
}

// SetDeadLetterTopicID sets the "deadLetterTopicID" field.
func (_c *SubscriptionCreate) SetDeadLetterTopicID(v uuid.UUID) *SubscriptionCreate {
	_c.mutation.SetDeadLetterTopicID(v)
	return _c
}

// SetNillableDeadLetterTopicID sets the "deadLetterTopicID" field if the given value is not nil.
func (_c *SubscriptionCreate) SetNillableDeadLetterTopicID(v *uuid.UUID) *SubscriptionCreate {
	if v != nil {
		_c.SetDeadLetterTopicID(*v)
	}
	return _c
}

// SetDeliveryDelay sets the "deliveryDelay" field.
func (_c *SubscriptionCreate) SetDeliveryDelay(v sqltypes.Interval) *SubscriptionCreate {
	_c.mutation.SetDeliveryDelay(v)
	return _c
}

// SetNillableDeliveryDelay sets the "deliveryDelay" field if the given value is not nil.
func (_c *SubscriptionCreate) SetNillableDeliveryDelay(v *sqltypes.Interval) *SubscriptionCreate {
	if v != nil {
		_c.SetDeliveryDelay(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *SubscriptionCreate) SetID(v uuid.UUID) *SubscriptionCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *SubscriptionCreate) SetNillableID(v *uuid.UUID) *SubscriptionCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetTopic sets the "topic" edge to the Topic entity.
func (_c *SubscriptionCreate) SetTopic(v *Topic) *SubscriptionCreate {
	return _c.SetTopicID(v.ID)
}

// AddDeliveryIDs adds the "deliveries" edge to the Delivery entity by IDs.
func (_c *SubscriptionCreate) AddDeliveryIDs(ids ...uuid.UUID) *SubscriptionCreate {
	_c.mutation.AddDeliveryIDs(ids...)
	return _c
}

// AddDeliveries adds the "deliveries" edges to the Delivery entity.
func (_c *SubscriptionCreate) AddDeliveries(v ...*Delivery) *SubscriptionCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddDeliveryIDs(ids...)
}

// SetDeadLetterTopic sets the "deadLetterTopic" edge to the Topic entity.
func (_c *SubscriptionCreate) SetDeadLetterTopic(v *Topic) *SubscriptionCreate {
	return _c.SetDeadLetterTopicID(v.ID)
}

// Mutation returns the SubscriptionMutation object of the builder.
func (_c *SubscriptionCreate) Mutation() *SubscriptionMutation {
	return _c.mutation
}

// Save creates the Subscription in the database.
func (_c *SubscriptionCreate) Save(ctx context.Context) (*Subscription, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *SubscriptionCreate) SaveX(ctx context.Context) *Subscription {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SubscriptionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SubscriptionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *SubscriptionCreate) defaults() error {
	if _, ok := _c.mutation.CreatedAt(); !ok {
		if subscription.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized subscription.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := subscription.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.Live(); !ok {
		v := subscription.DefaultLive
		_c.mutation.SetLive(v)
	}
	if _, ok := _c.mutation.OrderedDelivery(); !ok {
		v := subscription.DefaultOrderedDelivery
		_c.mutation.SetOrderedDelivery(v)
	}
	if _, ok := _c.mutation.DeliveryDelay(); !ok {
		v := subscription.DefaultDeliveryDelay
		_c.mutation.SetDeliveryDelay(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if subscription.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized subscription.DefaultID (forgotten import ent/runtime?)")
		}
		v := subscription.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *SubscriptionCreate) check() error {
	if _, ok := _c.mutation.TopicID(); !ok {
		return &ValidationError{Name: "topicID", err: errors.New(`ent: missing required field "Subscription.topicID"`)}
	}
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Subscription.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := subscription.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Subscription.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "createdAt", err: errors.New(`ent: missing required field "Subscription.createdAt"`)}
	}
	if _, ok := _c.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expiresAt", err: errors.New(`ent: missing required field "Subscription.expiresAt"`)}
	}
	if _, ok := _c.mutation.TTL(); !ok {
		return &ValidationError{Name: "ttl", err: errors.New(`ent: missing required field "Subscription.ttl"`)}
	}
	if _, ok := _c.mutation.MessageTTL(); !ok {
		return &ValidationError{Name: "messageTTL", err: errors.New(`ent: missing required field "Subscription.messageTTL"`)}
	}
	if _, ok := _c.mutation.DeliveryDelay(); !ok {
		return &ValidationError{Name: "deliveryDelay", err: errors.New(`ent: missing required field "Subscription.deliveryDelay"`)}
	}
	if len(_c.mutation.TopicIDs()) == 0 {
		return &ValidationError{Name: "topic", err: errors.New(`ent: missing required edge "Subscription.topic"`)}
	}
	return nil
}

func (_c *SubscriptionCreate) sqlSave(ctx context.Context) (*Subscription, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *SubscriptionCreate) createSpec() (*Subscription, *sqlgraph.CreateSpec) {
	var (
		_node = &Subscription{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(subscription.Table, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = _c.conflict
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(subscription.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(subscription.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.ExpiresAt(); ok {
		_spec.SetField(subscription.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := _c.mutation.Live(); ok {
		_spec.SetField(subscription.FieldLive, field.TypeBool, value)
		_node.Live = &value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(subscription.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := _c.mutation.TTL(); ok {
		_spec.SetField(subscription.FieldTTL, field.TypeString, value)
		_node.TTL = value
	}
	if value, ok := _c.mutation.MessageTTL(); ok {
		_spec.SetField(subscription.FieldMessageTTL, field.TypeString, value)
		_node.MessageTTL = value
	}
	if value, ok := _c.mutation.OrderedDelivery(); ok {
		_spec.SetField(subscription.FieldOrderedDelivery, field.TypeBool, value)
		_node.OrderedDelivery = value
	}
	if value, ok := _c.mutation.Labels(); ok {
		_spec.SetField(subscription.FieldLabels, field.TypeJSON, value)
		_node.Labels = value
	}
	if value, ok := _c.mutation.MinBackoff(); ok {
		_spec.SetField(subscription.FieldMinBackoff, field.TypeString, value)
		_node.MinBackoff = value
	}
	if value, ok := _c.mutation.MaxBackoff(); ok {
		_spec.SetField(subscription.FieldMaxBackoff, field.TypeString, value)
		_node.MaxBackoff = value
	}
	if value, ok := _c.mutation.PushEndpoint(); ok {
		_spec.SetField(subscription.FieldPushEndpoint, field.TypeString, value)
		_node.PushEndpoint = &value
	}
	if value, ok := _c.mutation.MessageFilter(); ok {
		_spec.SetField(subscription.FieldMessageFilter, field.TypeString, value)
		_node.MessageFilter = &value
	}
	if value, ok := _c.mutation.MaxDeliveryAttempts(); ok {
		_spec.SetField(subscription.FieldMaxDeliveryAttempts, field.TypeInt32, value)
		_node.MaxDeliveryAttempts = &value
	}
	if value, ok := _c.mutation.DeliveryDelay(); ok {
		_spec.SetField(subscription.FieldDeliveryDelay, field.TypeOther, value)
		_node.DeliveryDelay = value
	}
	if nodes := _c.mutation.TopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscription.TopicTable,
			Columns: []string{subscription.TopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TopicID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DeliveriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   subscription.DeliveriesTable,
			Columns: []string{subscription.DeliveriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(delivery.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.DeadLetterTopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   subscription.DeadLetterTopicTable,
			Columns: []string{subscription.DeadLetterTopicColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(topic.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DeadLetterTopicID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Subscription.Create().
//		SetTopicID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionUpsert) {
//			SetTopicID(v+v).
//		}).
//		Exec(ctx)
func (_c *SubscriptionCreate) OnConflict(opts ...sql.ConflictOption) *SubscriptionUpsertOne {
	_c.conflict = opts
	return &SubscriptionUpsertOne{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SubscriptionCreate) OnConflictColumns(columns ...string) *SubscriptionUpsertOne {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionUpsertOne{
		create: _c,
	}
}

type (
	// SubscriptionUpsertOne is the builder for "upsert"-ing
	//  one Subscription node.
	SubscriptionUpsertOne struct {
		create *SubscriptionCreate
	}

	// SubscriptionUpsert is the "OnConflict" setter.
	SubscriptionUpsert struct {
		*sql.UpdateSet
	}
)

// SetTopicID sets the "topicID" field.
func (u *SubscriptionUpsert) SetTopicID(v uuid.UUID) *SubscriptionUpsert {
	u.Set(subscription.FieldTopicID, v)
	return u
}

// UpdateTopicID sets the "topicID" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateTopicID() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldTopicID)
	return u
}

// SetExpiresAt sets the "expiresAt" field.
func (u *SubscriptionUpsert) SetExpiresAt(v time.Time) *SubscriptionUpsert {
	u.Set(subscription.FieldExpiresAt, v)
	return u
}

// UpdateExpiresAt sets the "expiresAt" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateExpiresAt() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldExpiresAt)
	return u
}

// SetLive sets the "live" field.
func (u *SubscriptionUpsert) SetLive(v bool) *SubscriptionUpsert {
	u.Set(subscription.FieldLive, v)
	return u
}

// UpdateLive sets the "live" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateLive() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldLive)
	return u
}

// ClearLive clears the value of the "live" field.
func (u *SubscriptionUpsert) ClearLive() *SubscriptionUpsert {
	u.SetNull(subscription.FieldLive)
	return u
}

// SetDeletedAt sets the "deletedAt" field.
func (u *SubscriptionUpsert) SetDeletedAt(v time.Time) *SubscriptionUpsert {
	u.Set(subscription.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deletedAt" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateDeletedAt() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (u *SubscriptionUpsert) ClearDeletedAt() *SubscriptionUpsert {
	u.SetNull(subscription.FieldDeletedAt)
	return u
}

// SetTTL sets the "ttl" field.
func (u *SubscriptionUpsert) SetTTL(v sqltypes.Interval) *SubscriptionUpsert {
	u.Set(subscription.FieldTTL, v)
	return u
}

// UpdateTTL sets the "ttl" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateTTL() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldTTL)
	return u
}

// SetMessageTTL sets the "messageTTL" field.
func (u *SubscriptionUpsert) SetMessageTTL(v sqltypes.Interval) *SubscriptionUpsert {
	u.Set(subscription.FieldMessageTTL, v)
	return u
}

// UpdateMessageTTL sets the "messageTTL" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateMessageTTL() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldMessageTTL)
	return u
}

// SetOrderedDelivery sets the "orderedDelivery" field.
func (u *SubscriptionUpsert) SetOrderedDelivery(v bool) *SubscriptionUpsert {
	u.Set(subscription.FieldOrderedDelivery, v)
	return u
}

// UpdateOrderedDelivery sets the "orderedDelivery" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateOrderedDelivery() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldOrderedDelivery)
	return u
}

// ClearOrderedDelivery clears the value of the "orderedDelivery" field.
func (u *SubscriptionUpsert) ClearOrderedDelivery() *SubscriptionUpsert {
	u.SetNull(subscription.FieldOrderedDelivery)
	return u
}

// SetLabels sets the "labels" field.
func (u *SubscriptionUpsert) SetLabels(v map[string]string) *SubscriptionUpsert {
	u.Set(subscription.FieldLabels, v)
	return u
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateLabels() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldLabels)
	return u
}

// ClearLabels clears the value of the "labels" field.
func (u *SubscriptionUpsert) ClearLabels() *SubscriptionUpsert {
	u.SetNull(subscription.FieldLabels)
	return u
}

// SetMinBackoff sets the "minBackoff" field.
func (u *SubscriptionUpsert) SetMinBackoff(v *sqltypes.Interval) *SubscriptionUpsert {
	u.Set(subscription.FieldMinBackoff, v)
	return u
}

// UpdateMinBackoff sets the "minBackoff" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateMinBackoff() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldMinBackoff)
	return u
}

// ClearMinBackoff clears the value of the "minBackoff" field.
func (u *SubscriptionUpsert) ClearMinBackoff() *SubscriptionUpsert {
	u.SetNull(subscription.FieldMinBackoff)
	return u
}

// SetMaxBackoff sets the "maxBackoff" field.
func (u *SubscriptionUpsert) SetMaxBackoff(v *sqltypes.Interval) *SubscriptionUpsert {
	u.Set(subscription.FieldMaxBackoff, v)
	return u
}

// UpdateMaxBackoff sets the "maxBackoff" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateMaxBackoff() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldMaxBackoff)
	return u
}

// ClearMaxBackoff clears the value of the "maxBackoff" field.
func (u *SubscriptionUpsert) ClearMaxBackoff() *SubscriptionUpsert {
	u.SetNull(subscription.FieldMaxBackoff)
	return u
}

// SetPushEndpoint sets the "pushEndpoint" field.
func (u *SubscriptionUpsert) SetPushEndpoint(v string) *SubscriptionUpsert {
	u.Set(subscription.FieldPushEndpoint, v)
	return u
}

// UpdatePushEndpoint sets the "pushEndpoint" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdatePushEndpoint() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldPushEndpoint)
	return u
}

// ClearPushEndpoint clears the value of the "pushEndpoint" field.
func (u *SubscriptionUpsert) ClearPushEndpoint() *SubscriptionUpsert {
	u.SetNull(subscription.FieldPushEndpoint)
	return u
}

// SetMessageFilter sets the "messageFilter" field.
func (u *SubscriptionUpsert) SetMessageFilter(v string) *SubscriptionUpsert {
	u.Set(subscription.FieldMessageFilter, v)
	return u
}

// UpdateMessageFilter sets the "messageFilter" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateMessageFilter() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldMessageFilter)
	return u
}

// ClearMessageFilter clears the value of the "messageFilter" field.
func (u *SubscriptionUpsert) ClearMessageFilter() *SubscriptionUpsert {
	u.SetNull(subscription.FieldMessageFilter)
	return u
}

// SetMaxDeliveryAttempts sets the "maxDeliveryAttempts" field.
func (u *SubscriptionUpsert) SetMaxDeliveryAttempts(v int32) *SubscriptionUpsert {
	u.Set(subscription.FieldMaxDeliveryAttempts, v)
	return u
}

// UpdateMaxDeliveryAttempts sets the "maxDeliveryAttempts" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateMaxDeliveryAttempts() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldMaxDeliveryAttempts)
	return u
}

// AddMaxDeliveryAttempts adds v to the "maxDeliveryAttempts" field.
func (u *SubscriptionUpsert) AddMaxDeliveryAttempts(v int32) *SubscriptionUpsert {
	u.Add(subscription.FieldMaxDeliveryAttempts, v)
	return u
}

// ClearMaxDeliveryAttempts clears the value of the "maxDeliveryAttempts" field.
func (u *SubscriptionUpsert) ClearMaxDeliveryAttempts() *SubscriptionUpsert {
	u.SetNull(subscription.FieldMaxDeliveryAttempts)
	return u
}

// SetDeadLetterTopicID sets the "deadLetterTopicID" field.
func (u *SubscriptionUpsert) SetDeadLetterTopicID(v uuid.UUID) *SubscriptionUpsert {
	u.Set(subscription.FieldDeadLetterTopicID, v)
	return u
}

// UpdateDeadLetterTopicID sets the "deadLetterTopicID" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateDeadLetterTopicID() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldDeadLetterTopicID)
	return u
}

// ClearDeadLetterTopicID clears the value of the "deadLetterTopicID" field.
func (u *SubscriptionUpsert) ClearDeadLetterTopicID() *SubscriptionUpsert {
	u.SetNull(subscription.FieldDeadLetterTopicID)
	return u
}

// SetDeliveryDelay sets the "deliveryDelay" field.
func (u *SubscriptionUpsert) SetDeliveryDelay(v sqltypes.Interval) *SubscriptionUpsert {
	u.Set(subscription.FieldDeliveryDelay, v)
	return u
}

// UpdateDeliveryDelay sets the "deliveryDelay" field to the value that was provided on create.
func (u *SubscriptionUpsert) UpdateDeliveryDelay() *SubscriptionUpsert {
	u.SetExcluded(subscription.FieldDeliveryDelay)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionUpsertOne) UpdateNewValues() *SubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subscription.FieldID)
		}
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(subscription.FieldName)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(subscription.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Subscription.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubscriptionUpsertOne) Ignore() *SubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionUpsertOne) DoNothing() *SubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionCreate.OnConflict
// documentation for more info.
func (u *SubscriptionUpsertOne) Update(set func(*SubscriptionUpsert)) *SubscriptionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetTopicID sets the "topicID" field.
func (u *SubscriptionUpsertOne) SetTopicID(v uuid.UUID) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetTopicID(v)
	})
}

// UpdateTopicID sets the "topicID" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateTopicID() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateTopicID()
	})
}

// SetExpiresAt sets the "expiresAt" field.
func (u *SubscriptionUpsertOne) SetExpiresAt(v time.Time) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expiresAt" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateExpiresAt() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetLive sets the "live" field.
func (u *SubscriptionUpsertOne) SetLive(v bool) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetLive(v)
	})
}

// UpdateLive sets the "live" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateLive() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateLive()
	})
}

// ClearLive clears the value of the "live" field.
func (u *SubscriptionUpsertOne) ClearLive() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearLive()
	})
}

// SetDeletedAt sets the "deletedAt" field.
func (u *SubscriptionUpsertOne) SetDeletedAt(v time.Time) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deletedAt" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateDeletedAt() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (u *SubscriptionUpsertOne) ClearDeletedAt() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTTL sets the "ttl" field.
func (u *SubscriptionUpsertOne) SetTTL(v sqltypes.Interval) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetTTL(v)
	})
}

// UpdateTTL sets the "ttl" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateTTL() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateTTL()
	})
}

// SetMessageTTL sets the "messageTTL" field.
func (u *SubscriptionUpsertOne) SetMessageTTL(v sqltypes.Interval) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetMessageTTL(v)
	})
}

// UpdateMessageTTL sets the "messageTTL" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateMessageTTL() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateMessageTTL()
	})
}

// SetOrderedDelivery sets the "orderedDelivery" field.
func (u *SubscriptionUpsertOne) SetOrderedDelivery(v bool) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetOrderedDelivery(v)
	})
}

// UpdateOrderedDelivery sets the "orderedDelivery" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateOrderedDelivery() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateOrderedDelivery()
	})
}

// ClearOrderedDelivery clears the value of the "orderedDelivery" field.
func (u *SubscriptionUpsertOne) ClearOrderedDelivery() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearOrderedDelivery()
	})
}

// SetLabels sets the "labels" field.
func (u *SubscriptionUpsertOne) SetLabels(v map[string]string) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateLabels() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *SubscriptionUpsertOne) ClearLabels() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearLabels()
	})
}

// SetMinBackoff sets the "minBackoff" field.
func (u *SubscriptionUpsertOne) SetMinBackoff(v *sqltypes.Interval) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetMinBackoff(v)
	})
}

// UpdateMinBackoff sets the "minBackoff" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateMinBackoff() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateMinBackoff()
	})
}

// ClearMinBackoff clears the value of the "minBackoff" field.
func (u *SubscriptionUpsertOne) ClearMinBackoff() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearMinBackoff()
	})
}

// SetMaxBackoff sets the "maxBackoff" field.
func (u *SubscriptionUpsertOne) SetMaxBackoff(v *sqltypes.Interval) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetMaxBackoff(v)
	})
}

// UpdateMaxBackoff sets the "maxBackoff" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateMaxBackoff() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateMaxBackoff()
	})
}

// ClearMaxBackoff clears the value of the "maxBackoff" field.
func (u *SubscriptionUpsertOne) ClearMaxBackoff() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearMaxBackoff()
	})
}

// SetPushEndpoint sets the "pushEndpoint" field.
func (u *SubscriptionUpsertOne) SetPushEndpoint(v string) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetPushEndpoint(v)
	})
}

// UpdatePushEndpoint sets the "pushEndpoint" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdatePushEndpoint() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdatePushEndpoint()
	})
}

// ClearPushEndpoint clears the value of the "pushEndpoint" field.
func (u *SubscriptionUpsertOne) ClearPushEndpoint() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearPushEndpoint()
	})
}

// SetMessageFilter sets the "messageFilter" field.
func (u *SubscriptionUpsertOne) SetMessageFilter(v string) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetMessageFilter(v)
	})
}

// UpdateMessageFilter sets the "messageFilter" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateMessageFilter() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateMessageFilter()
	})
}

// ClearMessageFilter clears the value of the "messageFilter" field.
func (u *SubscriptionUpsertOne) ClearMessageFilter() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearMessageFilter()
	})
}

// SetMaxDeliveryAttempts sets the "maxDeliveryAttempts" field.
func (u *SubscriptionUpsertOne) SetMaxDeliveryAttempts(v int32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetMaxDeliveryAttempts(v)
	})
}

// AddMaxDeliveryAttempts adds v to the "maxDeliveryAttempts" field.
func (u *SubscriptionUpsertOne) AddMaxDeliveryAttempts(v int32) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddMaxDeliveryAttempts(v)
	})
}

// UpdateMaxDeliveryAttempts sets the "maxDeliveryAttempts" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateMaxDeliveryAttempts() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateMaxDeliveryAttempts()
	})
}

// ClearMaxDeliveryAttempts clears the value of the "maxDeliveryAttempts" field.
func (u *SubscriptionUpsertOne) ClearMaxDeliveryAttempts() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearMaxDeliveryAttempts()
	})
}

// SetDeadLetterTopicID sets the "deadLetterTopicID" field.
func (u *SubscriptionUpsertOne) SetDeadLetterTopicID(v uuid.UUID) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDeadLetterTopicID(v)
	})
}

// UpdateDeadLetterTopicID sets the "deadLetterTopicID" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateDeadLetterTopicID() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDeadLetterTopicID()
	})
}

// ClearDeadLetterTopicID clears the value of the "deadLetterTopicID" field.
func (u *SubscriptionUpsertOne) ClearDeadLetterTopicID() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearDeadLetterTopicID()
	})
}

// SetDeliveryDelay sets the "deliveryDelay" field.
func (u *SubscriptionUpsertOne) SetDeliveryDelay(v sqltypes.Interval) *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDeliveryDelay(v)
	})
}

// UpdateDeliveryDelay sets the "deliveryDelay" field to the value that was provided on create.
func (u *SubscriptionUpsertOne) UpdateDeliveryDelay() *SubscriptionUpsertOne {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDeliveryDelay()
	})
}

// Exec executes the query.
func (u *SubscriptionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubscriptionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubscriptionUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SubscriptionUpsertOne.ID is not supported by MySQL driver. Use SubscriptionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubscriptionUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubscriptionCreateBulk is the builder for creating many Subscription entities in bulk.
type SubscriptionCreateBulk struct {
	config
	err      error
	builders []*SubscriptionCreate
	conflict []sql.ConflictOption
}

// Save creates the Subscription entities in the database.
func (_c *SubscriptionCreateBulk) Save(ctx context.Context) ([]*Subscription, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Subscription, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = _c.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *SubscriptionCreateBulk) SaveX(ctx context.Context) []*Subscription {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *SubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *SubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Subscription.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubscriptionUpsert) {
//			SetTopicID(v+v).
//		}).
//		Exec(ctx)
func (_c *SubscriptionCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubscriptionUpsertBulk {
	_c.conflict = opts
	return &SubscriptionUpsertBulk{
		create: _c,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (_c *SubscriptionCreateBulk) OnConflictColumns(columns ...string) *SubscriptionUpsertBulk {
	_c.conflict = append(_c.conflict, sql.ConflictColumns(columns...))
	return &SubscriptionUpsertBulk{
		create: _c,
	}
}

// SubscriptionUpsertBulk is the builder for "upsert"-ing
// a bulk of Subscription nodes.
type SubscriptionUpsertBulk struct {
	create *SubscriptionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subscription.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubscriptionUpsertBulk) UpdateNewValues() *SubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subscription.FieldID)
			}
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(subscription.FieldName)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(subscription.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Subscription.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubscriptionUpsertBulk) Ignore() *SubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubscriptionUpsertBulk) DoNothing() *SubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubscriptionCreateBulk.OnConflict
// documentation for more info.
func (u *SubscriptionUpsertBulk) Update(set func(*SubscriptionUpsert)) *SubscriptionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubscriptionUpsert{UpdateSet: update})
	}))
	return u
}

// SetTopicID sets the "topicID" field.
func (u *SubscriptionUpsertBulk) SetTopicID(v uuid.UUID) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetTopicID(v)
	})
}

// UpdateTopicID sets the "topicID" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateTopicID() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateTopicID()
	})
}

// SetExpiresAt sets the "expiresAt" field.
func (u *SubscriptionUpsertBulk) SetExpiresAt(v time.Time) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetExpiresAt(v)
	})
}

// UpdateExpiresAt sets the "expiresAt" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateExpiresAt() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateExpiresAt()
	})
}

// SetLive sets the "live" field.
func (u *SubscriptionUpsertBulk) SetLive(v bool) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetLive(v)
	})
}

// UpdateLive sets the "live" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateLive() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateLive()
	})
}

// ClearLive clears the value of the "live" field.
func (u *SubscriptionUpsertBulk) ClearLive() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearLive()
	})
}

// SetDeletedAt sets the "deletedAt" field.
func (u *SubscriptionUpsertBulk) SetDeletedAt(v time.Time) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deletedAt" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateDeletedAt() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deletedAt" field.
func (u *SubscriptionUpsertBulk) ClearDeletedAt() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearDeletedAt()
	})
}

// SetTTL sets the "ttl" field.
func (u *SubscriptionUpsertBulk) SetTTL(v sqltypes.Interval) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetTTL(v)
	})
}

// UpdateTTL sets the "ttl" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateTTL() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateTTL()
	})
}

// SetMessageTTL sets the "messageTTL" field.
func (u *SubscriptionUpsertBulk) SetMessageTTL(v sqltypes.Interval) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetMessageTTL(v)
	})
}

// UpdateMessageTTL sets the "messageTTL" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateMessageTTL() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateMessageTTL()
	})
}

// SetOrderedDelivery sets the "orderedDelivery" field.
func (u *SubscriptionUpsertBulk) SetOrderedDelivery(v bool) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetOrderedDelivery(v)
	})
}

// UpdateOrderedDelivery sets the "orderedDelivery" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateOrderedDelivery() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateOrderedDelivery()
	})
}

// ClearOrderedDelivery clears the value of the "orderedDelivery" field.
func (u *SubscriptionUpsertBulk) ClearOrderedDelivery() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearOrderedDelivery()
	})
}

// SetLabels sets the "labels" field.
func (u *SubscriptionUpsertBulk) SetLabels(v map[string]string) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetLabels(v)
	})
}

// UpdateLabels sets the "labels" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateLabels() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateLabels()
	})
}

// ClearLabels clears the value of the "labels" field.
func (u *SubscriptionUpsertBulk) ClearLabels() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearLabels()
	})
}

// SetMinBackoff sets the "minBackoff" field.
func (u *SubscriptionUpsertBulk) SetMinBackoff(v *sqltypes.Interval) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetMinBackoff(v)
	})
}

// UpdateMinBackoff sets the "minBackoff" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateMinBackoff() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateMinBackoff()
	})
}

// ClearMinBackoff clears the value of the "minBackoff" field.
func (u *SubscriptionUpsertBulk) ClearMinBackoff() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearMinBackoff()
	})
}

// SetMaxBackoff sets the "maxBackoff" field.
func (u *SubscriptionUpsertBulk) SetMaxBackoff(v *sqltypes.Interval) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetMaxBackoff(v)
	})
}

// UpdateMaxBackoff sets the "maxBackoff" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateMaxBackoff() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateMaxBackoff()
	})
}

// ClearMaxBackoff clears the value of the "maxBackoff" field.
func (u *SubscriptionUpsertBulk) ClearMaxBackoff() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearMaxBackoff()
	})
}

// SetPushEndpoint sets the "pushEndpoint" field.
func (u *SubscriptionUpsertBulk) SetPushEndpoint(v string) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetPushEndpoint(v)
	})
}

// UpdatePushEndpoint sets the "pushEndpoint" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdatePushEndpoint() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdatePushEndpoint()
	})
}

// ClearPushEndpoint clears the value of the "pushEndpoint" field.
func (u *SubscriptionUpsertBulk) ClearPushEndpoint() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearPushEndpoint()
	})
}

// SetMessageFilter sets the "messageFilter" field.
func (u *SubscriptionUpsertBulk) SetMessageFilter(v string) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetMessageFilter(v)
	})
}

// UpdateMessageFilter sets the "messageFilter" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateMessageFilter() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateMessageFilter()
	})
}

// ClearMessageFilter clears the value of the "messageFilter" field.
func (u *SubscriptionUpsertBulk) ClearMessageFilter() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearMessageFilter()
	})
}

// SetMaxDeliveryAttempts sets the "maxDeliveryAttempts" field.
func (u *SubscriptionUpsertBulk) SetMaxDeliveryAttempts(v int32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetMaxDeliveryAttempts(v)
	})
}

// AddMaxDeliveryAttempts adds v to the "maxDeliveryAttempts" field.
func (u *SubscriptionUpsertBulk) AddMaxDeliveryAttempts(v int32) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.AddMaxDeliveryAttempts(v)
	})
}

// UpdateMaxDeliveryAttempts sets the "maxDeliveryAttempts" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateMaxDeliveryAttempts() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateMaxDeliveryAttempts()
	})
}

// ClearMaxDeliveryAttempts clears the value of the "maxDeliveryAttempts" field.
func (u *SubscriptionUpsertBulk) ClearMaxDeliveryAttempts() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearMaxDeliveryAttempts()
	})
}

// SetDeadLetterTopicID sets the "deadLetterTopicID" field.
func (u *SubscriptionUpsertBulk) SetDeadLetterTopicID(v uuid.UUID) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDeadLetterTopicID(v)
	})
}

// UpdateDeadLetterTopicID sets the "deadLetterTopicID" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateDeadLetterTopicID() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDeadLetterTopicID()
	})
}

// ClearDeadLetterTopicID clears the value of the "deadLetterTopicID" field.
func (u *SubscriptionUpsertBulk) ClearDeadLetterTopicID() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.ClearDeadLetterTopicID()
	})
}

// SetDeliveryDelay sets the "deliveryDelay" field.
func (u *SubscriptionUpsertBulk) SetDeliveryDelay(v sqltypes.Interval) *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.SetDeliveryDelay(v)
	})
}

// UpdateDeliveryDelay sets the "deliveryDelay" field to the value that was provided on create.
func (u *SubscriptionUpsertBulk) UpdateDeliveryDelay() *SubscriptionUpsertBulk {
	return u.Update(func(s *SubscriptionUpsert) {
		s.UpdateDeliveryDelay()
	})
}

// Exec executes the query.
func (u *SubscriptionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SubscriptionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubscriptionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubscriptionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
