// Code generated by ent, DO NOT EDIT.

package subscription

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"go.6river.tech/mmmbbb/ent/predicate"
	"go.6river.tech/mmmbbb/internal/sqltypes"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldID, id))
}

// TopicID applies equality check predicate on the "topicID" field. It's identical to TopicIDEQ.
func TopicID(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldTopicID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldName, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCreatedAt, v))
}

// ExpiresAt applies equality check predicate on the "expiresAt" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldExpiresAt, v))
}

// Live applies equality check predicate on the "live" field. It's identical to LiveEQ.
func Live(v bool) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldLive, v))
}

// DeletedAt applies equality check predicate on the "deletedAt" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldDeletedAt, v))
}

// TTL applies equality check predicate on the "ttl" field. It's identical to TTLEQ.
func TTL(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldTTL, v))
}

// MessageTTL applies equality check predicate on the "messageTTL" field. It's identical to MessageTTLEQ.
func MessageTTL(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldMessageTTL, v))
}

// OrderedDelivery applies equality check predicate on the "orderedDelivery" field. It's identical to OrderedDeliveryEQ.
func OrderedDelivery(v bool) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldOrderedDelivery, v))
}

// MinBackoff applies equality check predicate on the "minBackoff" field. It's identical to MinBackoffEQ.
func MinBackoff(v *sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldMinBackoff, v))
}

// MaxBackoff applies equality check predicate on the "maxBackoff" field. It's identical to MaxBackoffEQ.
func MaxBackoff(v *sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldMaxBackoff, v))
}

// PushEndpoint applies equality check predicate on the "pushEndpoint" field. It's identical to PushEndpointEQ.
func PushEndpoint(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPushEndpoint, v))
}

// MessageFilter applies equality check predicate on the "messageFilter" field. It's identical to MessageFilterEQ.
func MessageFilter(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldMessageFilter, v))
}

// MaxDeliveryAttempts applies equality check predicate on the "maxDeliveryAttempts" field. It's identical to MaxDeliveryAttemptsEQ.
func MaxDeliveryAttempts(v int32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldMaxDeliveryAttempts, v))
}

// DeadLetterTopicID applies equality check predicate on the "deadLetterTopicID" field. It's identical to DeadLetterTopicIDEQ.
func DeadLetterTopicID(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldDeadLetterTopicID, v))
}

// DeliveryDelay applies equality check predicate on the "deliveryDelay" field. It's identical to DeliveryDelayEQ.
func DeliveryDelay(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldDeliveryDelay, v))
}

// TopicIDEQ applies the EQ predicate on the "topicID" field.
func TopicIDEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldTopicID, v))
}

// TopicIDNEQ applies the NEQ predicate on the "topicID" field.
func TopicIDNEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldTopicID, v))
}

// TopicIDIn applies the In predicate on the "topicID" field.
func TopicIDIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldTopicID, vs...))
}

// TopicIDNotIn applies the NotIn predicate on the "topicID" field.
func TopicIDNotIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldTopicID, vs...))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldName, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldCreatedAt, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expiresAt" field.
func ExpiresAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expiresAt" field.
func ExpiresAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expiresAt" field.
func ExpiresAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expiresAt" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expiresAt" field.
func ExpiresAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expiresAt" field.
func ExpiresAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expiresAt" field.
func ExpiresAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expiresAt" field.
func ExpiresAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldExpiresAt, v))
}

// LiveEQ applies the EQ predicate on the "live" field.
func LiveEQ(v bool) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldLive, v))
}

// LiveNEQ applies the NEQ predicate on the "live" field.
func LiveNEQ(v bool) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldLive, v))
}

// LiveIsNil applies the IsNil predicate on the "live" field.
func LiveIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldLive))
}

// LiveNotNil applies the NotNil predicate on the "live" field.
func LiveNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldLive))
}

// DeletedAtEQ applies the EQ predicate on the "deletedAt" field.
func DeletedAtEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deletedAt" field.
func DeletedAtNEQ(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deletedAt" field.
func DeletedAtIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deletedAt" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deletedAt" field.
func DeletedAtGT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deletedAt" field.
func DeletedAtGTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deletedAt" field.
func DeletedAtLT(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deletedAt" field.
func DeletedAtLTE(v time.Time) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deletedAt" field.
func DeletedAtIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deletedAt" field.
func DeletedAtNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldDeletedAt))
}

// TTLEQ applies the EQ predicate on the "ttl" field.
func TTLEQ(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldTTL, v))
}

// TTLNEQ applies the NEQ predicate on the "ttl" field.
func TTLNEQ(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldTTL, v))
}

// TTLIn applies the In predicate on the "ttl" field.
func TTLIn(vs ...sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldTTL, vs...))
}

// TTLNotIn applies the NotIn predicate on the "ttl" field.
func TTLNotIn(vs ...sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldTTL, vs...))
}

// TTLGT applies the GT predicate on the "ttl" field.
func TTLGT(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldTTL, v))
}

// TTLGTE applies the GTE predicate on the "ttl" field.
func TTLGTE(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldTTL, v))
}

// TTLLT applies the LT predicate on the "ttl" field.
func TTLLT(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldTTL, v))
}

// TTLLTE applies the LTE predicate on the "ttl" field.
func TTLLTE(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldTTL, v))
}

// TTLContains applies the Contains predicate on the "ttl" field.
func TTLContains(v sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldContains(FieldTTL, vc))
}

// TTLHasPrefix applies the HasPrefix predicate on the "ttl" field.
func TTLHasPrefix(v sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldHasPrefix(FieldTTL, vc))
}

// TTLHasSuffix applies the HasSuffix predicate on the "ttl" field.
func TTLHasSuffix(v sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldHasSuffix(FieldTTL, vc))
}

// TTLEqualFold applies the EqualFold predicate on the "ttl" field.
func TTLEqualFold(v sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldEqualFold(FieldTTL, vc))
}

// TTLContainsFold applies the ContainsFold predicate on the "ttl" field.
func TTLContainsFold(v sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldContainsFold(FieldTTL, vc))
}

// MessageTTLEQ applies the EQ predicate on the "messageTTL" field.
func MessageTTLEQ(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldMessageTTL, v))
}

// MessageTTLNEQ applies the NEQ predicate on the "messageTTL" field.
func MessageTTLNEQ(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldMessageTTL, v))
}

// MessageTTLIn applies the In predicate on the "messageTTL" field.
func MessageTTLIn(vs ...sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldMessageTTL, vs...))
}

// MessageTTLNotIn applies the NotIn predicate on the "messageTTL" field.
func MessageTTLNotIn(vs ...sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldMessageTTL, vs...))
}

// MessageTTLGT applies the GT predicate on the "messageTTL" field.
func MessageTTLGT(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldMessageTTL, v))
}

// MessageTTLGTE applies the GTE predicate on the "messageTTL" field.
func MessageTTLGTE(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldMessageTTL, v))
}

// MessageTTLLT applies the LT predicate on the "messageTTL" field.
func MessageTTLLT(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldMessageTTL, v))
}

// MessageTTLLTE applies the LTE predicate on the "messageTTL" field.
func MessageTTLLTE(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldMessageTTL, v))
}

// MessageTTLContains applies the Contains predicate on the "messageTTL" field.
func MessageTTLContains(v sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldContains(FieldMessageTTL, vc))
}

// MessageTTLHasPrefix applies the HasPrefix predicate on the "messageTTL" field.
func MessageTTLHasPrefix(v sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldHasPrefix(FieldMessageTTL, vc))
}

// MessageTTLHasSuffix applies the HasSuffix predicate on the "messageTTL" field.
func MessageTTLHasSuffix(v sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldHasSuffix(FieldMessageTTL, vc))
}

// MessageTTLEqualFold applies the EqualFold predicate on the "messageTTL" field.
func MessageTTLEqualFold(v sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldEqualFold(FieldMessageTTL, vc))
}

// MessageTTLContainsFold applies the ContainsFold predicate on the "messageTTL" field.
func MessageTTLContainsFold(v sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldContainsFold(FieldMessageTTL, vc))
}

// OrderedDeliveryEQ applies the EQ predicate on the "orderedDelivery" field.
func OrderedDeliveryEQ(v bool) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldOrderedDelivery, v))
}

// OrderedDeliveryNEQ applies the NEQ predicate on the "orderedDelivery" field.
func OrderedDeliveryNEQ(v bool) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldOrderedDelivery, v))
}

// OrderedDeliveryIsNil applies the IsNil predicate on the "orderedDelivery" field.
func OrderedDeliveryIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldOrderedDelivery))
}

// OrderedDeliveryNotNil applies the NotNil predicate on the "orderedDelivery" field.
func OrderedDeliveryNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldOrderedDelivery))
}

// LabelsIsNil applies the IsNil predicate on the "labels" field.
func LabelsIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldLabels))
}

// LabelsNotNil applies the NotNil predicate on the "labels" field.
func LabelsNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldLabels))
}

// MinBackoffEQ applies the EQ predicate on the "minBackoff" field.
func MinBackoffEQ(v *sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldMinBackoff, v))
}

// MinBackoffNEQ applies the NEQ predicate on the "minBackoff" field.
func MinBackoffNEQ(v *sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldMinBackoff, v))
}

// MinBackoffIn applies the In predicate on the "minBackoff" field.
func MinBackoffIn(vs ...*sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldMinBackoff, vs...))
}

// MinBackoffNotIn applies the NotIn predicate on the "minBackoff" field.
func MinBackoffNotIn(vs ...*sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldMinBackoff, vs...))
}

// MinBackoffGT applies the GT predicate on the "minBackoff" field.
func MinBackoffGT(v *sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldMinBackoff, v))
}

// MinBackoffGTE applies the GTE predicate on the "minBackoff" field.
func MinBackoffGTE(v *sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldMinBackoff, v))
}

// MinBackoffLT applies the LT predicate on the "minBackoff" field.
func MinBackoffLT(v *sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldMinBackoff, v))
}

// MinBackoffLTE applies the LTE predicate on the "minBackoff" field.
func MinBackoffLTE(v *sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldMinBackoff, v))
}

// MinBackoffContains applies the Contains predicate on the "minBackoff" field.
func MinBackoffContains(v *sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldContains(FieldMinBackoff, vc))
}

// MinBackoffHasPrefix applies the HasPrefix predicate on the "minBackoff" field.
func MinBackoffHasPrefix(v *sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldHasPrefix(FieldMinBackoff, vc))
}

// MinBackoffHasSuffix applies the HasSuffix predicate on the "minBackoff" field.
func MinBackoffHasSuffix(v *sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldHasSuffix(FieldMinBackoff, vc))
}

// MinBackoffIsNil applies the IsNil predicate on the "minBackoff" field.
func MinBackoffIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldMinBackoff))
}

// MinBackoffNotNil applies the NotNil predicate on the "minBackoff" field.
func MinBackoffNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldMinBackoff))
}

// MinBackoffEqualFold applies the EqualFold predicate on the "minBackoff" field.
func MinBackoffEqualFold(v *sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldEqualFold(FieldMinBackoff, vc))
}

// MinBackoffContainsFold applies the ContainsFold predicate on the "minBackoff" field.
func MinBackoffContainsFold(v *sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldContainsFold(FieldMinBackoff, vc))
}

// MaxBackoffEQ applies the EQ predicate on the "maxBackoff" field.
func MaxBackoffEQ(v *sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldMaxBackoff, v))
}

// MaxBackoffNEQ applies the NEQ predicate on the "maxBackoff" field.
func MaxBackoffNEQ(v *sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldMaxBackoff, v))
}

// MaxBackoffIn applies the In predicate on the "maxBackoff" field.
func MaxBackoffIn(vs ...*sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldMaxBackoff, vs...))
}

// MaxBackoffNotIn applies the NotIn predicate on the "maxBackoff" field.
func MaxBackoffNotIn(vs ...*sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldMaxBackoff, vs...))
}

// MaxBackoffGT applies the GT predicate on the "maxBackoff" field.
func MaxBackoffGT(v *sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldMaxBackoff, v))
}

// MaxBackoffGTE applies the GTE predicate on the "maxBackoff" field.
func MaxBackoffGTE(v *sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldMaxBackoff, v))
}

// MaxBackoffLT applies the LT predicate on the "maxBackoff" field.
func MaxBackoffLT(v *sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldMaxBackoff, v))
}

// MaxBackoffLTE applies the LTE predicate on the "maxBackoff" field.
func MaxBackoffLTE(v *sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldMaxBackoff, v))
}

// MaxBackoffContains applies the Contains predicate on the "maxBackoff" field.
func MaxBackoffContains(v *sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldContains(FieldMaxBackoff, vc))
}

// MaxBackoffHasPrefix applies the HasPrefix predicate on the "maxBackoff" field.
func MaxBackoffHasPrefix(v *sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldHasPrefix(FieldMaxBackoff, vc))
}

// MaxBackoffHasSuffix applies the HasSuffix predicate on the "maxBackoff" field.
func MaxBackoffHasSuffix(v *sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldHasSuffix(FieldMaxBackoff, vc))
}

// MaxBackoffIsNil applies the IsNil predicate on the "maxBackoff" field.
func MaxBackoffIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldMaxBackoff))
}

// MaxBackoffNotNil applies the NotNil predicate on the "maxBackoff" field.
func MaxBackoffNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldMaxBackoff))
}

// MaxBackoffEqualFold applies the EqualFold predicate on the "maxBackoff" field.
func MaxBackoffEqualFold(v *sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldEqualFold(FieldMaxBackoff, vc))
}

// MaxBackoffContainsFold applies the ContainsFold predicate on the "maxBackoff" field.
func MaxBackoffContainsFold(v *sqltypes.Interval) predicate.Subscription {
	vc := v.String()
	return predicate.Subscription(sql.FieldContainsFold(FieldMaxBackoff, vc))
}

// PushEndpointEQ applies the EQ predicate on the "pushEndpoint" field.
func PushEndpointEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldPushEndpoint, v))
}

// PushEndpointNEQ applies the NEQ predicate on the "pushEndpoint" field.
func PushEndpointNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldPushEndpoint, v))
}

// PushEndpointIn applies the In predicate on the "pushEndpoint" field.
func PushEndpointIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldPushEndpoint, vs...))
}

// PushEndpointNotIn applies the NotIn predicate on the "pushEndpoint" field.
func PushEndpointNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldPushEndpoint, vs...))
}

// PushEndpointGT applies the GT predicate on the "pushEndpoint" field.
func PushEndpointGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldPushEndpoint, v))
}

// PushEndpointGTE applies the GTE predicate on the "pushEndpoint" field.
func PushEndpointGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldPushEndpoint, v))
}

// PushEndpointLT applies the LT predicate on the "pushEndpoint" field.
func PushEndpointLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldPushEndpoint, v))
}

// PushEndpointLTE applies the LTE predicate on the "pushEndpoint" field.
func PushEndpointLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldPushEndpoint, v))
}

// PushEndpointContains applies the Contains predicate on the "pushEndpoint" field.
func PushEndpointContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldPushEndpoint, v))
}

// PushEndpointHasPrefix applies the HasPrefix predicate on the "pushEndpoint" field.
func PushEndpointHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldPushEndpoint, v))
}

// PushEndpointHasSuffix applies the HasSuffix predicate on the "pushEndpoint" field.
func PushEndpointHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldPushEndpoint, v))
}

// PushEndpointIsNil applies the IsNil predicate on the "pushEndpoint" field.
func PushEndpointIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldPushEndpoint))
}

// PushEndpointNotNil applies the NotNil predicate on the "pushEndpoint" field.
func PushEndpointNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldPushEndpoint))
}

// PushEndpointEqualFold applies the EqualFold predicate on the "pushEndpoint" field.
func PushEndpointEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldPushEndpoint, v))
}

// PushEndpointContainsFold applies the ContainsFold predicate on the "pushEndpoint" field.
func PushEndpointContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldPushEndpoint, v))
}

// MessageFilterEQ applies the EQ predicate on the "messageFilter" field.
func MessageFilterEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldMessageFilter, v))
}

// MessageFilterNEQ applies the NEQ predicate on the "messageFilter" field.
func MessageFilterNEQ(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldMessageFilter, v))
}

// MessageFilterIn applies the In predicate on the "messageFilter" field.
func MessageFilterIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldMessageFilter, vs...))
}

// MessageFilterNotIn applies the NotIn predicate on the "messageFilter" field.
func MessageFilterNotIn(vs ...string) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldMessageFilter, vs...))
}

// MessageFilterGT applies the GT predicate on the "messageFilter" field.
func MessageFilterGT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldMessageFilter, v))
}

// MessageFilterGTE applies the GTE predicate on the "messageFilter" field.
func MessageFilterGTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldMessageFilter, v))
}

// MessageFilterLT applies the LT predicate on the "messageFilter" field.
func MessageFilterLT(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldMessageFilter, v))
}

// MessageFilterLTE applies the LTE predicate on the "messageFilter" field.
func MessageFilterLTE(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldMessageFilter, v))
}

// MessageFilterContains applies the Contains predicate on the "messageFilter" field.
func MessageFilterContains(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContains(FieldMessageFilter, v))
}

// MessageFilterHasPrefix applies the HasPrefix predicate on the "messageFilter" field.
func MessageFilterHasPrefix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasPrefix(FieldMessageFilter, v))
}

// MessageFilterHasSuffix applies the HasSuffix predicate on the "messageFilter" field.
func MessageFilterHasSuffix(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldHasSuffix(FieldMessageFilter, v))
}

// MessageFilterIsNil applies the IsNil predicate on the "messageFilter" field.
func MessageFilterIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldMessageFilter))
}

// MessageFilterNotNil applies the NotNil predicate on the "messageFilter" field.
func MessageFilterNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldMessageFilter))
}

// MessageFilterEqualFold applies the EqualFold predicate on the "messageFilter" field.
func MessageFilterEqualFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldEqualFold(FieldMessageFilter, v))
}

// MessageFilterContainsFold applies the ContainsFold predicate on the "messageFilter" field.
func MessageFilterContainsFold(v string) predicate.Subscription {
	return predicate.Subscription(sql.FieldContainsFold(FieldMessageFilter, v))
}

// MaxDeliveryAttemptsEQ applies the EQ predicate on the "maxDeliveryAttempts" field.
func MaxDeliveryAttemptsEQ(v int32) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldMaxDeliveryAttempts, v))
}

// MaxDeliveryAttemptsNEQ applies the NEQ predicate on the "maxDeliveryAttempts" field.
func MaxDeliveryAttemptsNEQ(v int32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldMaxDeliveryAttempts, v))
}

// MaxDeliveryAttemptsIn applies the In predicate on the "maxDeliveryAttempts" field.
func MaxDeliveryAttemptsIn(vs ...int32) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldMaxDeliveryAttempts, vs...))
}

// MaxDeliveryAttemptsNotIn applies the NotIn predicate on the "maxDeliveryAttempts" field.
func MaxDeliveryAttemptsNotIn(vs ...int32) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldMaxDeliveryAttempts, vs...))
}

// MaxDeliveryAttemptsGT applies the GT predicate on the "maxDeliveryAttempts" field.
func MaxDeliveryAttemptsGT(v int32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldMaxDeliveryAttempts, v))
}

// MaxDeliveryAttemptsGTE applies the GTE predicate on the "maxDeliveryAttempts" field.
func MaxDeliveryAttemptsGTE(v int32) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldMaxDeliveryAttempts, v))
}

// MaxDeliveryAttemptsLT applies the LT predicate on the "maxDeliveryAttempts" field.
func MaxDeliveryAttemptsLT(v int32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldMaxDeliveryAttempts, v))
}

// MaxDeliveryAttemptsLTE applies the LTE predicate on the "maxDeliveryAttempts" field.
func MaxDeliveryAttemptsLTE(v int32) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldMaxDeliveryAttempts, v))
}

// MaxDeliveryAttemptsIsNil applies the IsNil predicate on the "maxDeliveryAttempts" field.
func MaxDeliveryAttemptsIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldMaxDeliveryAttempts))
}

// MaxDeliveryAttemptsNotNil applies the NotNil predicate on the "maxDeliveryAttempts" field.
func MaxDeliveryAttemptsNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldMaxDeliveryAttempts))
}

// DeadLetterTopicIDEQ applies the EQ predicate on the "deadLetterTopicID" field.
func DeadLetterTopicIDEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldDeadLetterTopicID, v))
}

// DeadLetterTopicIDNEQ applies the NEQ predicate on the "deadLetterTopicID" field.
func DeadLetterTopicIDNEQ(v uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldDeadLetterTopicID, v))
}

// DeadLetterTopicIDIn applies the In predicate on the "deadLetterTopicID" field.
func DeadLetterTopicIDIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldDeadLetterTopicID, vs...))
}

// DeadLetterTopicIDNotIn applies the NotIn predicate on the "deadLetterTopicID" field.
func DeadLetterTopicIDNotIn(vs ...uuid.UUID) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldDeadLetterTopicID, vs...))
}

// DeadLetterTopicIDIsNil applies the IsNil predicate on the "deadLetterTopicID" field.
func DeadLetterTopicIDIsNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldIsNull(FieldDeadLetterTopicID))
}

// DeadLetterTopicIDNotNil applies the NotNil predicate on the "deadLetterTopicID" field.
func DeadLetterTopicIDNotNil() predicate.Subscription {
	return predicate.Subscription(sql.FieldNotNull(FieldDeadLetterTopicID))
}

// DeliveryDelayEQ applies the EQ predicate on the "deliveryDelay" field.
func DeliveryDelayEQ(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldEQ(FieldDeliveryDelay, v))
}

// DeliveryDelayNEQ applies the NEQ predicate on the "deliveryDelay" field.
func DeliveryDelayNEQ(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldNEQ(FieldDeliveryDelay, v))
}

// DeliveryDelayIn applies the In predicate on the "deliveryDelay" field.
func DeliveryDelayIn(vs ...sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldIn(FieldDeliveryDelay, vs...))
}

// DeliveryDelayNotIn applies the NotIn predicate on the "deliveryDelay" field.
func DeliveryDelayNotIn(vs ...sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldNotIn(FieldDeliveryDelay, vs...))
}

// DeliveryDelayGT applies the GT predicate on the "deliveryDelay" field.
func DeliveryDelayGT(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldGT(FieldDeliveryDelay, v))
}

// DeliveryDelayGTE applies the GTE predicate on the "deliveryDelay" field.
func DeliveryDelayGTE(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldGTE(FieldDeliveryDelay, v))
}

// DeliveryDelayLT applies the LT predicate on the "deliveryDelay" field.
func DeliveryDelayLT(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldLT(FieldDeliveryDelay, v))
}

// DeliveryDelayLTE applies the LTE predicate on the "deliveryDelay" field.
func DeliveryDelayLTE(v sqltypes.Interval) predicate.Subscription {
	return predicate.Subscription(sql.FieldLTE(FieldDeliveryDelay, v))
}

// HasTopic applies the HasEdge predicate on the "topic" edge.
func HasTopic() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TopicTable, TopicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTopicWith applies the HasEdge predicate on the "topic" edge with a given conditions (other predicates).
func HasTopicWith(preds ...predicate.Topic) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := newTopicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeliveries applies the HasEdge predicate on the "deliveries" edge.
func HasDeliveries() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DeliveriesTable, DeliveriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveriesWith applies the HasEdge predicate on the "deliveries" edge with a given conditions (other predicates).
func HasDeliveriesWith(preds ...predicate.Delivery) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := newDeliveriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDeadLetterTopic applies the HasEdge predicate on the "deadLetterTopic" edge.
func HasDeadLetterTopic() predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DeadLetterTopicTable, DeadLetterTopicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeadLetterTopicWith applies the HasEdge predicate on the "deadLetterTopic" edge with a given conditions (other predicates).
func HasDeadLetterTopicWith(preds ...predicate.Topic) predicate.Subscription {
	return predicate.Subscription(func(s *sql.Selector) {
		step := newDeadLetterTopicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Subscription) predicate.Subscription {
	return predicate.Subscription(sql.NotPredicates(p))
}
