// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"go.6river.tech/mmmbbb/ent/delivery"
	"go.6river.tech/mmmbbb/ent/message"
	"go.6river.tech/mmmbbb/ent/subscription"
)

// Delivery is the model entity for the Delivery schema.
type Delivery struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// MessageID holds the value of the "messageID" field.
	MessageID uuid.UUID `json:"messageID,omitempty"`
	// SubscriptionID holds the value of the "subscriptionID" field.
	SubscriptionID uuid.UUID `json:"subscriptionID,omitempty"`
	// Copy of message.publishedAt for ordered delivery support
	PublishedAt time.Time `json:"publishedAt,omitempty"`
	// Earliest time at which delivery should next be attempted
	AttemptAt time.Time `json:"attemptAt,omitempty"`
	// Time last attempt was started
	LastAttemptedAt *time.Time `json:"lastAttemptedAt,omitempty"`
	// Number of attempts started
	Attempts int `json:"attempts,omitempty"`
	// Time when last successfully delivered, or NULL if not yet
	CompletedAt *time.Time `json:"completedAt,omitempty"`
	// Time beyond which delivery should no longer be attempted even if not successful
	ExpiresAt time.Time `json:"expiresAt,omitempty"`
	// NotBeforeID holds the value of the "notBeforeID" field.
	NotBeforeID uuid.UUID `json:"notBeforeID,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeliveryQuery when eager-loading is set.
	Edges        DeliveryEdges `json:"-"`
	selectValues sql.SelectValues
}

// DeliveryEdges holds the relations/edges for other nodes in the graph.
type DeliveryEdges struct {
	// Message holds the value of the message edge.
	Message *Message `json:"message,omitempty"`
	// Subscription holds the value of the subscription edge.
	Subscription *Subscription `json:"subscription,omitempty"`
	// NotBefore holds the value of the notBefore edge.
	NotBefore *Delivery `json:"notBefore,omitempty"`
	// NextReady holds the value of the nextReady edge.
	NextReady []*Delivery `json:"nextReady,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// MessageOrErr returns the Message value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryEdges) MessageOrErr() (*Message, error) {
	if e.Message != nil {
		return e.Message, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: message.Label}
	}
	return nil, &NotLoadedError{edge: "message"}
}

// SubscriptionOrErr returns the Subscription value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryEdges) SubscriptionOrErr() (*Subscription, error) {
	if e.Subscription != nil {
		return e.Subscription, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: subscription.Label}
	}
	return nil, &NotLoadedError{edge: "subscription"}
}

// NotBeforeOrErr returns the NotBefore value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeliveryEdges) NotBeforeOrErr() (*Delivery, error) {
	if e.NotBefore != nil {
		return e.NotBefore, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: delivery.Label}
	}
	return nil, &NotLoadedError{edge: "notBefore"}
}

// NextReadyOrErr returns the NextReady value or an error if the edge
// was not loaded in eager-loading.
func (e DeliveryEdges) NextReadyOrErr() ([]*Delivery, error) {
	if e.loadedTypes[3] {
		return e.NextReady, nil
	}
	return nil, &NotLoadedError{edge: "nextReady"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Delivery) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case delivery.FieldAttempts:
			values[i] = new(sql.NullInt64)
		case delivery.FieldPublishedAt, delivery.FieldAttemptAt, delivery.FieldLastAttemptedAt, delivery.FieldCompletedAt, delivery.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		case delivery.FieldID, delivery.FieldMessageID, delivery.FieldSubscriptionID, delivery.FieldNotBeforeID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Delivery fields.
func (d *Delivery) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case delivery.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case delivery.FieldMessageID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field messageID", values[i])
			} else if value != nil {
				d.MessageID = *value
			}
		case delivery.FieldSubscriptionID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field subscriptionID", values[i])
			} else if value != nil {
				d.SubscriptionID = *value
			}
		case delivery.FieldPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field publishedAt", values[i])
			} else if value.Valid {
				d.PublishedAt = value.Time
			}
		case delivery.FieldAttemptAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field attemptAt", values[i])
			} else if value.Valid {
				d.AttemptAt = value.Time
			}
		case delivery.FieldLastAttemptedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastAttemptedAt", values[i])
			} else if value.Valid {
				d.LastAttemptedAt = new(time.Time)
				*d.LastAttemptedAt = value.Time
			}
		case delivery.FieldAttempts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field attempts", values[i])
			} else if value.Valid {
				d.Attempts = int(value.Int64)
			}
		case delivery.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completedAt", values[i])
			} else if value.Valid {
				d.CompletedAt = new(time.Time)
				*d.CompletedAt = value.Time
			}
		case delivery.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiresAt", values[i])
			} else if value.Valid {
				d.ExpiresAt = value.Time
			}
		case delivery.FieldNotBeforeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field notBeforeID", values[i])
			} else if value != nil {
				d.NotBeforeID = *value
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Delivery.
// This includes values selected through modifiers, order, etc.
func (d *Delivery) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryMessage queries the "message" edge of the Delivery entity.
func (d *Delivery) QueryMessage() *MessageQuery {
	return NewDeliveryClient(d.config).QueryMessage(d)
}

// QuerySubscription queries the "subscription" edge of the Delivery entity.
func (d *Delivery) QuerySubscription() *SubscriptionQuery {
	return NewDeliveryClient(d.config).QuerySubscription(d)
}

// QueryNotBefore queries the "notBefore" edge of the Delivery entity.
func (d *Delivery) QueryNotBefore() *DeliveryQuery {
	return NewDeliveryClient(d.config).QueryNotBefore(d)
}

// QueryNextReady queries the "nextReady" edge of the Delivery entity.
func (d *Delivery) QueryNextReady() *DeliveryQuery {
	return NewDeliveryClient(d.config).QueryNextReady(d)
}

// Update returns a builder for updating this Delivery.
// Note that you need to call Delivery.Unwrap() before calling this method if this Delivery
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Delivery) Update() *DeliveryUpdateOne {
	return NewDeliveryClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Delivery entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Delivery) Unwrap() *Delivery {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Delivery is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Delivery) String() string {
	var builder strings.Builder
	builder.WriteString("Delivery(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("messageID=")
	builder.WriteString(fmt.Sprintf("%v", d.MessageID))
	builder.WriteString(", ")
	builder.WriteString("subscriptionID=")
	builder.WriteString(fmt.Sprintf("%v", d.SubscriptionID))
	builder.WriteString(", ")
	builder.WriteString("publishedAt=")
	builder.WriteString(d.PublishedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("attemptAt=")
	builder.WriteString(d.AttemptAt.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := d.LastAttemptedAt; v != nil {
		builder.WriteString("lastAttemptedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("attempts=")
	builder.WriteString(fmt.Sprintf("%v", d.Attempts))
	builder.WriteString(", ")
	if v := d.CompletedAt; v != nil {
		builder.WriteString("completedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("expiresAt=")
	builder.WriteString(d.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("notBeforeID=")
	builder.WriteString(fmt.Sprintf("%v", d.NotBeforeID))
	builder.WriteByte(')')
	return builder.String()
}

// Deliveries is a parsable slice of Delivery.
type Deliveries []*Delivery
