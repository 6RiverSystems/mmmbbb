// Code generated by ent, DO NOT EDIT.

package message

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"go.6river.tech/mmmbbb/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// TopicID applies equality check predicate on the "topicID" field. It's identical to TopicIDEQ.
func TopicID(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldTopicID, v))
}

// PublishedAt applies equality check predicate on the "publishedAt" field. It's identical to PublishedAtEQ.
func PublishedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldPublishedAt, v))
}

// OrderKey applies equality check predicate on the "orderKey" field. It's identical to OrderKeyEQ.
func OrderKey(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldOrderKey, v))
}

// TopicIDEQ applies the EQ predicate on the "topicID" field.
func TopicIDEQ(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldTopicID, v))
}

// TopicIDNEQ applies the NEQ predicate on the "topicID" field.
func TopicIDNEQ(v uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldTopicID, v))
}

// TopicIDIn applies the In predicate on the "topicID" field.
func TopicIDIn(vs ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldTopicID, vs...))
}

// TopicIDNotIn applies the NotIn predicate on the "topicID" field.
func TopicIDNotIn(vs ...uuid.UUID) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldTopicID, vs...))
}

// AttributesIsNil applies the IsNil predicate on the "attributes" field.
func AttributesIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldAttributes))
}

// AttributesNotNil applies the NotNil predicate on the "attributes" field.
func AttributesNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldAttributes))
}

// PublishedAtEQ applies the EQ predicate on the "publishedAt" field.
func PublishedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldPublishedAt, v))
}

// PublishedAtNEQ applies the NEQ predicate on the "publishedAt" field.
func PublishedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldPublishedAt, v))
}

// PublishedAtIn applies the In predicate on the "publishedAt" field.
func PublishedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldPublishedAt, vs...))
}

// PublishedAtNotIn applies the NotIn predicate on the "publishedAt" field.
func PublishedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldPublishedAt, vs...))
}

// PublishedAtGT applies the GT predicate on the "publishedAt" field.
func PublishedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldPublishedAt, v))
}

// PublishedAtGTE applies the GTE predicate on the "publishedAt" field.
func PublishedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldPublishedAt, v))
}

// PublishedAtLT applies the LT predicate on the "publishedAt" field.
func PublishedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldPublishedAt, v))
}

// PublishedAtLTE applies the LTE predicate on the "publishedAt" field.
func PublishedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldPublishedAt, v))
}

// OrderKeyEQ applies the EQ predicate on the "orderKey" field.
func OrderKeyEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldOrderKey, v))
}

// OrderKeyNEQ applies the NEQ predicate on the "orderKey" field.
func OrderKeyNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldOrderKey, v))
}

// OrderKeyIn applies the In predicate on the "orderKey" field.
func OrderKeyIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldOrderKey, vs...))
}

// OrderKeyNotIn applies the NotIn predicate on the "orderKey" field.
func OrderKeyNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldOrderKey, vs...))
}

// OrderKeyGT applies the GT predicate on the "orderKey" field.
func OrderKeyGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldOrderKey, v))
}

// OrderKeyGTE applies the GTE predicate on the "orderKey" field.
func OrderKeyGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldOrderKey, v))
}

// OrderKeyLT applies the LT predicate on the "orderKey" field.
func OrderKeyLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldOrderKey, v))
}

// OrderKeyLTE applies the LTE predicate on the "orderKey" field.
func OrderKeyLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldOrderKey, v))
}

// OrderKeyContains applies the Contains predicate on the "orderKey" field.
func OrderKeyContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldOrderKey, v))
}

// OrderKeyHasPrefix applies the HasPrefix predicate on the "orderKey" field.
func OrderKeyHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldOrderKey, v))
}

// OrderKeyHasSuffix applies the HasSuffix predicate on the "orderKey" field.
func OrderKeyHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldOrderKey, v))
}

// OrderKeyIsNil applies the IsNil predicate on the "orderKey" field.
func OrderKeyIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldOrderKey))
}

// OrderKeyNotNil applies the NotNil predicate on the "orderKey" field.
func OrderKeyNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldOrderKey))
}

// OrderKeyEqualFold applies the EqualFold predicate on the "orderKey" field.
func OrderKeyEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldOrderKey, v))
}

// OrderKeyContainsFold applies the ContainsFold predicate on the "orderKey" field.
func OrderKeyContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldOrderKey, v))
}

// HasDeliveries applies the HasEdge predicate on the "deliveries" edge.
func HasDeliveries() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, DeliveriesTable, DeliveriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDeliveriesWith applies the HasEdge predicate on the "deliveries" edge with a given conditions (other predicates).
func HasDeliveriesWith(preds ...predicate.Delivery) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newDeliveriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTopic applies the HasEdge predicate on the "topic" edge.
func HasTopic() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TopicTable, TopicColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTopicWith applies the HasEdge predicate on the "topic" edge with a given conditions (other predicates).
func HasTopicWith(preds ...predicate.Topic) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newTopicStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(sql.NotPredicates(p))
}
