// Code generated by ent, DO NOT EDIT.

package message

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the message type in the database.
	Label = "message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTopicID holds the string denoting the topicid field in the database.
	FieldTopicID = "topic_id"
	// FieldPayload holds the string denoting the payload field in the database.
	FieldPayload = "payload"
	// FieldAttributes holds the string denoting the attributes field in the database.
	FieldAttributes = "attributes"
	// FieldPublishedAt holds the string denoting the publishedat field in the database.
	FieldPublishedAt = "published_at"
	// FieldOrderKey holds the string denoting the orderkey field in the database.
	FieldOrderKey = "order_key"
	// EdgeDeliveries holds the string denoting the deliveries edge name in mutations.
	EdgeDeliveries = "deliveries"
	// EdgeTopic holds the string denoting the topic edge name in mutations.
	EdgeTopic = "topic"
	// Table holds the table name of the message in the database.
	Table = "messages"
	// DeliveriesTable is the table that holds the deliveries relation/edge.
	DeliveriesTable = "deliveries"
	// DeliveriesInverseTable is the table name for the Delivery entity.
	// It exists in this package in order to avoid circular dependency with the "delivery" package.
	DeliveriesInverseTable = "deliveries"
	// DeliveriesColumn is the table column denoting the deliveries relation/edge.
	DeliveriesColumn = "message_id"
	// TopicTable is the table that holds the topic relation/edge.
	TopicTable = "messages"
	// TopicInverseTable is the table name for the Topic entity.
	// It exists in this package in order to avoid circular dependency with the "topic" package.
	TopicInverseTable = "topics"
	// TopicColumn is the table column denoting the topic relation/edge.
	TopicColumn = "topic_id"
)

// Columns holds all SQL columns for message fields.
var Columns = []string{
	FieldID,
	FieldTopicID,
	FieldPayload,
	FieldAttributes,
	FieldPublishedAt,
	FieldOrderKey,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultPublishedAt holds the default value on creation for the "publishedAt" field.
	DefaultPublishedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Message queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTopicID orders the results by the topicID field.
func ByTopicID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopicID, opts...).ToFunc()
}

// ByPublishedAt orders the results by the publishedAt field.
func ByPublishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishedAt, opts...).ToFunc()
}

// ByOrderKey orders the results by the orderKey field.
func ByOrderKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrderKey, opts...).ToFunc()
}

// ByDeliveriesCount orders the results by deliveries count.
func ByDeliveriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDeliveriesStep(), opts...)
	}
}

// ByDeliveries orders the results by deliveries terms.
func ByDeliveries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeliveriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByTopicField orders the results by topic field.
func ByTopicField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTopicStep(), sql.OrderByField(field, opts...))
	}
}
func newDeliveriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeliveriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, DeliveriesTable, DeliveriesColumn),
	)
}
func newTopicStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TopicInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TopicTable, TopicColumn),
	)
}
