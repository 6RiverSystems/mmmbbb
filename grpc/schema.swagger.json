{
  "swagger": "2.0",
  "info": {
    "title": "google/pubsub/v1/schema.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "SchemaService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/{name}": {
      "get": {
        "summary": "Gets a schema.",
        "operationId": "SchemaService_GetSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Schema"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Required. The name of the schema to get.\nFormat is `projects/{project}/schemas/{schema}`.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+/schemas/[^/]+"
          },
          {
            "name": "view",
            "description": "The set of fields to return in the response. If not set, returns a Schema\nwith all fields filled out. Set to `BASIC` to omit the `definition`.\n\n - SCHEMA_VIEW_UNSPECIFIED: The default / unset value.\nThe API will default to the BASIC view.\n - BASIC: Include the name and type of the schema, but not the definition.\n - FULL: Include all Schema object fields.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SCHEMA_VIEW_UNSPECIFIED",
              "BASIC",
              "FULL"
            ],
            "default": "SCHEMA_VIEW_UNSPECIFIED"
          }
        ],
        "tags": [
          "SchemaService"
        ]
      },
      "delete": {
        "summary": "Deletes a schema.",
        "operationId": "SchemaService_DeleteSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Required. Name of the schema to delete.\nFormat is `projects/{project}/schemas/{schema}`.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+/schemas/[^/]+"
          }
        ],
        "tags": [
          "SchemaService"
        ]
      }
    },
    "/v1/{name}:commit": {
      "post": {
        "summary": "Commits a new schema revision to an existing schema.",
        "operationId": "SchemaService_CommitSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Schema"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Required. The name of the schema we are revising.\nFormat is `projects/{project}/schemas/{schema}`.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+/schemas/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "schema": {
                  "$ref": "#/definitions/v1Schema",
                  "description": "Required. The schema revision to commit."
                }
              },
              "description": "Request for CommitSchema method.",
              "required": [
                "schema"
              ]
            }
          }
        ],
        "tags": [
          "SchemaService"
        ]
      }
    },
    "/v1/{name}:deleteRevision": {
      "delete": {
        "summary": "Deletes a specific schema revision.",
        "operationId": "SchemaService_DeleteSchemaRevision",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Schema"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Required. The name of the schema revision to be deleted, with a revision ID\nexplicitly included.\n\nExample: `projects/123/schemas/my-schema@c7cfa2a8`",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+/schemas/[^/]+"
          },
          {
            "name": "revisionId",
            "description": "Optional. This field is deprecated and should not be used for specifying\nthe revision ID. The revision ID should be specified via the `name`\nparameter.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SchemaService"
        ]
      }
    },
    "/v1/{name}:listRevisions": {
      "get": {
        "summary": "Lists all schema revisions for the named schema.",
        "operationId": "SchemaService_ListSchemaRevisions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSchemaRevisionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Required. The name of the schema to list revisions for.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+/schemas/[^/]+"
          },
          {
            "name": "view",
            "description": "The set of Schema fields to return in the response. If not set, returns\nSchemas with `name` and `type`, but not `definition`. Set to `FULL` to\nretrieve all fields.\n\n - SCHEMA_VIEW_UNSPECIFIED: The default / unset value.\nThe API will default to the BASIC view.\n - BASIC: Include the name and type of the schema, but not the definition.\n - FULL: Include all Schema object fields.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SCHEMA_VIEW_UNSPECIFIED",
              "BASIC",
              "FULL"
            ],
            "default": "SCHEMA_VIEW_UNSPECIFIED"
          },
          {
            "name": "pageSize",
            "description": "The maximum number of revisions to return per page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "The page token, received from a previous ListSchemaRevisions call.\nProvide this to retrieve the subsequent page.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SchemaService"
        ]
      }
    },
    "/v1/{name}:rollback": {
      "post": {
        "summary": "Creates a new schema revision that is a copy of the provided revision_id.",
        "operationId": "SchemaService_RollbackSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Schema"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Required. The schema being rolled back with revision id.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+/schemas/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "revisionId": {
                  "type": "string",
                  "description": "Required. The revision ID to roll back to.\nIt must be a revision of the same schema.\n\n  Example: c7cfa2a8"
                }
              },
              "description": "Request for the `RollbackSchema` method.",
              "required": [
                "revisionId"
              ]
            }
          }
        ],
        "tags": [
          "SchemaService"
        ]
      }
    },
    "/v1/{parent}/schemas": {
      "get": {
        "summary": "Lists schemas in a project.",
        "operationId": "SchemaService_ListSchemas",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSchemasResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Required. The name of the project in which to list schemas.\nFormat is `projects/{project-id}`.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+"
          },
          {
            "name": "view",
            "description": "The set of Schema fields to return in the response. If not set, returns\nSchemas with `name` and `type`, but not `definition`. Set to `FULL` to\nretrieve all fields.\n\n - SCHEMA_VIEW_UNSPECIFIED: The default / unset value.\nThe API will default to the BASIC view.\n - BASIC: Include the name and type of the schema, but not the definition.\n - FULL: Include all Schema object fields.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SCHEMA_VIEW_UNSPECIFIED",
              "BASIC",
              "FULL"
            ],
            "default": "SCHEMA_VIEW_UNSPECIFIED"
          },
          {
            "name": "pageSize",
            "description": "Maximum number of schemas to return.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "pageToken",
            "description": "The value returned by the last `ListSchemasResponse`; indicates that\nthis is a continuation of a prior `ListSchemas` call, and that the\nsystem should return the next page of data.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SchemaService"
        ]
      },
      "post": {
        "summary": "Creates a schema.",
        "operationId": "SchemaService_CreateSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Schema"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Required. The name of the project in which to create the schema.\nFormat is `projects/{project-id}`.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+"
          },
          {
            "name": "schema",
            "description": "Required. The schema object to create.\n\nThis schema's `name` parameter is ignored. The schema object returned\nby CreateSchema will have a `name` made using the given `parent` and\n`schema_id`.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1Schema",
              "required": [
                "schema"
              ]
            }
          },
          {
            "name": "schemaId",
            "description": "The ID to use for the schema, which will become the final component of\nthe schema's resource name.\n\nSee https://cloud.google.com/pubsub/docs/pubsub-basics#resource_names for\nresource name constraints.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SchemaService"
        ]
      }
    },
    "/v1/{parent}/schemas:validate": {
      "post": {
        "summary": "Validates a schema.",
        "operationId": "SchemaService_ValidateSchema",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ValidateSchemaResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Required. The name of the project in which to validate schemas.\nFormat is `projects/{project-id}`.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "schema": {
                  "$ref": "#/definitions/v1Schema",
                  "description": "Required. The schema object to validate."
                }
              },
              "description": "Request for the `ValidateSchema` method.",
              "required": [
                "schema"
              ]
            }
          }
        ],
        "tags": [
          "SchemaService"
        ]
      }
    },
    "/v1/{parent}/schemas:validateMessage": {
      "post": {
        "summary": "Validates a message against a schema.",
        "operationId": "SchemaService_ValidateMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ValidateMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Required. The name of the project in which to validate schemas.\nFormat is `projects/{project-id}`.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "projects/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the schema against which to validate.\n\nFormat is `projects/{project}/schemas/{schema}`."
                },
                "schema": {
                  "$ref": "#/definitions/v1Schema",
                  "title": "Ad-hoc schema against which to validate"
                },
                "message": {
                  "type": "string",
                  "format": "byte",
                  "description": "Message to validate against the provided `schema_spec`."
                },
                "encoding": {
                  "$ref": "#/definitions/v1Encoding",
                  "title": "The encoding expected for messages"
                }
              },
              "description": "Request for the `ValidateMessage` method."
            }
          }
        ],
        "tags": [
          "SchemaService"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Encoding": {
      "type": "string",
      "enum": [
        "ENCODING_UNSPECIFIED",
        "JSON",
        "BINARY"
      ],
      "default": "ENCODING_UNSPECIFIED",
      "description": "Possible encoding types for messages.\n\n - ENCODING_UNSPECIFIED: Unspecified\n - JSON: JSON encoding\n - BINARY: Binary encoding, as defined by the schema type. For some schema types,\nbinary encoding may not be available."
    },
    "v1ListSchemaRevisionsResponse": {
      "type": "object",
      "properties": {
        "schemas": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Schema"
          },
          "description": "The revisions of the schema."
        },
        "nextPageToken": {
          "type": "string",
          "description": "A token that can be sent as `page_token` to retrieve the next page.\nIf this field is empty, there are no subsequent pages."
        }
      },
      "description": "Response for the `ListSchemaRevisions` method."
    },
    "v1ListSchemasResponse": {
      "type": "object",
      "properties": {
        "schemas": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Schema"
          },
          "description": "The resulting schemas."
        },
        "nextPageToken": {
          "type": "string",
          "description": "If not empty, indicates that there may be more schemas that match the\nrequest; this value should be passed in a new `ListSchemasRequest`."
        }
      },
      "description": "Response for the `ListSchemas` method."
    },
    "v1Schema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required. Name of the schema.\nFormat is `projects/{project}/schemas/{schema}`."
        },
        "type": {
          "$ref": "#/definitions/v1SchemaType",
          "description": "The type of the schema definition."
        },
        "definition": {
          "type": "string",
          "description": "The definition of the schema. This should contain a string representing\nthe full definition of the schema that is a valid schema definition of\nthe type specified in `type`."
        },
        "revisionId": {
          "type": "string",
          "description": "Output only. Immutable. The revision ID of the schema.",
          "readOnly": true
        },
        "revisionCreateTime": {
          "type": "string",
          "format": "date-time",
          "description": "Output only. The timestamp that the revision was created.",
          "readOnly": true
        }
      },
      "description": "A schema resource.",
      "required": [
        "name"
      ]
    },
    "v1SchemaType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "PROTOCOL_BUFFER",
        "AVRO"
      ],
      "default": "TYPE_UNSPECIFIED",
      "description": "Possible schema definition types.\n\n - TYPE_UNSPECIFIED: Default value. This value is unused.\n - PROTOCOL_BUFFER: A Protocol Buffer schema definition.\n - AVRO: An Avro schema definition."
    },
    "v1SchemaView": {
      "type": "string",
      "enum": [
        "SCHEMA_VIEW_UNSPECIFIED",
        "BASIC",
        "FULL"
      ],
      "default": "SCHEMA_VIEW_UNSPECIFIED",
      "description": "View of Schema object fields to be returned by GetSchema and ListSchemas.\n\n - SCHEMA_VIEW_UNSPECIFIED: The default / unset value.\nThe API will default to the BASIC view.\n - BASIC: Include the name and type of the schema, but not the definition.\n - FULL: Include all Schema object fields."
    },
    "v1ValidateMessageResponse": {
      "type": "object",
      "description": "Response for the `ValidateMessage` method.\nEmpty for now."
    },
    "v1ValidateSchemaResponse": {
      "type": "object",
      "description": "Response for the `ValidateSchema` method.\nEmpty for now."
    }
  }
}
